{"version":3,"sources":["utils/interfaces.ts","utils/enums.ts","store/GameDebugStore.ts","utils/hooks.ts","store/GameStore.ts","components/ui/HomescreenUI.tsx","components/ui/SplashscreenUI.tsx","components/ui/MinigameUI.tsx","components/ui/PostMinigameUI.tsx","components/ui/DeathscreenUI.tsx","components/ui/GameUI.tsx","components/ui/debug/DebugContainer.tsx","utils/constants.ts","game/scenes/BaseScene.ts","game/scenes/BootScene.ts","game/scenes/SplashscreenScene.ts","game/scenes/HomescreenScene.ts","utils/extensions.ts","utils/functions.ts","game/objects/SpamContent.ts","game/scenes/action/SpamGameScene.ts","game/scenes/action/ActionSecondGameScene.ts","game/scenes/action/ActionThirdGameScene.ts","game/scenes/waiting/ElevatorFirstGameScene.ts","game/scenes/waiting/ElevatorSecondGameScene.ts","game/scenes/PostMinigameScene.ts","game/scenes/DeathscreenScene.ts","utils/game.ts","game/manager/GameManager.ts","components/ui/debug/GameDebugStateList.tsx","components/GameDebug.tsx","components/ui/debug/DebugButton.tsx","components/ui/debug/GameDebugToggleButton.tsx","components/ui/debug/GameDebugToggleThemeButton.tsx","components/ui/debug/GameDebugButtonsToolbar.tsx","components/Game.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["GameDebugTheme","GameCategory","GameState","gameDebugStore","this","theme","Dark","toUpperCase","Light","observable","action","_this","debug","_this2","newTheme","_this3","_this4","computed","useClassTheme","forceTheme","isDarkTheme","gameStore","Splashscreen","volume","newState","state","difficulity","innerWidth","ratioResolution","HomescreenUI","react_default","a","createElement","className","SplashscreenUI","MinigameUI","PostMinigameUI","DeathscreenUI","observer","UIComponent","ui_SplashscreenUI","Homescreen","ui_HomescreenUI","Minigame","ui_MinigameUI","PostMinigame","ui_PostMinigameUI","Deathscreen","ui_DeathscreenUI","DebugContainer","props","title","children","center","rounded","x","y","zIndex","draggable","isDraggable","undefined","defaultProps","classNames","themeClass","push","section","join","style","left","top","react_draggable_default","scenesKeys","Boot","SpamGame","ActionSecondGame","ActionThirdGame","ElevatorFirstGame","ElevatorSecondGame","PostMinigameScene","BaseScene","_categoriesProbabilit","Object","defineProperty","Action","Waiting","console","log","concat","scene","key","game","dump","time","delta","Phaser","Scene","BootScene","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","gameManager","loadSplashscreen","SplashscreenScene","HomescreenScene","graphics","add","fillStyle","fillRect","text","List","_Array","items","_getPrototypeOf2","length","apply","toConsumableArray","inherits","createClass","value","Math","floor","random","searchedValue","find","item","wrapNativeSuper","Array","randomRange","min","max","SpamContent","params","texture","frame","setOrigin","GameObjects","Sprite","SpamGameScene","spams","counter","load","pack","image","availablesSpam","i","setTimeout","container","window","innerHeight","setScale","close","sprite","width","height","ActionSecondGameScene","ActionThirdGameScene","ElevatorFirstGameScene","ElevatorSecondGameScene","DeathscreenScene","gameConfig","antialias","backgroundColor","input","gamepad","keyboard","mouse","touch","physics","arcade","gravity","default","version","zoom","parent","type","AUTO","pixelArt","Game","start","changeState","loadHomescreen","remove","loadMinigame","minigameKey","loadDeathscreen","availableStates","keys","map","gameState","handleInputChange","e","target","react","debug_DebugContainer","availableState","id","name","checked","onChange","GameDebug","visible","display","debug_GameDebugStateList","DebugButton","onClick","split","render","button","assign","objectSpread","position","listener","showDebug","hideDebug","Key","Escape","useEffect","addEventListener","removeEventListener","debug_DebugButton","toggleTheme","otherThemeName","GameDebugButtonsToolbar","debug_GameDebugToggleThemeButton","debug_GameDebugToggleButton","_useResize","_useState","useState","_useState2","slicedToArray","size","setSize","useResize","canvas","debug_GameDebugButtonsToolbar","components_GameDebug","ui_GameUI","App","components_Game","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","__webpack_require__","d","__webpack_exports__","Emitter","EventEmitter","ReactDOM","src_App","document","getElementById","URL","process","toString","origin","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"6HA8BYA,sHC9BAC,EAKAC,kECsCGC,EADQ,iUAfnB,OAAOC,KAAKC,QAAUL,EAAeM,4CAIrC,OAAOF,KAAKC,MAAM,GAAGE,qDAIrB,OAAOH,KAAKC,QAAUL,EAAeM,KACnCN,EAAeQ,MACfR,EAAeM,iDAhClBG,8EAAmC,wCACnCA,8EAA0CT,EAAeM,+CAEzDI,yFAA0B,WACzBC,EAAKC,OAAQ,6CAGdF,yFAA0B,WACzBG,EAAKD,OAAQ,4CAGdF,yFAAyB,SAACI,GACzBC,EAAKV,MAAQS,+CAGdJ,yFAA4B,WAC3BM,EAAKX,MAAQW,EAAKX,QAAUL,EAAeM,KACzCN,EAAeQ,MACfR,EAAeM,gDAGlBW,uHAIAA,0HAIAA,mFCEUC,EAAgB,SAACC,GAA+C,IACnEC,EAAgBjB,EAAhBiB,YAER,OAAID,GAAcC,EACT,WAGJA,GAAeD,GAAcA,IAAenB,EAAeM,KACvD,UACEc,GAAeD,GAAcA,IAAenB,EAAeM,KAC7D,WACEa,GAA6BnB,EAAeQ,MAC9C,yBFhDCP,8DAKAC,2JGqBGmB,EADG,wWAnBfZ,8EAAqCP,EAAUoB,yDAC/Cb,8EAAwC,2CACxCA,6EAA2C,CAACc,OAAQ,mDACpDd,8EAA4C,8CAE5CC,yFAA4B,SAACc,GAC5Bb,EAAKc,MAAQD,sDAGdd,yFAAmC,WAClCG,EAAKa,qEAGNhB,yFAAsC,SAACiB,GACtCZ,EAAKa,gBAAkB,SCVZC,EARyB,WACtC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,0CCKSE,EAR2B,WACxC,OACEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,4CCKSG,EARuB,WACpC,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,wCCKSI,EAR2B,WACxC,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,6CCKSK,EAR0B,WACvC,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,2CCmCSM,cA9BmB,WAAM,IAC/Bb,EAASJ,EAATI,MAEHc,EAAcT,EAAAC,EAAAC,cAACQ,EAAD,MAElB,OAAQf,GACN,KAAKvB,EAAUoB,aACbiB,EAAcT,EAAAC,EAAAC,cAACQ,EAAD,MACd,MACF,KAAKtC,EAAUuC,WACbF,EAAcT,EAAAC,EAAAC,cAACU,EAAD,MACd,MACF,KAAKxC,EAAUyC,SACbJ,EAAcT,EAAAC,EAAAC,cAACY,EAAD,MACd,MACF,KAAK1C,EAAU2C,aACbN,EAAcT,EAAAC,EAAAC,cAACc,EAAD,MACd,MACF,KAAK5C,EAAU6C,YACbR,EAAcT,EAAAC,EAAAC,cAACgB,EAAD,MAIlB,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZM,uBCtBDU,EAAmF,SAAnFA,EAAoFC,GAAU,IAC3FC,EAAyED,EAAzEC,MAAOC,EAAkEF,EAAlEE,SAAUC,EAAwDH,EAAxDG,OAAQC,EAAgDJ,EAAhDI,QAASnC,EAAuC+B,EAAvC/B,WAAYoC,EAA2BL,EAA3BK,EAAGC,EAAwBN,EAAxBM,EAAGC,EAAqBP,EAArBO,OAAQC,EAAaR,EAAbQ,UAC7DC,OAA4BC,IAAdF,EAA0BA,EAAYT,EAAeY,aAAcH,UACjFI,EAAa,CAAC,kBAAmB,aACjCC,EAAa7C,EAAcC,GAC7B4C,GACFD,EAAWE,KAAKD,GAGdZ,GAAmB,KAAVA,GACXW,EAAWE,KAAK,cAEdX,GACFS,EAAWE,KAAK,aAEdV,GACFQ,EAAWE,KAAK,cAGlB,IAAMC,EAAUnC,EAAAC,EAAAC,cAAA,WAASC,UAAW6B,EAAWI,KAAK,KAAMC,MAAO,CAACC,KAAMb,EAAGc,IAAKb,EAAGC,WAChFN,GAAmB,KAAVA,GAAgBrB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASkB,GAChDC,GAGH,OAAIO,EAEA7B,EAAAC,EAAAC,cAACsC,EAAAvC,EAAD,KACGkC,GAKAA,GAGThB,EAAeY,aAAe,CAC5BR,QAAQ,EACRK,WAAW,EACXJ,SAAS,GAGIhB,oBACbW,mCCrDWsB,EAAa,CACxBC,KAAM,aACNlD,aAAc,qBACdmB,WAAY,mBAEZgC,SAAU,kBACVC,iBAAkB,2BAClBC,gBAAiB,0BAEjBC,kBAAmB,sBACnBC,mBAAoB,6BAEpBC,kBAAmB,sBAEnB/B,YAAa,qBChBMgC,GDmBaC,EAAA,GAAAC,OAAAC,EAAA,EAAAD,CAAAD,EAC/B/E,EAAakF,OAAS,IADSF,OAAAC,EAAA,EAAAD,CAAAD,EAE/B/E,EAAamF,QAAU,mLClBtBC,QAAQC,IAAR,SAAAC,OAAqBnF,KAAKoF,MAAMC,IAAhC,MACArF,KAAKsF,KAAKF,MAAMG,yCAIhBN,QAAQC,IAAR,YAAAC,OAAwBnF,KAAKoF,MAAMC,IAAnC,uCAIAJ,QAAQC,IAAR,WAAAC,OAAuBnF,KAAKoF,MAAMC,IAAlC,qCAIYG,EAAcC,GAC1BR,QAAQC,IAAR,WAAAC,OAAuBnF,KAAKoF,MAAMC,IAAlC,aAjBmCK,OAAOC,QCIzBC,cAEnB,SAAAA,IAAe,OAAAf,OAAAgB,EAAA,EAAAhB,CAAA7E,KAAA4F,GAAAf,OAAAiB,EAAA,EAAAjB,CAAA7E,KAAA6E,OAAAkB,EAAA,EAAAlB,CAAAe,GAAAI,KAAAhG,KACP,CACJqF,IAAKlB,EAAWC,8EAKlB6B,GAAYC,0BATuBvB,GCDlBwB,cAEnB,SAAAA,IAAe,OAAAtB,OAAAgB,EAAA,EAAAhB,CAAA7E,KAAAmG,GAAAtB,OAAAiB,EAAA,EAAAjB,CAAA7E,KAAA6E,OAAAkB,EAAA,EAAAlB,CAAAsB,GAAAH,KAAAhG,KACP,CACJqF,IAAKlB,EAAWjD,2CAJyByD,GCA1ByB,cAEnB,SAAAA,IAAe,OAAAvB,OAAAgB,EAAA,EAAAhB,CAAA7E,KAAAoG,GAAAvB,OAAAiB,EAAA,EAAAjB,CAAA7E,KAAA6E,OAAAkB,EAAA,EAAAlB,CAAAuB,GAAAJ,KAAAhG,KACP,CACJqF,IAAKlB,EAAW9B,oFAKlB,IAAMgE,EAAWrG,KAAKsG,IAAID,WAC1BA,EAASE,UAAU,SAAU,GAC7BF,EAASG,SAAS,IAAI,IAAI,IAAI,KAC9BH,EAASG,SAAS,IAAI,IAAI,IAAI,KAC9BxG,KAAKsG,IAAIG,KAAK,IAAI,IAAIzG,KAAKoF,MAAMC,oCAGrBG,EAAcC,WAhBed,uBCHhC+B,GAAb,SAAAC,GACE,SAAAD,EAAYE,GAAa,IAAArG,EACQsG,GADRhC,OAAAgB,EAAA,EAAAhB,CAAA7E,KAAA0G,GACnBE,GAASA,EAAME,OAAS,GAC1BvG,EAAAsE,OAAAiB,EAAA,EAAAjB,CAAA7E,MAAA6G,EAAAhC,OAAAkB,EAAA,EAAAlB,CAAA6B,IAAAV,KAAAe,MAAAF,EAAA,CAAA7G,MAAAmF,OAAAN,OAAAmC,GAAA,EAAAnC,CAAS+B,MAETrG,EAAAsE,OAAAiB,EAAA,EAAAjB,CAAA7E,KAAA6E,OAAAkB,EAAA,EAAAlB,CAAA6B,GAAAV,KAAAhG,KAAM,IAJe,OAAA6E,OAAAiB,EAAA,EAAAjB,CAAAtE,GAD3B,OAAAsE,OAAAoC,EAAA,EAAApC,CAAA6B,EAAAC,GAAA9B,OAAAqC,EAAA,EAAArC,CAAA6B,EAAA,EAAArB,IAAA,SAAA8B,MAAA,WAUI,OAAOnH,KAAKoH,KAAKC,MAAMD,KAAKE,SAAWtH,KAAK8G,WAVhD,CAAAzB,IAAA,MAAA8B,MAAA,SAaaI,GACT,YAAqD/D,IAA9CxD,KAAKwH,KAAK,SAAAC,GAAI,OAAIA,IAASF,MAdtC,CAAAlC,IAAA,QAAA8B,MAAA,WAkBInH,KAAK8G,OAAS,IAlBlB,CAAAzB,IAAA,QAAA8B,MAAA,WAsBI,OAAOnH,KAAK,KAtBhB,CAAAqF,IAAA,OAAA8B,MAAA,WA0BI,OAAOnH,KAAKA,KAAK8G,OAAS,OA1B9BJ,EAAA,CAAA7B,OAAA6C,GAAA,EAAA7C,CAA6B8C,QCEhBC,GAAc,SAACC,EAAaC,GACvC,OAAOV,KAAKE,UAAYQ,EAAMD,GAAOA,GCClBE,eAEnB,SAAAA,EAAYC,GAA2B,IAAAzH,EAAA,OAAAsE,OAAAgB,EAAA,EAAAhB,CAAA7E,KAAA+H,IACrCxH,EAAAsE,OAAAiB,EAAA,EAAAjB,CAAA7E,KAAA6E,OAAAkB,EAAA,EAAAlB,CAAAkD,GAAA/B,KAAAhG,KAAMgI,EAAO5C,MAAO4C,EAAO7E,EAAG6E,EAAO5E,EAAG4E,EAAOC,QAASD,EAAOE,SAE1DC,UAAU,EAAG,GAHmB5H,6BAFAmF,OAAO0C,YAAYC,QCMvCC,eAMnB,SAAAA,IAAc,IAAA/H,EAAA,OAAAsE,OAAAgB,EAAA,EAAAhB,CAAA7E,KAAAsI,IACZ/H,EAAAsE,OAAAiB,EAAA,EAAAjB,CAAA7E,KAAA6E,OAAAkB,EAAA,EAAAlB,CAAAyD,GAAAtC,KAAAhG,KAAM,CACJqF,IAAKlB,EAAWE,aANbkE,MAAwC,IAAI7B,GAIrCnG,EAFPiI,QAAkB,EAEXjI,yEAOZP,KAAKyI,KAAKC,KACR,UACA,sCACA,WAGF1I,KAAKyI,KAAKE,MAAM,QAAS,uCACzB3I,KAAKyI,KAAKE,MAAM,SAAU,uEAM1B,IAHoB,IAAAlI,EAAAT,KACd4I,EAAiB,IAAIlC,GAAa,CAAC,OAAQ,OAAQ,OAAQ,SAAU,SAAU,WAE5EmC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CA4B3BC,WA3BqB,WAEnB,IAAMC,EAAYtI,EAAK6F,IAAIyC,UAAUnB,GAAY,EAAGoB,OAAOzH,YAAaqG,GAAY,EAAGoB,OAAOC,cAAcC,SAAS,GAAK,IACpHC,EAAQ1I,EAAK6F,IAAI8C,OAAO,EAAG,EAAG,SAASjB,UAAU,EAAG,GAEpDiB,EAAS,IAAIrB,GAAY,CAC7B3C,MAAO3E,EACP0C,EAAG,EACHC,EAAG,EACH6E,QAASW,EAAetB,WAG1ByB,EAAUzC,IAAI8C,GACdL,EAAUzC,IAAI6C,GAEVJ,EAAU5F,EAAK6F,OAAOzH,WAAa6H,EAAOC,MAAMpI,EAAUO,kBAC5DuH,EAAU5F,EAAI4F,EAAU5F,EAAIiG,EAAOC,MAAMpI,EAAUO,iBAGjDuH,EAAU3F,EAAK4F,OAAOC,YAAcG,EAAOE,OAAOrI,EAAUO,kBAC9DuH,EAAU3F,EAAI2F,EAAU3F,EAAIgG,EAAOE,OAAOrI,EAAUO,iBAGtDf,EAAK8H,MAAM3E,KAAKmF,IAIW,IAAJF,mCAIfrD,EAAcC,WA1Dad,GCPtB4E,eAEnB,SAAAA,IAAe,OAAA1E,OAAAgB,EAAA,EAAAhB,CAAA7E,KAAAuJ,GAAA1E,OAAAiB,EAAA,EAAAjB,CAAA7E,KAAA6E,OAAAkB,EAAA,EAAAlB,CAAA0E,GAAAvD,KAAAhG,KACP,CACJqF,IAAKlB,EAAWG,+CAJ6BK,GCA9B6E,eAEnB,SAAAA,IAAe,OAAA3E,OAAAgB,EAAA,EAAAhB,CAAA7E,KAAAwJ,GAAA3E,OAAAiB,EAAA,EAAAjB,CAAA7E,KAAA6E,OAAAkB,EAAA,EAAAlB,CAAA2E,GAAAxD,KAAAhG,KACP,CACJqF,IAAKlB,EAAWI,8CAJ4BI,GCA7B8E,eAEnB,SAAAA,IAAe,OAAA5E,OAAAgB,EAAA,EAAAhB,CAAA7E,KAAAyJ,GAAA5E,OAAAiB,EAAA,EAAAjB,CAAA7E,KAAA6E,OAAAkB,EAAA,EAAAlB,CAAA4E,GAAAzD,KAAAhG,KACP,CACJqF,IAAKlB,EAAWK,gDAJ8BG,GCA/B+E,eAEnB,SAAAA,IAAe,OAAA7E,OAAAgB,EAAA,EAAAhB,CAAA7E,KAAA0J,GAAA7E,OAAAiB,EAAA,EAAAjB,CAAA7E,KAAA6E,OAAAkB,EAAA,EAAAlB,CAAA6E,GAAA1D,KAAAhG,KACP,CACJqF,IAAKlB,EAAWM,iDAJ+BE,GCAhCD,eAEnB,SAAAA,IAAe,OAAAG,OAAAgB,EAAA,EAAAhB,CAAA7E,KAAA0E,GAAAG,OAAAiB,EAAA,EAAAjB,CAAA7E,KAAA6E,OAAAkB,EAAA,EAAAlB,CAAAH,GAAAsB,KAAAhG,KACP,CACJqF,IAAKlB,EAAWO,gDAJyBC,GCA1BgF,eAEnB,SAAAA,IAAe,OAAA9E,OAAAgB,EAAA,EAAAhB,CAAA7E,KAAA2J,GAAA9E,OAAAiB,EAAA,EAAAjB,CAAA7E,KAAA6E,OAAAkB,EAAA,EAAAlB,CAAA8E,GAAA3D,KAAAhG,KACP,CACJqF,IAAKlB,EAAWxB,0CAJwBgC,GCQjCiF,GAAyB,CACpCC,WAAW,EACXC,gBAAiB,UACjBC,MAAO,CACLC,SAAS,EACTC,UAAU,EACVC,OAAO,EACPC,OAAO,GAETC,QAAS,CACPC,OAAQ,CACN7J,OAAO,EACP8J,QAAS,CAAClH,EAAG,MAEfmH,QAAS,UAEXxH,MAAO,yBACPyH,QAAS,MACTnB,MAAOL,OAAOzH,WACd+H,OAAQN,OAAOC,YACfwB,KAAM,EACNC,OAAQ,OACRtF,MAAO,CACLQ,EACAO,EACAC,EAEAkC,GACAiB,GACAC,GAEAC,GACAC,GAEAhF,GACAiF,IAEFgB,KAAMjF,OAAOkF,KACbC,UAAU,GChBG5E,GADK,qDAzBXX,KAAoB,IAAII,OAAOoF,KAAKlB,SAEpC1D,iBAAmB,WACxB3F,EAAK+E,KAAKF,MAAM2F,MAAM5G,EAAWjD,cACjCD,EAAU+J,YAAYlL,EAAUoB,oBAG3B+J,eAAiB,WACtB1K,EAAK+E,KAAKF,MAAM8F,OAAO/G,EAAWE,UAClC9D,EAAK+E,KAAKF,MAAM2F,MAAM5G,EAAW9B,YACjCpB,EAAU+J,YAAYlL,EAAUuC,kBAG3B8I,aAAe,SAACC,GACrB7K,EAAK+E,KAAKF,MAAM2F,MAAMK,GACtBnK,EAAU+J,YAAYlL,EAAUyC,gBAG3B8I,gBAAkB,WACvB9K,EAAK+E,KAAKF,MAAM2F,MAAM5G,EAAWxB,aACjC1B,EAAU+J,YAAYlL,EAAU6C,eC4BrBT,eA9C+B,WAAM,IAC3Cb,EAAsBJ,EAAtBI,MAAO2J,EAAe/J,EAAf+J,YACRM,EAAkBzG,OAAO0G,KAAKzL,GAAW0L,IAAI,SAAAC,GAAS,OAAI3L,EAAU2L,KAEpEC,EAAoB,SAACC,GACzB,OAAQA,EAAEC,OAAOzE,OACf,KAAKrH,EAAUoB,aACb+E,GAAYC,mBACZ,MACF,KAAKpG,EAAUuC,WACb4D,GAAYgF,iBACZ,MACF,KAAKnL,EAAU6C,YACbsD,GAAYoF,kBACZ,MACF,KAAKvL,EAAUyC,SACb0D,GAAYkF,aAAahH,EAAWE,UACpC,MACF,QACE2G,EAAYW,EAAEC,OAAOzE,SAI3B,OACE0E,EAAA,cAAAA,EAAA,cACEA,EAAA,cAACC,EAAD,CAAgB3I,EAAG,GAAIC,EAAG,GAAIL,MAAM,cACjCuI,EAAgBE,IAAI,SAAAO,GACnB,OACEF,EAAA,uBAAOxG,IAAK0G,EAAgBlK,UAAU,yBACpCgK,EAAA,uBAAOG,GAAID,EACJlK,UAAU,QACV8I,KAAK,QACLsB,KAAK,eACL9E,MAAO4E,EACPG,QAASH,IAAmB1K,EAC5B8K,SAAUT,IACjBG,EAAA,0BAAOE,UCrCfK,GAAsC,SAACtJ,GAAU,IAC7CuJ,EAAYvJ,EAAZuJ,QAER,OACER,EAAA,qBAAK9H,MAAO,CAACuI,QAASD,EAAU,QAAU,QAASxK,UAAU,sBAC3DgK,EAAA,2CACAA,EAAA,cAACU,GAAD,QAKNH,GAAU3I,aAAe,CACvB4I,SAAS,GAGID,8BCRTI,GAAgF,SAAC1J,GAAU,IACxF2J,EAAqE3J,EAArE2J,QAASzJ,EAA4DF,EAA5DE,SAAUnB,EAAkDiB,EAAlDjB,UAAWd,EAAuC+B,EAAvC/B,WAAYoC,EAA2BL,EAA3BK,EAAGC,EAAwBN,EAAxBM,EAAGC,EAAqBP,EAArBO,OAAQC,EAAaR,EAAbQ,UACzDI,EAAa,CAAC,eAAgB,4BAC7BzD,EAASF,EAATE,MAEH4B,GACF6B,EAAWE,KAAXmD,MAAArD,EAAUmB,OAAAmC,GAAA,EAAAnC,CAAShD,EAAU6K,MAAM,OAGrC,IAAM/I,EAAa7C,EAAcC,GAC7B4C,GACFD,EAAWE,KAAKD,GAGlB,IAAMgJ,EAAS3J,EACO,oBAAbA,EACJA,EAAyB/C,GAC1B+C,EACF,KAEI4J,EAASlL,EAAAC,EAAAC,cAAA,SAAAiD,OAAAgI,OAAA,GACRJ,EAAU,CAACA,WAAW,GADd,CAEb1I,MAAKc,OAAAiI,GAAA,EAAAjI,CAAA,CAAGb,KAAMb,EAAGc,IAAKb,EAAGC,UAAYF,GAAKC,EAAI,CAAC2J,SAAU,YAAc,IACvElL,UAAW6B,EAAWI,KAAK,OAC1B6I,GAGH,YAAkBnJ,IAAdF,GAA2BA,EAE3B5B,EAAAC,EAAAC,cAACsC,EAAAvC,EAAD,KACGiL,GAKAA,GAGTJ,GAAY/I,aAAe,CACzBH,WAAW,GAGEpB,mBACbsK,IC3BatK,eAtBkC,WAAM,I7BgBtB8K,E6BfxBxM,EAA+BT,EAA/BS,MAAOyM,EAAwBlN,EAAxBkN,UAAWC,EAAanN,EAAbmN,UAczB,O7BC+BF,E6Bbd,SAAArB,GACf,OAAQA,EAAEtG,KACR,KAAK8H,OAAIC,OACPF,IACA,MACF,IAAK,IACL,IAAK,IACHD,M7BONI,oBAAU,WAGR,OAFArE,OAAOsE,iBAAiB,UAAWN,GAE5B,WACLhE,OAAOuE,oBAAoB,UAAWP,KAEvC,I6BPDnB,EAAA,cAAC2B,GAAD,CAAaf,QAASjM,EAAQ0M,EAAYD,EAAWlM,WAAYnB,EAAeQ,OAC7EI,EAAQqL,EAAA,mBAAGhK,UAAU,eAAiBgK,EAAA,mBAAGhK,UAAU,kBCV3CK,eAVuC,WAAM,IAClDuL,EAAgC1N,EAAhC0N,YAAaC,EAAmB3N,EAAnB2N,eAErB,OACE7B,EAAA,cAAC2B,GAAD,CAAaf,QAASgB,GACnBC,EAAe,MCCPC,GAPoC,kBACjD9B,EAAA,qBAAKhK,UAAU,8BACbgK,EAAA,cAAC+B,GAAD,MACA/B,EAAA,cAACgC,GAAD,QCuBW3L,eApBiB,WAAM,IAAA4L,EhCPb,WAAwC,IAAAC,EACvCC,mBAAS,CAC/B3E,MAAOL,OAAOzH,WACd+H,OAAQN,OAAOC,cAH8CgF,EAAApJ,OAAAqJ,EAAA,EAAArJ,CAAAkJ,EAAA,GACxDI,EADwDF,EAAA,GAClDG,EADkDH,EAAA,GAkB/D,OAZAZ,oBAAU,WACR,IAAML,EAAW,kBAAMoB,EAAQ,CAC7B/E,MAAOL,OAAOzH,WACd+H,OAAQN,OAAOC,eAIjB,OAFAD,OAAOsE,iBAAiB,SAAUN,GAE3B,WACLhE,OAAOuE,oBAAoB,SAAUP,KAEtC,CAAChE,OAAOzH,WAAYyH,OAAOC,cAEvBkF,EgCVmBE,GAAlBhF,EAD4ByE,EAC5BzE,MAAOC,EADqBwE,EACrBxE,OACP9I,EAAUT,EAAVS,MASR,OAPIyF,GAAYX,KAAKgJ,SACnBrI,GAAYX,KAAKgJ,OAAOjF,MAAQA,EAChCpD,GAAYX,KAAKgJ,OAAOhF,OAASA,EACjCrD,GAAYX,KAAKgJ,OAAOvK,MAAMsF,MAA9B,GAAAlE,OAAyCkE,EAAzC,MACApD,GAAYX,KAAKgJ,OAAOvK,MAAMuF,OAA9B,GAAAnE,OAA0CmE,EAA1C,OAIAuC,EAAA,qBAAKG,GAAG,OAAOnK,UAAU,QACvBgK,EAAA,cAAC0C,GAAD,MACA1C,EAAA,cAAC2C,GAAD,CAAWnC,QAAS7L,IACpBqL,EAAA,cAAC4C,EAAD,SCbSC,GATgB,WAE7B,OACE7C,EAAA,qBAAKhK,UAAU,OACbgK,EAAA,cAAC8C,GAAD,QCGAC,YAAcC,QACW,cAA7B7F,OAAO8F,SAASC,UAEa,UAA7B/F,OAAO8F,SAASC,UAEhB/F,OAAO8F,SAASC,SAASC,MACvB,4DAyCJ,SAASC,GAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WAClCD,IACFA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBpO,QACf8N,UAAUC,cAAcQ,WAK1B3K,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAOvB2K,MAAM,SAAAC,GACL7K,QAAQ6K,MAAM,4CAA6CA,mBCrFjEC,EAAAC,EAAAC,EAAA,4BAAAC,KAQO,IAAMA,GAAU,IAAIC,gBAE3BC,SACEvE,EAAA,cAACwE,GAAD,MACAC,SAASC,eAAe,SDSX,WACb,GAA6C,kBAAmBpB,UAAW,CAMzE,GAJkB,IAAIqB,IACpBC,wBACAzH,OAAO8F,SAAS4B,YAEJC,SAAW3H,OAAO8F,SAAS6B,OAIvC,OAGF3H,OAAOsE,iBAAiB,OAAQ,WAC9B,IAAM4B,EAAK,GAAA/J,OAAMsL,wBAAN,sBAEP7B,IAmDV,SAAiCM,GAE/B0B,MAAM1B,GACHI,KAAK,SAAAuB,GAGkB,MAApBA,EAASC,SACwD,IAAjED,EAASE,QAAQC,IAAI,gBAAiBC,QAAQ,cAG9C9B,UAAUC,cAAc8B,MAAM5B,KAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,KAAK,WAC7BtG,OAAO8F,SAASsC,aAKpBnC,GAAgBC,KAGnBW,MAAM,WACL5K,QAAQC,IACN,mEAvEAmM,CAAwBnC,GAIxBC,UAAUC,cAAc8B,MAAM5B,KAAK,WACjCrK,QAAQC,IACN,+GAMJ+J,GAAgBC,MCtCxBoC","file":"static/js/main.100a9184.chunk.js","sourcesContent":["export interface GameSettings {\n  volume: number\n}\n\nexport interface ForceThemeProps {\n  forceTheme?: GameDebugTheme\n}\n\nexport interface PositionneableProps {\n  x?: number,\n  y?: number,\n  zIndex?: number,\n  draggable?: boolean,\n}\n\nexport interface SpriteConstructor {\n  scene: Phaser.Scene,\n  x: number,\n  y: number,\n  texture: string,\n  frame?: string | integer\n}\n\nexport interface ContainerConstructor {\n  scene: Phaser.Scene,\n  x: number,\n  y: number,\n  children: any\n}\n\nexport enum GameDebugTheme {\n  Light = \"LIGHT\",\n  Dark = \"DARK\"\n}\n","export enum GameCategory {\n  Action = 'ACTION',\n  Waiting = 'WAITING'\n}\n\nexport enum GameState {\n  Splashscreen = 'SPLASHSCREEN',\n  Homescreen = 'HOMESCREEN',\n  Minigame = 'MINIGAME',\n  PostMinigame = 'POSTMINIGAME',\n  Deathscreen = 'DEATHSCREEN'\n}\n","import {action, computed, observable} from \"mobx\";\nimport {GameDebugTheme} from \"../utils/interfaces\";\n\nclass GameDebugStore {\n\n  @observable public debug: boolean = false\n  @observable public theme: GameDebugTheme = GameDebugTheme.Dark\n\n  @action public showDebug = (): void => {\n    this.debug = true\n  }\n\n  @action public hideDebug = (): void => {\n    this.debug = false\n  }\n\n  @action public setTheme = (newTheme: GameDebugTheme): void => {\n    this.theme = newTheme\n  }\n\n  @action public toggleTheme = (): void => {\n    this.theme = this.theme === GameDebugTheme.Dark ?\n      GameDebugTheme.Light :\n      GameDebugTheme.Dark\n  }\n\n  @computed get isDarkTheme(): boolean {\n    return this.theme === GameDebugTheme.Dark\n  }\n\n  @computed get shortThemeName(): string {\n    return this.theme[0].toUpperCase()\n  }\n\n  @computed get otherThemeName(): string {\n    return this.theme === GameDebugTheme.Dark ?\n      GameDebugTheme.Light :\n      GameDebugTheme.Dark\n  }\n\n}\n\nconst gameDebugStore = new GameDebugStore()\nexport default gameDebugStore\n","import {useEffect, useState} from 'react'\nimport {GameDebugTheme} from \"./interfaces\";\nimport gameDebugStore from \"../store/GameDebugStore\";\n\nexport const useResize = (): {width: number, height: number} =>  {\n  const [size, setSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  })\n\n  useEffect(() => {\n    const listener = () => setSize({\n      width: window.innerWidth,\n      height: window.innerHeight\n    })\n    window.addEventListener('resize', listener)\n\n    return () => {\n      window.removeEventListener('resize', listener)\n    }\n  }, [window.innerWidth, window.innerHeight])\n\n  return size\n}\n\nexport const useKeyboardInput = (listener: (e: KeyboardEvent) => void) => {\n  useEffect(() => {\n    window.addEventListener('keydown', listener)\n\n    return () => {\n      window.removeEventListener('keydown', listener)\n    }\n  }, [])\n\n}\n\nexport const useClassTheme = (forceTheme?: GameDebugTheme): string | null => {\n  const { isDarkTheme } = gameDebugStore\n\n  if(!forceTheme && isDarkTheme) {\n    return 'is-dark'\n  }\n\n  if (!isDarkTheme && forceTheme && forceTheme === GameDebugTheme.Dark) {\n    return 'is-dark'\n  } else if (isDarkTheme && forceTheme && forceTheme === GameDebugTheme.Dark) {\n    return 'is-dark'\n  } else if (forceTheme && forceTheme === GameDebugTheme.Light) {\n    return null\n  }\n\n  return null\n}\n","import {action, observable} from \"mobx\";\nimport {GameState} from \"../utils/enums\";\nimport {GameSettings} from \"../utils/interfaces\";\n\nclass GameStore {\n\n  @observable public state: GameState = GameState.Splashscreen\n  @observable public difficulity: number = 1\n  @observable public settings: GameSettings = {volume: 1}\n  @observable public ratioResolution: number = 2\n\n  @action public changeState = (newState: GameState): void => {\n    this.state = newState\n  }\n\n  @action public increaseDifficulty = (): void => {\n    this.difficulity++\n  }\n\n  @action public changeRatioResolution = (innerWidth: number): void => {\n    this.ratioResolution = 2\n  }\n\n}\n\nconst gameStore = new GameStore()\nexport default gameStore\n","import React, {FunctionComponent} from 'react'\n\nconst HomescreenUI: FunctionComponent = () => {\n  return (\n    <div className=\"homescreen-ui\">\n      <h1>Je suis l'ui du homescreen</h1>\n    </div>\n  )\n}\n\nexport default HomescreenUI\n","import React, {FunctionComponent} from 'react'\n\nconst SplashscreenUI: FunctionComponent = () => {\n  return (\n    <div className=\"splashscreen-ui\">\n      <h1>Je suis l'ui du splashscreen</h1>\n    </div>\n  )\n}\n\nexport default SplashscreenUI\n","import React, {FunctionComponent} from 'react'\n\nconst MinigameUI: FunctionComponent = () => {\n  return (\n    <div className=\"minigame-ui\">\n      <h1>Je suis l'ui du mini jeu</h1>\n    </div>\n  )\n}\n\nexport default MinigameUI\n","import React, {FunctionComponent} from 'react'\n\nconst PostMinigameUI: FunctionComponent = () => {\n  return (\n    <div className=\"post-minigame-ui\">\n      <h1>Je suis l'ui du postmini game</h1>\n    </div>\n  )\n}\n\nexport default PostMinigameUI\n","import React, {FunctionComponent} from 'react'\n\nconst DeathscreenUI: FunctionComponent = () => {\n  return (\n    <div className=\"deathscreen-ui\">\n      <h1>Je suis l'ui du deathscreen</h1>\n    </div>\n  )\n}\n\nexport default DeathscreenUI\n","import React, {FunctionComponent} from 'react'\nimport {observer} from \"mobx-react-lite\";\nimport gameStore from \"../../store/GameStore\";\nimport {GameState} from \"../../utils/enums\";\nimport HomescreenUI from \"./HomescreenUI\";\nimport SplashscreenUI from \"./SplashscreenUI\";\nimport MinigameUI from \"./MinigameUI\";\nimport PostMinigameUI from \"./PostMinigameUI\";\nimport DeathscreenUI from \"./DeathscreenUI\";\n\nconst GameUI: FunctionComponent = () => {\n  const {state} = gameStore\n\n  let UIComponent = <SplashscreenUI/>\n\n  switch (state) {\n    case GameState.Splashscreen:\n      UIComponent = <SplashscreenUI/>\n      break;\n    case GameState.Homescreen:\n      UIComponent = <HomescreenUI/>\n      break;\n    case GameState.Minigame:\n      UIComponent = <MinigameUI/>\n      break;\n    case GameState.PostMinigame:\n      UIComponent = <PostMinigameUI/>\n      break;\n    case GameState.Deathscreen:\n      UIComponent = <DeathscreenUI/>\n      break;\n  }\n\n  return (\n    <div className=\"game-ui\">\n      {UIComponent}\n    </div>\n  )\n}\n\nexport default observer(\n  GameUI\n)\n","import React, {FunctionComponent, ReactNode} from 'react'\nimport Draggable from 'react-draggable';\nimport {observer} from \"mobx-react-lite\";\nimport {ForceThemeProps, PositionneableProps} from \"../../../utils/interfaces\";\nimport {useClassTheme} from \"../../../utils/hooks\";\n\ninterface Props {\n  children?: ReactNode | string,\n  center?: boolean,\n  rounded?: boolean,\n  title?: string,\n}\n\nconst DebugContainer: FunctionComponent<Props & ForceThemeProps & PositionneableProps> = (props) => {\n  const {title, children, center, rounded, forceTheme, x, y, zIndex, draggable} = props\n  const isDraggable = draggable !== undefined ? draggable : DebugContainer.defaultProps!.draggable\n  const classNames = ['game-state-list', 'container']\n  const themeClass = useClassTheme(forceTheme)\n  if (themeClass) {\n    classNames.push(themeClass)\n  }\n\n  if (title && title !== \"\") {\n    classNames.push('with-title')\n  }\n  if (center) {\n    classNames.push('is-center')\n  }\n  if (rounded) {\n    classNames.push('is-rounded')\n  }\n\n  const section = <section className={classNames.join(' ')} style={{left: x, top: y, zIndex}}>\n    {title && title !== \"\" && <h2 className=\"title\">{title}</h2>}\n    {children}\n  </section>\n\n  if (isDraggable) {\n    return (\n      <Draggable>\n        {section}\n      </Draggable>\n    )\n  }\n\n  return section\n}\n\nDebugContainer.defaultProps = {\n  center: false,\n  draggable: true,\n  rounded: false\n}\n\nexport default observer(\n  DebugContainer\n)\n","import {GameCategory} from \"./enums\";\n\nexport const scenesKeys = {\n  Boot: 'BOOT_SCENE',\n  Splashscreen: 'SPLASHSCREEN_SCENE',\n  Homescreen: 'HOMESCREEN_SCENE',\n\n  SpamGame: 'SPAM_GAME_SCENE',\n  ActionSecondGame: 'ACTION_SECOND_GAME_SCENE',\n  ActionThirdGame: 'ACTION_THIRD_GAME_SCENE',\n\n  ElevatorFirstGame: 'ELEVATOR_FIRST_GAME',\n  ElevatorSecondGame: 'ELEVATOR_SECOND_GAME_SCENE',\n\n  PostMinigameScene: 'POST_MINIGAME_SCENE',\n\n  Deathscreen: 'DEATHSCREEN_SCENE'\n}\n\nexport const categoriesProbability = {\n  [GameCategory.Action]: 0.9,\n  [GameCategory.Waiting]: 0.1,\n}\n","export default class BaseScene extends Phaser.Scene {\n\n  public init(): void {\n    console.log(`init (${this.scene.key})`)\n    this.game.scene.dump()\n  }\n\n  public preload(): void {\n    console.log(`preload (${this.scene.key})`)\n  }\n\n  public create(): void {\n    console.log(`create (${this.scene.key})`)\n  }\n\n\n  public update(time: number, delta: number): void {\n    console.log(`update (${this.scene.key})`)\n  }\n\n}\n","import {scenesKeys} from \"../../utils/constants\";\nimport gameManager from \"../manager/GameManager\";\nimport BaseScene from \"./BaseScene\";\n\nexport default class BootScene extends BaseScene {\n\n  constructor() {\n    super({\n      key: scenesKeys.Boot\n    });\n  }\n\n  public create(): void {\n    gameManager.loadSplashscreen()\n  }\n\n}\n","import {scenesKeys} from \"../../utils/constants\";\nimport BaseScene from \"./BaseScene\";\n\nexport default class SplashscreenScene extends BaseScene {\n\n  constructor() {\n    super({\n      key: scenesKeys.Splashscreen\n    });\n  }\n\n}\n","import {scenesKeys} from \"../../utils/constants\";\nimport BaseScene from \"./BaseScene\";\n\nexport default class HomescreenScene extends BaseScene {\n\n  constructor() {\n    super({\n      key: scenesKeys.Homescreen\n    });\n  }\n\n  public create(): void {\n    const graphics = this.add.graphics()\n    graphics.fillStyle(0xff9933, 1)\n    graphics.fillRect(100,200,600,300)\n    graphics.fillRect(200,100,100,100)\n    this.add.text(220,110,this.scene.key)\n  }\n\n  public update(time: number, delta: number): void {\n  }\n\n\n}\n","export class List<T> extends Array<T> {\n  constructor(items?: T[]) {\n    if (items && items.length > 0) {\n      super(...items)\n    } else {\n      super(0)\n    }\n  }\n  \n  public random(): T {\n    return this[Math.floor(Math.random() * this.length)]\n  }\n\n  public has(searchedValue: T): boolean {\n    return this.find(item => item === searchedValue) !== undefined\n  }\n\n  public clear(): void {\n    this.length = 0\n  }\n\n  public first(): T {\n    return this[0]\n  }\n\n  public last(): T {\n    return this[this.length - 1]\n  }\n}\n","export const wait = (ms: number): Promise<TimerHandler> => new Promise(resolve => setTimeout(resolve, ms))\n\nexport const randomRange = (min: number, max: number): number => {\n  return Math.random() * (max - min) + min;\n}\n","import {SpriteConstructor} from \"../../utils/interfaces\";\nimport gameStore from '../../store/GameStore';\nimport { useKeyboardInput } from '../../utils/hooks';\n\nexport default class SpamContent extends Phaser.GameObjects.Sprite {\n\n  constructor(params: SpriteConstructor) {\n    super(params.scene, params.x, params.y, params.texture, params.frame);\n\n    this.setOrigin(0, 0);  \n  }\n\n}\n","import { scenesKeys } from \"../../../utils/constants\";\nimport BaseScene from \"../BaseScene\";\nimport Spam from \"../../objects/Spam\";\nimport { List } from \"../../../utils/extensions\";\nimport { randomRange } from \"../../../utils/functions\";\nimport gameStore from '../../../store/GameStore';\nimport { useKeyboardInput } from \"../../../utils/hooks\";\nimport { Key } from 'ts-key-enum';\nimport SpamContent from '../../objects/SpamContent';\n\nexport default class SpamGameScene extends BaseScene {\n\n  public spams: Phaser.GameObjects.Container[] = new List<Phaser.GameObjects.Container>()\n  public spam?: Spam\n  public counter: number = 0\n\n  constructor() {\n    super({\n      key: scenesKeys.SpamGame\n    });\n  }\n\n  public preload(): void {\n    this.load.pack(\n      'preload',\n      '/assets/sprites/spam-game/pack.json',\n      'preload'\n    )\n\n    this.load.image('close', '/assets/sprites/spam-game/CLOSE.png')\n    this.load.image('sprite', '/assets/sprites/spam-game/sp_1.png')\n  }\n\n  public create(): void {\n    const availablesSpam = new List<string>([\"sp_1\", \"sp_2\", \"sp_3\", \"sp_4_1\", \"sp_5_1\", \"sp_6_1\"])\n    \n    for (let i = 0; i < 10; i++) {\n      const handleTimout = () => {\n\n        const container = this.add.container(randomRange(0, window.innerWidth), randomRange(0, window.innerHeight)).setScale(0.5, 0.5)\n        const close = this.add.sprite(0, 0, 'close').setOrigin(0, 0)\n\n        const sprite = new SpamContent({\n          scene: this,\n          x: 0,\n          y: 0,\n          texture: availablesSpam.random()\n        })\n\n        container.add(sprite)\n        container.add(close)\n\n        if (container.x > (window.innerWidth - sprite.width/gameStore.ratioResolution)) {\n          container.x = container.x - sprite.width/gameStore.ratioResolution\n        }\n    \n        if (container.y > (window.innerHeight - sprite.height/gameStore.ratioResolution)) {\n          container.y = container.y - sprite.height/gameStore.ratioResolution\n        }\n        \n        this.spams.push(container)\n        \n      }\n\n      setTimeout(handleTimout, i * 500)\n    }\n  }\n\n  public update(time: number, delta: number): void {\n    // this.spams.forEach(spam => spam.update(time, delta))\n\n  }\n}\n","import {scenesKeys} from \"../../../utils/constants\";\nimport BaseScene from \"../BaseScene\";\n\nexport default class ActionSecondGameScene extends BaseScene {\n\n  constructor() {\n    super({\n      key: scenesKeys.ActionSecondGame\n    });\n  }\n\n}\n","import {scenesKeys} from \"../../../utils/constants\";\nimport BaseScene from \"../BaseScene\";\n\nexport default class ActionThirdGameScene extends BaseScene {\n\n  constructor() {\n    super({\n      key: scenesKeys.ActionThirdGame\n    });\n  }\n\n}\n","import {scenesKeys} from \"../../../utils/constants\";\nimport BaseScene from \"../BaseScene\";\n\nexport default class ElevatorFirstGameScene extends BaseScene {\n\n  constructor() {\n    super({\n      key: scenesKeys.ElevatorFirstGame\n    });\n  }\n\n}\n","import {scenesKeys} from \"../../../utils/constants\";\nimport BaseScene from \"../BaseScene\";\n\nexport default class ElevatorSecondGameScene extends BaseScene {\n\n  constructor() {\n    super({\n      key: scenesKeys.ElevatorSecondGame\n    });\n  }\n\n}\n","import {scenesKeys} from \"../../utils/constants\";\nimport BaseScene from \"./BaseScene\";\n\nexport default class PostMinigameScene extends BaseScene {\n\n  constructor() {\n    super({\n      key: scenesKeys.PostMinigameScene\n    });\n  }\n\n}\n","import {scenesKeys} from \"../../utils/constants\";\nimport BaseScene from \"./BaseScene\";\n\nexport default class DeathscreenScene extends BaseScene {\n\n  constructor() {\n    super({\n      key: scenesKeys.Deathscreen\n    });\n  }\n\n}\n","import {\n  SpamGameScene,\n  ActionSecondGameScene,\n  ActionThirdGameScene,\n  BootScene, DeathscreenScene,\n  ElevatorFirstGameScene,\n  ElevatorSecondGameScene,\n  HomescreenScene, PostMinigameScene,\n  SplashscreenScene,\n} from '../game/scenes'\n\nexport const gameConfig: GameConfig = {\n  antialias: false,\n  backgroundColor: \"#000000\",\n  input: {\n    gamepad: false,\n    keyboard: true,\n    mouse: false,\n    touch: true,\n  },\n  physics: {\n    arcade: {\n      debug: true,\n      gravity: {y: 300}\n    },\n    default: \"arcade\",\n  },\n  title: \"Harder, Faster, Looser\",\n  version: \"1.0\",\n  width: window.innerWidth,\n  height: window.innerHeight,\n  zoom: 3,\n  parent: \"game\",\n  scene: [\n    BootScene,\n    SplashscreenScene,\n    HomescreenScene,\n\n    SpamGameScene,\n    ActionSecondGameScene,\n    ActionThirdGameScene,\n\n    ElevatorFirstGameScene,\n    ElevatorSecondGameScene,\n\n    PostMinigameScene,\n    DeathscreenScene\n  ],\n  type: Phaser.AUTO,\n  pixelArt: true,\n}\n","import {gameConfig} from \"../../utils/game\";\nimport gameStore from \"../../store/GameStore\";\nimport {GameState} from \"../../utils/enums\";\nimport {scenesKeys} from \"../../utils/constants\";\n\nclass GameManager {\n\n  public game: Phaser.Game = new Phaser.Game(gameConfig)\n\n  public loadSplashscreen = (): void => {\n    this.game.scene.start(scenesKeys.Splashscreen)\n    gameStore.changeState(GameState.Splashscreen)\n  }\n\n  public loadHomescreen = (): void => {\n    this.game.scene.remove(scenesKeys.SpamGame)\n    this.game.scene.start(scenesKeys.Homescreen)\n    gameStore.changeState(GameState.Homescreen)\n  }\n\n  public loadMinigame = (minigameKey: string): void => {\n    this.game.scene.start(minigameKey)\n    gameStore.changeState(GameState.Minigame)\n  }\n\n  public loadDeathscreen = (): void => {\n    this.game.scene.start(scenesKeys.Deathscreen)\n    gameStore.changeState(GameState.Deathscreen)\n  }\n\n}\n\nconst gameManager = new GameManager()\nexport default gameManager\n","import * as React from 'react';\nimport {ChangeEvent, FunctionComponent} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport gameStore from \"../../../store/GameStore\";\nimport {GameState} from \"../../../utils/enums\";\nimport DebugContainer from \"./DebugContainer\";\nimport gameManager from \"../../../game/manager/GameManager\";\nimport {scenesKeys} from \"../../../utils/constants\";\n\nconst GameDebugStateList: FunctionComponent = () => {\n  const {state, changeState} = gameStore\n  const availableStates = Object.keys(GameState).map(gameState => GameState[gameState])\n\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    switch (e.target.value as GameState) {\n      case GameState.Splashscreen:\n        gameManager.loadSplashscreen()\n        break;\n      case GameState.Homescreen:\n        gameManager.loadHomescreen()\n        break;\n      case GameState.Deathscreen:\n        gameManager.loadDeathscreen()\n        break;\n      case GameState.Minigame:\n        gameManager.loadMinigame(scenesKeys.SpamGame)\n        break;\n      default:\n        changeState(e.target.value as GameState)\n    }\n  }\n\n  return (\n    <>\n      <DebugContainer x={10} y={10} title=\"Game state\">\n        {availableStates.map(availableState => {\n          return (\n            <label key={availableState} className=\"game-state-list--item\">\n              <input id={availableState}\n                     className=\"radio\"\n                     type=\"radio\"\n                     name=\"currentState\"\n                     value={availableState}\n                     checked={availableState === state}\n                     onChange={handleInputChange}/>\n              <span>{availableState}</span>\n            </label>\n          )\n        })}\n      </DebugContainer>\n    </>\n\n  )\n}\n\nexport default observer(\n  GameDebugStateList\n)\n\n\n","import * as React from 'react';\nimport GameDebugStateList from \"./ui/debug/GameDebugStateList\";\nimport {FunctionComponent} from \"react\";\n\ninterface Props {\n  visible?: boolean\n}\n\nconst GameDebug: FunctionComponent<Props> = (props) => {\n  const { visible } = props\n\n  return (\n    <div style={{display: visible ? 'block' : 'none'}} className=\"game-debug game-ui\">\n      <h1>Debug interface</h1>\n      <GameDebugStateList/>\n    </div>\n  )\n}\n\nGameDebug.defaultProps = {\n  visible: false\n}\n\nexport default GameDebug\n\n\n","import React, {FunctionComponent, MouseEventHandler, ReactNode} from 'react'\nimport {observer} from \"mobx-react-lite\";\nimport gameDebugStore from \"../../../store/GameDebugStore\";\nimport {ForceThemeProps, GameDebugTheme, PositionneableProps} from \"../../../utils/interfaces\";\nimport {useClassTheme} from \"../../../utils/hooks\";\nimport Draggable from \"react-draggable\";\n\ntype RenderProps = (theme: GameDebugTheme) => ReactNode;\n\ninterface Props {\n  children?: RenderProps | ReactNode | string,\n  className?: string\n  onClick?: MouseEventHandler<HTMLButtonElement>\n}\n\nconst DebugButton: FunctionComponent<Props & ForceThemeProps & PositionneableProps> = (props) => {\n  const {onClick, children, className, forceTheme, x, y, zIndex, draggable} = props\n  const classNames = ['debug-button', 'game-debug-toggle-button']\n  const {theme} = gameDebugStore\n\n  if (className) {\n    classNames.push(...className.split(' '))\n  }\n\n  const themeClass = useClassTheme(forceTheme)\n  if (themeClass) {\n    classNames.push(themeClass)\n  }\n\n  const render = children ?\n    typeof children === 'function' ?\n      (children as RenderProps)(theme) :\n      children :\n    null\n\n  const button = <button\n    {...(onClick ? {onClick} : {})}\n    style={{left: x, top: y, zIndex, ...(x || y ? {position: 'absolute'} : {})}}\n    className={classNames.join(' ')}>\n    {render}\n  </button>\n\n  if (draggable !== undefined && draggable) {\n    return (\n      <Draggable>\n        {button}\n      </Draggable>\n    )\n  }\n\n  return button\n}\n\nDebugButton.defaultProps = {\n  draggable: false\n}\n\nexport default observer(\n  DebugButton\n)\n","import * as React from 'react';\nimport {FunctionComponent} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport {useKeyboardInput} from \"../../../utils/hooks\";\nimport {Key} from \"ts-key-enum\";\nimport gameDebugStore from \"../../../store/GameDebugStore\";\nimport DebugButton from \"./DebugButton\";\nimport {GameDebugTheme} from \"../../../utils/interfaces\";\n\nconst GameDebugToggleButton: FunctionComponent = () => {\n  const {debug, showDebug, hideDebug} = gameDebugStore\n\n  useKeyboardInput(e => {\n    switch (e.key) {\n      case Key.Escape:\n        hideDebug();\n        break;\n      case \"D\":\n      case \"d\":\n        showDebug()\n        break;\n    }\n  })\n\n  return (\n    <DebugButton onClick={debug ? hideDebug : showDebug} forceTheme={GameDebugTheme.Light}>\n      {debug ? <i className=\"icon close\"/> : <i className=\"icon debug\"/> }\n    </DebugButton>\n  )\n}\n\nexport default observer(\n  GameDebugToggleButton\n)\n\n\n","import * as React from 'react';\nimport {FunctionComponent} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport gameDebugStore from \"../../../store/GameDebugStore\";\nimport DebugButton from \"./DebugButton\";\n\nconst GameDebugToggleThemeButton: FunctionComponent = () => {\n  const { toggleTheme, otherThemeName } = gameDebugStore\n\n  return (\n    <DebugButton onClick={toggleTheme}>\n      {otherThemeName[0]}\n    </DebugButton>\n  )\n}\n\nexport default observer(\n  GameDebugToggleThemeButton\n)\n\n\n","import * as React from 'react';\nimport {FunctionComponent} from 'react';\nimport GameDebugToggleButton from \"./GameDebugToggleButton\";\nimport GameDebugToggleThemeButton from \"./GameDebugToggleThemeButton\";\n\nconst GameDebugButtonsToolbar: FunctionComponent = () => (\n  <div className=\"game-debug-buttons-toolbar\">\n    <GameDebugToggleThemeButton/>\n    <GameDebugToggleButton/>\n  </div>\n)\n\nexport default GameDebugButtonsToolbar\n\n","import 'phaser'\nimport * as React from 'react';\nimport {useResize} from \"../utils/hooks\";\nimport GameUI from \"./ui/GameUI\";\nimport GameDebug from \"./GameDebug\";\nimport {FunctionComponent} from \"react\";\nimport {observer} from \"mobx-react-lite\";\nimport GameDebugButtonsToolbar from \"./ui/debug/GameDebugButtonsToolbar\";\nimport gameDebugStore from \"../store/GameDebugStore\";\nimport gameManager from \"../game/manager/GameManager\";\n\nconst Game: FunctionComponent = () => {\n  const { width, height } = useResize()\n  const { debug } = gameDebugStore\n\n  if (gameManager.game.canvas) {\n    gameManager.game.canvas.width = width\n    gameManager.game.canvas.height = height\n    gameManager.game.canvas.style.width = `${width}px`\n    gameManager.game.canvas.style.height = `${height}px`\n  }\n\n  return (\n    <div id=\"game\" className=\"game\">\n      <GameDebugButtonsToolbar/>\n      <GameDebug visible={debug}/>\n      <GameUI/>\n    </div>\n  )\n}\n\nexport default observer(\n  Game\n)\n\n\n","import * as React from 'react';\nimport {FunctionComponent} from 'react';\nimport Game from \"./components/Game\";\n\nconst App: FunctionComponent = () => {\n\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  )\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\nimport './assets/styles/app.scss';\nimport registerServiceWorker from './registerServiceWorker';\nimport './utils/extensions'\nimport {EventEmitter} from \"events\";\n\nexport const Emitter = new EventEmitter()\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}