{"version":3,"sources":["utils/enums.ts","store/GameDebugStore.ts","utils/hooks.ts","utils/constants.ts","game/manager/AnimationManager.ts","game/scenes/BaseScene.ts","game/scenes/BootScene.ts","game/scenes/SplashscreenScene.ts","game/scenes/HomescreenScene.ts","utils/functions.ts","game/objects/Spam.ts","utils/extensions.ts","game/scenes/MinigameScene.ts","game/scenes/action/SpamGameScene.ts","game/scenes/action/SandwichGameScene.ts","game/objects/password-game/KeyboardPasswordButton.ts","game/objects/password-game/KeyboardContainer.ts","game/objects/password-game/ComputerPasswordScreen.ts","game/scenes/action/PasswordGameScene.ts","game/scenes/PostMinigameScene.ts","game/scenes/DeathscreenScene.ts","utils/colors.ts","utils/game.ts","utils/anims.ts","game/manager/MinigameManager.ts","game/manager/AudioManager.ts","game/manager/GameManager.ts","store/GameStore.ts","components/ui/HomescreenUI.tsx","components/ui/SplashscreenUI.tsx","components/ui/games/RemainingTime.tsx","components/ui/games/MinigameToolbar.tsx","components/ui/MinigameUI.tsx","components/ui/Spritesheet.tsx","components/ui/post-minigame/LivesList.tsx","components/ui/PostMinigameUI.tsx","components/ui/DeathscreenUI.tsx","components/ui/Transition.tsx","components/ui/GameUI.tsx","components/ui/debug/DebugContainer.tsx","components/ui/debug/GameDebugMinigamePicker.tsx","components/ui/debug/GameDebugStateList.tsx","components/ui/Spacer.tsx","components/ui/ValidatableInput.tsx","components/ui/debug/GameDebugConfigPanel.tsx","components/GameDebug.tsx","components/ui/debug/DebugButton.tsx","components/ui/debug/GameDebugToggleButton.tsx","components/ui/debug/GameDebugToggleThemeButton.tsx","components/ui/icons/PauseIcon.tsx","components/ui/icons/PlayIcon.tsx","components/ui/debug/GameDebugTogglePauseButton.tsx","components/ui/debug/GameDebugButtonsToolbar.tsx","components/Game.tsx","App.tsx","registerServiceWorker.ts","index.tsx","assets/sprites/post-minigame/life_1_285_270.png","assets/sprites/post-minigame/life_2_285_270.png","assets/sprites/post-minigame/life_3_285_270.png","assets/images/icons/debug.png"],"names":["GameCategory","GameState","BaseEvents","GameEvents","GameDebugTheme","gameDebugStore","this","theme","Dark","toUpperCase","Light","observable","action","_this","debugToolbar","showDebug","_this2","hideDebug","_this3","debug","_this4","_this5","_this6","newTheme","_this7","_this8","computed","useKeyboardShortcuts","shortcuts","listener","e","forEach","shortcut","keys","some","key","toLowerCase","useEffect","window","addEventListener","removeEventListener","useClassTheme","forceTheme","isDarkTheme","minigameSuffix","scenesKeys","Boot","Splashscreen","Homescreen","SandwichGame","SpamGame","PasswordGame","PostMinigameScene","Deathscreen","categoriesProbability","_categoriesProbabilit","Object","defineProperty","Action","Waiting","AnimationHelper","scene","data","classCallCheck","animationData","createGameAnimations","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","anims","Symbol","iterator","next","done","value","frames","framesArray","typeOfGeneration","generateFrameNames","prefix","start","end","suffix","zeroPad","generateFrameNumbers","first","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","i","frame","duration","visible","push","err","return","create","defaultTextureKey","frameRate","skipMissedFrames","delay","repeat","repeatDelay","yoyo","showOnStart","hideOnComplete","BaseScene","console","log","concat","game","dump","Emitter","emit","SceneInit","load","on","animationHelper","cache","json","get","gameManager","changeBackgroundColor","gameStore","config","backgroundColor","SceneCreated","initListeners","time","delta","Phaser","Scene","BootScene","possibleConstructorReturn","getPrototypeOf","call","asyncToGenerator","regenerator_default","a","mark","_callee","initial","wrap","_context","prev","esm_get","prototype","assertThisInitialized","audio","playBg","fade","changeConfig","loadNextMinigame","stop","setBaseURL","process","pack","SplashscreenScene","graphics","add","fillStyle","fillRect","text","HomescreenScene","gameWait","clock","ms","Promise","resolve","addEvent","callback","randomRange","min","max","Math","random","promiseAnimation","animation","eventCallback","shuffle","length","j","floor","_ref2","gameBackgroundColorToCss","r","g","b","String","randomString","toString","substring","Spam","params","x","y","children","createSpamContent","spamTexture","sprite","setOrigin","spriteAnim","animationManager","texture","_ref","width","height","setScale","ratioResolution","setInteractive","input","hitArea","setSize","SpamClicked","createCloseIcon","spamContent","close","SpamDestroyed","destroy","setTexture","closeIcon","innerWidth","innerHeight","existing","isAnimated","play","GameObjects","Container","List","_Array","items","_getPrototypeOf2","apply","toConsumableArray","inherits","createClass","searchedValue","find","item","indexToRemove","indexOf","splice","wrapNativeSuper","Array","MinigameScene","loadPostMinigame","looseLife","RemainingTimeOver","onFailure","SpamGameScene","spams","image","setGlobalTopOnly","nbrSpam","createSpam","spam","update","playSfx","remove","onSuccess","detune","availablesSpam","SOUND_GET_SANDWICH","SandwichGameScene","skies","buildings","landscapes","streetLights","grounds","currentFrame","isControlsEnabled","createPlayer","playerTexture","Number","createSandwich","sandwichTexture","playWinAnimation","_callee2","_context2","volume","abrupt","player","playerWinTexture","resetClassVariables","initBackground","createControls","sky","from","element","createCloneBackgroundElement","SandwichPicked","suspendMinigame","sandwich","disableMobileControls","nativeSpeed","props","createBackgroundElement","keyCode","keyboard","lastKeyPressed","animateGame","physics","world","enable","setDisplaySize","collider","overlap","removeCollider","array","leftBtn","setDepth","rightBtn","btn","KeyboardPasswordButton","style","code","KeyboardPasswordButtonClicked","Sprite","COLUMNS","ROWS","KeyboardContainer","buttons","getButton","button","index","passwordCharMap","1","2","3","4","5","ComputerPasswordScreen","stars","addStarChar","passwordCount","createStar","last","offset","createScreenSprite","screen","passwordGame","once","typedPassword","password","PASSWORD_DISPLAY_TIME","EASY_PASSWORD_LENGTH","MEDIUM_PASSWORD_LENGTH","HARD_PASSWORD_LENGTH","PasswordGameScene","createPassword","playIntroduction","resumeMinigame","computerScreen","getBounds","_callee3","_context3","difficulty","slice","reduce","acc","_ref4","_callee4","paw","_context4","device","os","desktop","then","every","_x","arguments","SOUND_LOST","SOUND_WIN","DISPLAY_TIME","hasTokiJustLost","isTokiDead","createFillerGraphics","resetTokiStatus","loadDeathscreen","DeathscreenScene","colors","gameConfig","antialias","gamepad","mouse","touch","arcade","gravity","default","title","version","zoom","parent","type","AUTO","pixelArt","appear","$el","TweenLite","to","opacity","disappear","minigameManager","currentCategory","games","playedGames","startGame","category","gameCategory","hasOwnProperty","gameKey","clear","has","lastGame","startScene","selectedCategory","pickRandomCategory","pickGameKey","AudioManager","gm","extra","sound","objectSpread","loop","pauseOnBlur","EventEmitter","GameManager","Game","suspended","loadSplashscreen","changeState","loadHomescreen","loadMinigame","_ref3","minigameKey","pickNextGameKey","_callee5","_context5","_callee6","_context6","_ref7","_callee7","optionnalData","_args7","_context7","event","removeAllListeners","gameFader","startTransitionning","scenes","filter","includes","Minigame","regenerateUiKey","stopTransitionning","paused","resume","_x2","pause","activeScene","color","cameras","main","setBackgroundColor","restartActiveScene","_callee8","_args8","_context8","togglePause","setDetune","hasJustLoosedBrain","hasJustLoosedHeart","hasJustStress","status","hasHeart","hasStress","hasBrain","hasJustBrain","hasJustHeart","elapsed","Date","secondsElapsed","toLocaleTimeString","minute","second","fadeColor","minigameDuration","RandomDataGenerator","uuid","uiKey","newConfig","newState","state","step","transitionning","_this9","_this10","_this11","_this12","_this13","_this14","HomescreenUI","react_default","createElement","className","SplashscreenUI","ProgressOuter","styled","div","_templateObject","ProgressInner","_templateObject2","observer","_gameStore$config","_useState","useState","_useState2","slicedToArray","remaining","setRemaining","useRef","current","click","removeAllEvents","progress","ref","onClick","increaseElapsed","pointerEvents","display","aria-hidden","Div","MinigameToolbar_templateObject","MinigameToolbar","assign","games_RemainingTime","MinigameUI","games_MinigameToolbar","Spritesheet","renderElements","_this$props","widthFrame","heightFrame","background","backgroundSize","backgroundRepeat","backgroundPosition","onDoubleClick","onMouseMove","onMouseEnter","onMouseLeave","onMouseOver","onMouseOut","onMouseDown","onMouseUp","containerStyles","position","overflow","transform","spriteScale","transformOrigin","backgroundImage","moveStyles","elMove","React","elContainer","id","_onClick","setInstance","_onDoubleClick","_onMouseMove","_onMouseEnter","_onMouseLeave","_onMouseOver","_onMouseOut","_onMouseDown","_onMouseUp","init","_this$props2","autoplay","getInstance","onInit","imgLoadSprite","Image","src","onload","document","querySelector","imageSprite","cols","rows","spriteEl","spriteElContainer","spriteElMove","resize","moveImage","setTimeout","instance","onerror","Error","_this$props3","onResize","scale","isResponsive","offsetWidth","imageRendering","getInfo","withTimeout","_this$props4","onPlay","timeout","isPlaying","setIntervalPlayFunctions","intervalSprite","clearInterval","setInterval","fps","_this$props5","onEnterFrame","onEachFrame","onLoopComplete","currentRow","currentCol","map","frameAction","direction","steps","endAt","completeLoopCicles","startAt","onPause","goToAndPlay","goToAndPause","setStartAt","setEndAt","setDirection","param","getBoundingClientRect","_this$props6","setFps","Component","defaultProps","LivesListInner","ul","LivesList_templateObject","FRAME_WIDTH","hasLoosedBrain","hasLoosedHeart","ui_Spritesheet","stress","brain","heart","show","keyframes","PostMinigameUI_templateObject","PostMinigameUIInner","PostMinigameUI_templateObject2","Score","h2","_templateObject3","timeElapsed","post_minigame_LivesList","DeathscreenUI","Transition_templateObject","fader","createRef","Transition_Div","classNames","gameUI","UIComponent","PostMinigame","PostMinigameUI","join","ui_Transition","DebugContainer","center","rounded","hide","zIndex","draggable","disabled","isDraggable","themeClass","section","left","top","react_draggable_default","minigames","handleMinigameChange","target","react","debug_DebugContainer","minigame","name","checked","onChange","availableStates","gameState","handleInputChange","availableState","debug_GameDebugMinigamePicker","Spacer_templateObject","size","Spacer","Spacer_Div","ValidatableInput","validationClassname","validationFeedbackDelay","onValidate","onKeyDown","rest","objectWithoutProperties","handleOnKeyDown","useCallback","Key","Enter","classList","contains","clearTimeout","MinigameDurationCol","span","GameDebugConfigPanel_templateObject","handleFadeChange","handleFadeColorChange","hex","handleGameBackgroundColorChange","rgb","handleOnValidate","ui_Spacer","lib","onChangeComplete","ui_ValidatableInput","defaultValue","GameDebug","debug_GameDebugConfigPanel","debug_GameDebugStateList","DebugButton","split","render","GameDebugToggleButtonIcon","GameDebugToggleButton_templateObject","debugIcon","toggleDebug","Escape","debug_DebugButton","toggleTheme","otherThemeName","PauseIcon_templateObject","PauseIcon","PauseIcon_Div","PlayIcon_templateObject","PlayIcon","PlayIcon_Div","icons_PauseIcon","icons_PlayIcon","toggleDebugToolbar","debug_GameDebugTogglePauseButton","debug_GameDebugToggleThemeButton","debug_GameDebugToggleButton","_useResize","useResize","canvas","transition","debug_GameDebugButtonsToolbar","components_GameDebug","ui_GameUI","App","components_Game","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","src_App","getElementById","URL","origin","fetch","response","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.5683bc0d.chunk.js","sourcesContent":["export enum GameCategory {\r\n  Action = 'ACTION',\r\n  Waiting = 'WAITING',\r\n}\r\n\r\nexport enum GameState {\r\n  Splashscreen = 'SPLASHSCREEN',\r\n  Homescreen = 'HOMESCREEN',\r\n  Minigame = 'MINIGAME',\r\n  PostMinigame = 'POSTMINIGAME',\r\n  Deathscreen = 'DEATHSCREEN',\r\n}\r\n\r\nexport enum BaseEvents {\r\n  SceneInit = 'SCENE_INIT',\r\n  SceneCreated = 'SCENE_CREATED',\r\n}\r\n\r\nexport enum GameEvents {\r\n  KeyboardPasswordButtonClicked = 'KEYBOARD_PASSWORD_BUTTON_CLICKED',\r\n  SpamDestroyed = 'SPAM_DESTROYED',\r\n  RemainingTimeOver = 'REMANING_TIME_OVER',\r\n  SpamClicked = 'SPAM_CLICKED',\r\n\r\n  SandwichPicked = 'SANDWICH_PICKED',\r\n}\r\n\r\nexport enum GameDebugTheme {\r\n  Light = 'LIGHT',\r\n  Dark = 'DARK',\r\n}\r\n","import { action, computed, observable } from 'mobx'\r\nimport { GameDebugTheme } from '../utils/enums'\r\n\r\nclass GameDebugStore {\r\n  @observable public debug: boolean = false\r\n  @observable public debugToolbar: boolean = true\r\n  @observable public theme: GameDebugTheme = GameDebugTheme.Light\r\n\r\n  @action public showDebugToolbar = (): void => {\r\n    this.debugToolbar = true\r\n    this.showDebug()\r\n  }\r\n\r\n  @action public hideDebugToolbar = (): void => {\r\n    this.debugToolbar = false\r\n    this.hideDebug()\r\n  }\r\n\r\n  @action public toggleDebugToolbar = (): void => {\r\n    this.debugToolbar = !this.debugToolbar\r\n    this.debug = this.debugToolbar\r\n  }\r\n\r\n  @action public toggleDebug = (): void => {\r\n    this.debug = !this.debug\r\n  }\r\n\r\n  @action public showDebug = (): void => {\r\n    this.debug = true\r\n  }\r\n\r\n  @action public hideDebug = (): void => {\r\n    this.debug = false\r\n  }\r\n\r\n  @action public setTheme = (newTheme: GameDebugTheme): void => {\r\n    this.theme = newTheme\r\n  }\r\n\r\n  @action public toggleTheme = (): void => {\r\n    this.theme =\r\n      this.theme === GameDebugTheme.Dark\r\n        ? GameDebugTheme.Light\r\n        : GameDebugTheme.Dark\r\n  }\r\n\r\n  @computed get isDarkTheme(): boolean {\r\n    return this.theme === GameDebugTheme.Dark\r\n  }\r\n\r\n  @computed get shortThemeName(): string {\r\n    return this.theme[0].toUpperCase()\r\n  }\r\n\r\n  @computed get otherThemeName(): string {\r\n    return this.theme === GameDebugTheme.Dark\r\n      ? GameDebugTheme.Light\r\n      : GameDebugTheme.Dark\r\n  }\r\n}\r\n\r\nconst gameDebugStore = new GameDebugStore()\r\nexport default gameDebugStore\r\n","import { ChangeEvent, useCallback, useEffect, useRef, useState } from 'react'\r\nimport gameDebugStore from '../store/GameDebugStore'\r\nimport { GameDebugTheme } from './enums'\r\nimport { KeyboardShortcut } from './interfaces'\r\n\r\nexport const useResize = (): { width: number; height: number } => {\r\n  const [size, setSize] = useState({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n  })\r\n\r\n  useEffect(\r\n    () => {\r\n      const listener = () =>\r\n        setSize({\r\n          width: window.innerWidth,\r\n          height: window.innerHeight,\r\n        })\r\n      window.addEventListener('resize', listener)\r\n\r\n      return () => {\r\n        window.removeEventListener('resize', listener)\r\n      }\r\n    },\r\n    [window.innerWidth, window.innerHeight]\r\n  )\r\n\r\n  return size\r\n}\r\n\r\nexport const useKeyboardInput = (listener: (e: KeyboardEvent) => void) => {\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', listener)\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', listener)\r\n    }\r\n  }, [])\r\n}\r\n\r\nexport const useKeyboardShortcuts = (shortcuts: KeyboardShortcut[]) => {\r\n  useKeyboardInput(e => {\r\n    shortcuts.forEach(shortcut => {\r\n      if (\r\n        shortcut.keys.some(key => key.toLowerCase() === e.key.toLowerCase())\r\n      ) {\r\n        shortcut.action()\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\nexport const usePrevious = (value: any) => {\r\n  const ref = useRef(null)\r\n  useEffect(() => {\r\n    ref.current = value\r\n  })\r\n\r\n  return ref.current!\r\n}\r\n\r\nexport const useInputValue = <T>(initialValue: T) => {\r\n  const [value, setValue] = useState<T>(initialValue)\r\n  const onChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    setValue((e.target.value as unknown) as T)\r\n  }, [])\r\n\r\n  return {\r\n    value,\r\n    onChange,\r\n  }\r\n}\r\n\r\nexport const useClassTheme = (forceTheme?: GameDebugTheme): string | null => {\r\n  const { isDarkTheme } = gameDebugStore\r\n\r\n  if (!forceTheme && isDarkTheme) {\r\n    return 'is-dark'\r\n  }\r\n\r\n  if (!isDarkTheme && forceTheme && forceTheme === GameDebugTheme.Dark) {\r\n    return 'is-dark'\r\n  } else if (isDarkTheme && forceTheme && forceTheme === GameDebugTheme.Dark) {\r\n    return 'is-dark'\r\n  } else if (forceTheme && forceTheme === GameDebugTheme.Light) {\r\n    return null\r\n  }\r\n\r\n  return null\r\n}\r\n","import { GameCategory } from './enums'\n\nexport const minigameSuffix = '_MINIGAME'\nexport const minigameToolbarHeight = 84\n\nexport const scenesKeys = {\n  Boot: 'BOOT',\n  Splashscreen: 'SPLASHSCREEN',\n  Homescreen: 'HOMESCREEN',\n\n  SandwichGame: 'SANDWICH' + minigameSuffix,\n  SpamGame: 'SPAM' + minigameSuffix,\n  PasswordGame: 'PASSWORD' + minigameSuffix,\n\n  PostMinigameScene: 'POSTMINIGAME',\n\n  Deathscreen: 'DEATHSCREEN',\n}\n\nexport const categoriesProbability = {\n  [GameCategory.Action]: 0.9,\n  [GameCategory.Waiting]: 0.1,\n}\n","/**\n * @author       Digitsensitive <digit.sensitivee@gmail.com>\n * @copyright    2018 Digitsensitive\n * @description  Animation Helper\n * @license      Digitsensitive\n */\n\n/**\n * Configs taken from official Phaser library code and edited\n *\n * AnimationConfig\n * {string}           [key] - The key that the animation will be associated with. i.e. sprite.animations.play(key)\n * {AnimationFrameConfig[]} [frames] - An object containing data used to generate the frames for the animation\n * {string}           [defaultTextureKey=null] - The key of the texture all frames of the animation will use. Can be overridden on a per frame basis.\n * {integer}          [frameRate] - The frame rate of playback in frames per second (default 24 if duration is null)\n * {integer}          [duration] - How long the animation should play for in milliseconds. If not given its derived from frameRate.\n * {boolean}          [skipMissedFrames=true] - Skip frames if the time lags, or always advanced anyway?\n * {integer}          [delay=0] - Delay before starting playback. Value given in milliseconds.\n * {integer}          [repeat=0] - Number of times to repeat the animation (-1 for infinity)\n * {integer}          [repeatDelay=0] - Delay before the animation repeats. Value given in milliseconds.\n * {boolean}          [yoyo=false] - Should the animation yoyo? (reverse back down to the start) before repeating?\n * {boolean}          [showOnStart=false] - Should sprite.visible = true when the animation starts to play?\n * {boolean}          [hideOnComplete=false] - Should sprite.visible = false when the animation finishes?\n *\n * AnimationFrameConfig\n * {string}           key - The key that the animation will be associated with. i.e. sprite.animations.play(key)\n * {(string|number)}  frame - [description]\n * {number}           [duration=0] - [description]\n * {boolean}          [visible] - [description]\n *\n * GenerateFrameNamesConfig\n * {string}           [prefix=''] - [description]\n * {integer}          [start=0] - [description]\n * {integer}          [end=0] - [description]\n * {string}           [suffix=''] - [description]\n * {integer}          [zeroPad=0] - [description]\n * {boolean}          [frames=false] - [description]\n *\n * GenerateFrameNumbersConfig\n * {integer}          [start=0] - [At which frame the animation starts]\n * {integer}          [end=-1] - [At which frame the animation stops]\n * {boolean}          [first=false] - [description]\n * {boolean}          [frames=false] - [description]\n */\n\n/**\n * This is a helper class for your game animations.\n *\n * There is a easier way to load animations from JSON:\n * https://labs.phaser.io/edit.html?src=src\\animation\\from%20json.js\n *\n * The only problem with that approach is, that you can not use\n * generateFrameNames and generateFrameNumbers and with that not load\n * your frames from your atlas.\n *\n * The class needs a scene from you game to be able to create the animations.\n * Since the Animation Manager is global, any scene from your game is okay.\n * The class also needs the animation data to be able to create the animations.\n * We load a JSON upfront and get the data from the global cache.\n * @param scene [Any scene from your game]\n * @param data  [Animation data from the cache, loaded from JSON]\n */\nexport default class AnimationHelper {\n  private scene: Phaser.Scene\n  private animationData: any\n\n  constructor(scene: Phaser.Scene, data: any) {\n    this.scene = scene\n    this.animationData = data\n    this.createGameAnimations()\n  }\n\n  private createGameAnimations(): void {\n    for (const data of this.animationData.anims) {\n      let frames\n      const framesArray = []\n      if (data.frames.typeOfGeneration === 'generateFrameNames') {\n        frames = this.scene.anims.generateFrameNames(data.frames.key, {\n          prefix: data.frames.prefix || '',\n          start: data.frames.start || 0,\n          end: data.frames.end || 0,\n          suffix: data.frames.suffix || '',\n          zeroPad: data.frames.zeroPad || 0,\n          frames: data.frames.frames || false,\n        })\n      } else if (data.frames.typeOfGeneration === 'generateFrameNumbers') {\n        frames = this.scene.anims.generateFrameNumbers(data.frames.key, {\n          start: data.frames.start || 0,\n          end: data.frames.end || -1,\n          first: data.frames.first || false,\n          frames: data.frames.frames || false,\n        })\n      } else {\n        for (const i of data.frames) {\n          const frame = {\n            key: i.key,\n            frame: i.frame,\n            duration: i.duration || 0,\n            visible: i.visible,\n          }\n          framesArray.push(frame)\n        }\n      }\n\n      this.scene.anims.create({\n        key: data.key,\n        frames: frames || framesArray,\n        defaultTextureKey: data.defaultTextureKey || null,\n        frameRate: data.frameRate || 24,\n        duration: data.duration,\n        skipMissedFrames: data.skipMissedFrames || true,\n        delay: data.delay || 0,\n        repeat: data.repeat || 0,\n        repeatDelay: data.repeatDelay || 0,\n        yoyo: data.yoyo || false,\n        showOnStart: data.showOnStart || false,\n        hideOnComplete: data.hideOnComplete || false,\n      })\n    }\n  }\n}\n","import gameManager, { Emitter } from '../manager/GameManager'\nimport { BaseEvents } from '../../utils/enums'\nimport AnimationHelper from '../manager/AnimationManager'\nimport gameStore from '../../store/GameStore'\n\nexport default class BaseScene extends Phaser.Scene {\n  protected animationHelper?: AnimationHelper\n\n  public init(): void {\n    console.log(`init (${this.scene.key})`)\n    this.game.scene.dump()\n    Emitter.emit(BaseEvents.SceneInit, this)\n  }\n\n  public preload(): void {\n    console.log(`preload (${this.scene.key})`)\n    this.load.on('complete', () => {\n      this.animationHelper = new AnimationHelper(\n        this,\n        this.cache.json.get('animations')\n      )\n    })\n  }\n\n  public create(): void {\n    console.log(`create (${this.scene.key})`)\n    gameManager.changeBackgroundColor(gameStore.config.backgroundColor)\n    Emitter.emit(BaseEvents.SceneCreated, this)\n    this.initListeners()\n  }\n\n  public update(time: number, delta: number): void {\n    console.log(`update (${this.scene.key})`)\n  }\n\n  protected initListeners(): void {}\n}\n","import { scenesKeys } from '../../utils/constants'\nimport gameManager from '../manager/GameManager'\nimport BaseScene from './BaseScene'\nimport gameStore from '../../store/GameStore'\n\nexport default class BootScene extends BaseScene {\n  constructor() {\n    super({\n      key: scenesKeys.Boot,\n    })\n  }\n\n  public preload(): void {\n    super.preload()\n    this.load.setBaseURL(process.env.PUBLIC_URL)\n    this.load.pack('preload', '/static/assets/sprites/pack.json', 'preload')\n  }\n\n  public create = async () => {\n    super.create()\n    gameManager.audio.playBg()\n    const initial = gameStore.config.fade\n    gameStore.changeConfig({ fade: false })\n    gameManager.loadNextMinigame()\n    gameStore.changeConfig({ fade: initial })\n    this.scene.stop(this.scene.key)\n  }\n}\n","import { scenesKeys } from '../../utils/constants'\nimport BaseScene from './BaseScene'\nimport { wait } from '../../utils/functions'\nimport gameManager from '../manager/GameManager'\n\nexport default class SplashscreenScene extends BaseScene {\n  constructor() {\n    super({\n      key: scenesKeys.Splashscreen,\n    })\n  }\n\n  public create(): void {\n    super.create()\n    const graphics = this.add.graphics()\n    graphics.fillStyle(0xff3300, 1)\n    graphics.fillRect(100, 200, 600, 300)\n    graphics.fillRect(100, 100, 100, 100)\n    this.add.text(120, 110, this.scene.key)\n  }\n\n  public update(time: number, delta: number): void {}\n}\n","import { scenesKeys } from '../../utils/constants'\nimport BaseScene from './BaseScene'\n\nexport default class HomescreenScene extends BaseScene {\n  constructor() {\n    super({\n      key: scenesKeys.Homescreen,\n    })\n  }\n\n  public create(): void {\n    super.create()\n    const graphics = this.add.graphics()\n    graphics.fillStyle(0xff9933, 1)\n    graphics.fillRect(100, 200, 600, 300)\n    graphics.fillRect(200, 100, 100, 100)\n    this.add.text(220, 110, this.scene.key)\n  }\n\n  public update(time: number, delta: number): void {}\n}\n","import { TweenLite } from 'gsap'\r\nimport { GameBackgroundColor } from './types'\r\n\r\nexport const wait = (ms: number): Promise<TimerHandler> =>\r\n  new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nexport const gameWait = (\r\n  clock: Phaser.Time.Clock,\r\n  ms: number\r\n): Promise<Phaser.Time.TimerEvent> =>\r\n  new Promise(resolve => {\r\n    return clock.addEvent({\r\n      callback: resolve,\r\n      delay: ms,\r\n    })\r\n  })\r\n\r\nexport const randomRange = (min: number, max: number): number => {\r\n  return Math.random() * (max - min) + min\r\n}\r\n\r\nexport const promiseAnimation = (animation: TweenLite | gsap.Animation) => {\r\n  return new Promise(resolve =>\r\n    animation.eventCallback('onComplete', async () => {\r\n      resolve()\r\n    })\r\n  )\r\n}\r\n\r\nexport const shuffle = <T>(a: T[]): T[] => {\r\n  for (let i = a.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1))\r\n    ;[a[i], a[j]] = [a[j], a[i]]\r\n  }\r\n\r\n  return a\r\n}\r\n\r\nexport const gameBackgroundColorToCss = (\r\n  backgroundColor: GameBackgroundColor\r\n): string => {\r\n  if (typeof backgroundColor === 'object') {\r\n    const { r, g, b, a } = backgroundColor\r\n    return `rgba(${r},${g},${b},${a})`\r\n  }\r\n\r\n  return String(backgroundColor)\r\n}\r\n\r\nexport const randomString = (length: number) =>\r\n  Math.random()\r\n    .toString(36)\r\n    .substring(length)\r\n","import { ContainerConstructor } from '../../utils/interfaces'\nimport gameStore from '../../store/GameStore'\nimport { Emitter } from '../manager/GameManager'\nimport { GameEvents } from '../../utils/enums'\nimport { randomRange } from '../../utils/functions'\n\nexport default class Spam extends Phaser.GameObjects.Container {\n  private readonly spamContent?: Phaser.GameObjects.Sprite\n  private readonly closeIcon?: Phaser.GameObjects.Sprite\n  private readonly texture: string\n\n  get isAnimated() {\n    return !!(\n      this.spamContent &&\n      this.spamContent.anims &&\n      this.spamContent.anims.animationManager.get(this.texture)\n    )\n  }\n\n  constructor(params: ContainerConstructor & { texture: string }) {\n    super(params.scene, params.x, params.y, params.children)\n    this.texture = params.texture\n    this.spamContent = this.createSpamContent(params.texture)\n    this.add(this.spamContent)\n\n    this.closeIcon = this.createCloseIcon()\n    this.add(this.closeIcon)\n\n    // set X & Y of spam container (80 for UI -> have to be replace)\n    this.x = randomRange(\n      0,\n      window.innerWidth - this.spamContent.width / gameStore.ratioResolution\n    )\n    this.y = randomRange(\n      80,\n      window.innerHeight - this.spamContent.height / gameStore.ratioResolution\n    )\n\n    params.scene.add.existing(this)\n  }\n\n  public update(): void {\n    if (this.isAnimated) {\n      this.spamContent!.anims.play(this.texture, true)\n    }\n  }\n\n  private createSpamContent = (\n    spamTexture: string\n  ): Phaser.GameObjects.Sprite => {\n    const sprite = this.scene.add.sprite(0, 0, spamTexture).setOrigin(0, 0)\n\n    // defining the dimensions of the sprite\n    const spriteAnim = sprite.anims.animationManager.get(this.texture)\n    if (!!spriteAnim) {\n      const [width, height] = [\n        spriteAnim.frames[0].frame.width,\n        spriteAnim.frames[0].frame.height,\n      ]\n      sprite.width = width\n      sprite.height = height\n    }\n    sprite.setScale(\n      1 / gameStore.ratioResolution,\n      1 / gameStore.ratioResolution\n    )\n\n    sprite.setInteractive()\n    sprite.input.hitArea.setSize(sprite.width, sprite.height) // defining the dimensions of the input hit area\n    sprite.on('pointerdown', () => {\n      Emitter.emit(GameEvents.SpamClicked, this)\n      console.log('EMITED ' + GameEvents.SpamClicked)\n    })\n\n    return sprite\n  }\n\n  private createCloseIcon = (): Phaser.GameObjects.Sprite => {\n    const x = this.spamContent!.width / gameStore.ratioResolution\n    const close = this.scene.add\n      .sprite(x, 0, 'close')\n      .setOrigin(1, 0)\n      .setScale(1 / gameStore.ratioResolution, 1 / gameStore.ratioResolution)\n    close.setInteractive()\n    close.on('pointerdown', () => {\n      Emitter.emit(GameEvents.SpamDestroyed, this)\n      console.log('EMITED ' + GameEvents.SpamDestroyed)\n      this.destroy(true)\n    })\n    close.on('pointerover', () => {\n      close.setTexture('close_active')\n    })\n    close.on('pointerout', () => {\n      close.setTexture('close')\n    })\n    return close\n  }\n}\n","export class List<T> extends Array<T> {\n  constructor(items?: T[]) {\n    if (items && items.length > 0) {\n      super(...items)\n    } else {\n      super(0)\n    }\n  }\n\n  public random(): T {\n    return this[Math.floor(Math.random() * this.length)]\n  }\n\n  public has(searchedValue: T): boolean {\n    return this.find(item => item === searchedValue) !== undefined\n  }\n\n  public remove(searchedValue: T): number {\n    const indexToRemove = this.indexOf(searchedValue)\n    this.splice(indexToRemove, 1)\n\n    return this.length\n  }\n\n  public clear(): void {\n    this.length = 0\n  }\n\n  public first(): T {\n    return this[0]\n  }\n\n  public last(): T {\n    return this[this.length - 1]\n  }\n}\n","import BaseScene from './BaseScene'\r\nimport gameManager, { Emitter } from '../manager/GameManager'\r\nimport { GameEvents } from '../../utils/enums'\r\n\r\nexport default abstract class MinigameScene extends BaseScene {\r\n  protected onSuccess(): void {\r\n    console.log('you won')\r\n    gameManager.loadPostMinigame()\r\n  }\r\n\r\n  protected onFailure(): void {\r\n    console.log('you fail')\r\n    gameManager.looseLife()\r\n    gameManager.loadPostMinigame()\r\n  }\r\n\r\n  protected initListeners(): void {\r\n    super.initListeners()\r\n    Emitter.on(GameEvents.RemainingTimeOver, this.onFailure)\r\n  }\r\n}\r\n","import { scenesKeys } from '../../../utils/constants'\nimport Spam from '../../objects/Spam'\nimport { List } from '../../../utils/extensions'\nimport { randomRange } from '../../../utils/functions'\nimport { GameEvents } from '../../../utils/enums'\nimport gameManager, { Emitter } from '../../manager/GameManager'\nimport MinigameScene from '../MinigameScene'\n\nconst SOUND_SPAM_DESTROYED = 'explosion'\nconst SOUND_CLOSE_CLICK = 'beep'\n\nexport default class SpamGameScene extends MinigameScene {\n  public spams: List<Spam> = new List<Spam>()\n  constructor() {\n    super({\n      key: scenesKeys.SpamGame,\n    })\n  }\n\n  public preload(): void {\n    super.preload()\n    this.load.image('close', '/static/assets/sprites/spam-game/close.png')\n    this.load.image(\n      'close_active',\n      '/static/assets/sprites/spam-game/close_active.png'\n    )\n  }\n\n  public create() {\n    super.create()\n    this.spams = new List<Spam>()\n    this.input.setGlobalTopOnly(true)\n\n    for (let nbrSpam = 0; nbrSpam < 10; nbrSpam++) {\n      this.spams.push(this.createSpam())\n    }\n  }\n\n  public update(time: number, delta: number): void {\n    this.spams.forEach(spam => spam.update())\n  }\n\n  protected initListeners(): void {\n    super.initListeners()\n    Emitter.on(GameEvents.SpamDestroyed, (spam: Spam) => {\n      gameManager.audio.playSfx(SOUND_SPAM_DESTROYED)\n      this.spams.remove(spam)\n      if (this.spams.length === 0) {\n        this.onSuccess()\n      }\n    })\n    Emitter.on(GameEvents.SpamClicked, (spam: Spam) => {\n      gameManager.audio.playSfx(SOUND_CLOSE_CLICK, {\n        detune: randomRange(-100, 100),\n      })\n      for (let i = 0; i < randomRange(1, 4); i++) {\n        this.spams.push(this.createSpam())\n      }\n    })\n  }\n\n  private createSpam(): Spam {\n    const availablesSpam = new List<string>([\n      'sexyAnimation',\n      'soldAnimation',\n      'pizzaAnimation',\n      'magicBottleAnimation',\n      'musclesAnimation',\n      'playAnimation',\n      'toothAnimation',\n      'hairAnimation',\n      'gamblingAnimation',\n      'yoAnimation',\n    ])\n\n    return new Spam({\n      scene: this,\n      x: 0,\n      y: 0,\n      texture: availablesSpam.random(),\n    })\n  }\n}\n","import { scenesKeys } from '../../../utils/constants'\nimport { GameEvents } from '../../../utils/enums'\nimport gameManager, { Emitter } from '../../manager/GameManager'\nimport MinigameScene from '../MinigameScene'\nimport gameStore from '../../../store/GameStore'\nimport { gameWait, randomRange } from '../../../utils/functions'\n\nconst SOUND_WALK = 'beep'\nconst SOUND_GET_SANDWICH = 'tada'\n\nexport default class SandwichGameScene extends MinigameScene {\n  private skies?: Phaser.GameObjects.Sprite[] = []\n  private buildings?: Phaser.GameObjects.Sprite[] = []\n  private landscapes?: Phaser.GameObjects.Sprite[] = []\n  private streetLights?: Phaser.GameObjects.Sprite[] = []\n  private grounds?: Phaser.GameObjects.Sprite[] = []\n  private lastKeyPressed?: 37 | 39\n  private playerTexture: string\n  private playerWinTexture: string\n  private sandwichTexture: string\n  private player?: Phaser.GameObjects.Sprite\n  private sandwich?: Phaser.GameObjects.Sprite\n  private currentFrame: integer = 0\n  private leftBtn?: Phaser.GameObjects.Sprite\n  private rightBtn?: Phaser.GameObjects.Sprite\n  private isControlsEnabled?: boolean = true\n\n  constructor() {\n    super({\n      key: scenesKeys.SandwichGame,\n    })\n\n    this.playerTexture = 'tokiRunAnimation'\n    this.playerWinTexture = 'tokiWinAnimation'\n    this.sandwichTexture = 'sandwichFlyingAnimation'\n  }\n\n  public create() {\n    super.create()\n    this.resetClassVariables()\n    this.initBackground()\n    this.createControls()\n  }\n\n  public update(time: number, delta: number): void {\n    this.skies!.forEach(sky => {\n      sky!.x -= 0.15\n    })\n\n    Array.from([\n      this.skies,\n      this.buildings,\n      this.landscapes,\n      this.streetLights,\n      this.grounds,\n    ]).forEach(element => {\n      // Loop through props sprites to determine if we have to clone a props to avoid blank\n      if (\n        element![element!.length - 1].x +\n          element![element!.length - 1].width / gameStore.ratioResolution <\n        this.game.config.width\n      ) {\n        if (element === this.skies) {\n          this.createCloneBackgroundElement(element!, 'sky')\n        } else if (element === this.buildings) {\n          this.createCloneBackgroundElement(element!, 'building')\n        } else if (element === this.landscapes) {\n          this.createCloneBackgroundElement(element!, 'landscape')\n        } else if (element === this.streetLights) {\n          this.createCloneBackgroundElement(element!, 'streetLights')\n        } else if (element === this.grounds) {\n          this.createCloneBackgroundElement(element!, 'ground')\n        }\n      }\n    })\n  }\n\n  protected initListeners(): void {\n    super.initListeners()\n    Emitter.on(GameEvents.SandwichPicked, () => {\n      gameManager.suspendMinigame()\n      this.playWinAnimation()\n      this.sandwich!.destroy()\n      this.disableMobileControls()\n      this.isControlsEnabled = false\n    })\n  }\n\n  private resetClassVariables(): void {\n    this.skies = []\n    this.buildings = []\n    this.landscapes = []\n    this.streetLights = []\n    this.grounds = []\n    this.isControlsEnabled = true\n  }\n\n  private createPlayer = (playerTexture: string): Phaser.GameObjects.Sprite => {\n    const sprite = this.add\n      .sprite(\n        50,\n        Number(this.game.config.height) -\n          this.grounds![0].height / gameStore.ratioResolution,\n        playerTexture\n      )\n      .setOrigin(0, 1)\n\n    const spriteAnim = sprite.anims.animationManager.get(this.playerTexture)\n\n    if (!!spriteAnim) {\n      const [width, height] = [\n        spriteAnim.frames[0].frame.width,\n        spriteAnim.frames[0].frame.height,\n      ]\n      sprite.width = width\n      sprite.height = height\n    }\n\n    sprite.setOrigin(0, 1).setScale(1 / gameStore.ratioResolution)\n\n    return sprite\n  }\n\n  private createSandwich = (\n    sandwichTexture: string\n  ): Phaser.GameObjects.Sprite => {\n    const offset = 200\n    const sprite = this.add\n      .sprite(\n        this.grounds![0].x +\n          this.grounds![0].width / gameStore.ratioResolution -\n          offset,\n        Number(this.game.config.height) -\n          this.grounds![0].height / gameStore.ratioResolution,\n        sandwichTexture\n      )\n      .setOrigin(1, 1)\n      .setScale(1 / gameStore.ratioResolution)\n\n    const spriteAnim = sprite.anims.animationManager.get(this.sandwichTexture)\n\n    if (!!spriteAnim) {\n      const [width, height] = [\n        spriteAnim.frames[0].frame.width,\n        spriteAnim.frames[0].frame.height,\n      ]\n      sprite.width = width\n      sprite.height = height\n    }\n\n    return sprite\n  }\n\n  private animateGame(): void {\n    gameManager.audio.playSfx(SOUND_WALK, {\n      detune: randomRange(-500, 500),\n    })\n    const speedFactor = 3\n\n    Array.from([\n      this.skies,\n      this.buildings,\n      this.landscapes,\n      this.streetLights,\n      this.grounds,\n    ]).forEach(element => {\n      let nativeSpeed = 1\n\n      if (element === this.skies) {\n        nativeSpeed = 2\n      } else if (element === this.buildings) {\n        nativeSpeed = 4\n      } else if (element === this.landscapes) {\n        nativeSpeed = 5\n      } else if (element === this.streetLights) {\n        nativeSpeed = 6\n      } else if (element === this.grounds) {\n        nativeSpeed = 7\n      }\n\n      element!.forEach(props => {\n        props.x -= nativeSpeed * speedFactor\n      })\n    })\n\n    this.sandwich!.x -= 7 * speedFactor\n\n    this.player!.anims.play(this.playerTexture, true, this.currentFrame)\n    this.player!.anims.stop()\n\n    this.currentFrame += 1\n\n    if (this.currentFrame >= 8) {\n      this.currentFrame = 0\n    }\n  }\n\n  private initBackground(): void {\n    this.createBackgroundElement(this.skies!, 'sky')\n    this.createBackgroundElement(this.grounds!, 'ground')\n    this.createBackgroundElement(this.buildings!, 'building')\n    this.createBackgroundElement(this.landscapes!, 'landscape')\n    this.createBackgroundElement(this.streetLights!, 'streetLights')\n\n    Array.from(['keydown_LEFT', 'keydown_RIGHT']).forEach(keyCode => {\n      this.scene.scene.input.keyboard.on(keyCode, (e: KeyboardEvent) => {\n        if (this.lastKeyPressed !== e.keyCode && this.isControlsEnabled) {\n          this.animateGame()\n          this.lastKeyPressed = e.keyCode as 37 | 39\n        }\n      })\n    })\n\n    this.player = this.createPlayer(this.playerTexture)\n    this.player!.anims.play(this.playerTexture, true, 3)\n    this.player!.anims.stop()\n\n    this.sandwich = this.createSandwich(this.sandwichTexture)\n    this.sandwich!.anims.play(this.sandwichTexture, true, 0)\n\n    Array.from([this.player, this.sandwich]).forEach(element => {\n      this.physics.world.enable(element)\n\n      element.setDisplaySize(\n        element.width / gameStore.ratioResolution - 1,\n        element.height / gameStore.ratioResolution - 1\n      )\n    })\n\n    const collider = this.physics.add.overlap(\n      this.player!,\n      this.sandwich,\n      () => {\n        Emitter.emit(GameEvents.SandwichPicked, this)\n        this.physics.world.removeCollider(collider)\n      }\n    )\n  }\n\n  private createBackgroundElement(\n    array: Phaser.GameObjects.Sprite[],\n    texture: string\n  ): void {\n    array![0] = this.add\n      .sprite(0, Number(this.game.config.height), texture)\n      .setOrigin(0, 1)\n      .setScale(1 / gameStore.ratioResolution)\n  }\n\n  private createCloneBackgroundElement(\n    array: Phaser.GameObjects.Sprite[],\n    texture: string\n  ): void {\n    array[array.length + 1] = this.add\n      .sprite(\n        array[0].width / gameStore.ratioResolution,\n        Number(this.game.config.height),\n        texture\n      )\n      .setOrigin(0, 1)\n      .setScale(1 / gameStore.ratioResolution)\n  }\n\n  private createControls(): void {\n    this.leftBtn = this.add\n      .sprite(\n        Number(this.game.config.width) / 2,\n        Number(this.game.config.height) - 50,\n        'btn_left_on'\n      )\n      .setDepth(1000)\n      .setOrigin(0.5, 1)\n      .setScale(1 / gameStore.ratioResolution)\n    this.leftBtn.x =\n      this.leftBtn.x - this.leftBtn.width / gameStore.ratioResolution\n\n    this.rightBtn = this.add\n      .sprite(\n        Number(this.game.config.width) / 2,\n        Number(this.game.config.height) - 50,\n        'btn_right_on'\n      )\n      .setDepth(1000)\n      .setOrigin(0.5, 1)\n      .setScale(1 / gameStore.ratioResolution)\n    this.rightBtn.x =\n      this.rightBtn.x + this.rightBtn.width / gameStore.ratioResolution\n\n    Array.from([this.leftBtn, this.rightBtn]).forEach(btn => {\n      btn.setInteractive()\n      btn.input.hitArea.setSize(btn.width, btn.height)\n\n      btn.on('pointerdown', () => {\n        if (this.isControlsEnabled) {\n          if (btn === this.leftBtn) {\n            this.leftBtn.setTexture('btn_left_off')\n            this.rightBtn!.setTexture('btn_right_on')\n          } else {\n            this.leftBtn!.setTexture('btn_left_on')\n            this.rightBtn!.setTexture('btn_right_off')\n          }\n          this.animateGame()\n        }\n      })\n    })\n  }\n\n  private playWinAnimation = async () => {\n    gameManager.audio.playSfx(SOUND_GET_SANDWICH, { volume: 0.2, delay: 0.3 })\n    return new Promise(resolve => {\n      const animation = this.player!.anims.play(this.playerWinTexture, true, 0)\n      animation.on('animationcomplete', async () => {\n        await gameWait(this.time, 500)\n        this.onSuccess()\n        resolve()\n      })\n    })\n  }\n\n  private disableMobileControls(): void {\n    this.leftBtn!.setTexture('btn_left_off')\n    this.rightBtn!.setTexture('btn_right_off')\n  }\n}\n","import { SpriteConstructor } from '../../../utils/interfaces'\r\nimport gameStore from '../../../store/GameStore'\r\nimport { Emitter } from '../../manager/GameManager'\r\nimport { GameEvents } from '../../../utils/enums'\r\nimport { Omit } from '../../../utils/types'\r\n\r\nexport type Code = '◻' | '▲' | '|||' | '☰' | 'O' | 'U'\r\n\r\nexport default class KeyboardPasswordButton extends Phaser.GameObjects.Sprite {\r\n  public code: Code\r\n\r\n  constructor(\r\n    params: Omit<SpriteConstructor, 'texture'> & {\r\n      code: Code\r\n      style?: 'keyboard' | 'symbol'\r\n    }\r\n  ) {\r\n    params.style = params.style || 'keyboard'\r\n    let texture = `mdp_${params.style}_1`\r\n    switch (params.code) {\r\n      case '◻':\r\n        texture = `mdp_${params.style}_1`\r\n        break\r\n      case '▲':\r\n        texture = `mdp_${params.style}_2`\r\n        break\r\n      case '|||':\r\n        texture = `mdp_${params.style}_3`\r\n        break\r\n      case '☰':\r\n        texture = `mdp_${params.style}_4`\r\n        break\r\n      case 'O':\r\n        texture = `mdp_${params.style}_5`\r\n        break\r\n      case 'U':\r\n        texture = `mdp_${params.style}_6`\r\n        break\r\n    }\r\n    super(params.scene, params.x, params.y, texture, params.frame)\r\n    this.code = params.code\r\n\r\n    this.setOrigin(0, 0).setScale(\r\n      1 / gameStore.ratioResolution,\r\n      1 / gameStore.ratioResolution\r\n    )\r\n\r\n    if (params.style === 'keyboard') {\r\n      this.setInteractive()\r\n      this.on('pointerover', () => {\r\n        this.setTexture(`${texture}_hover`)\r\n      })\r\n      this.on('pointerout', () => {\r\n        this.setTexture(`${texture}`)\r\n      })\r\n      this.on('pointerdown', () => {\r\n        Emitter.emit(GameEvents.KeyboardPasswordButtonClicked, this.code)\r\n      })\r\n    }\r\n\r\n    params.scene.add.existing(this)\r\n  }\r\n}\r\n","import { ContainerConstructor } from '../../../utils/interfaces'\r\nimport KeyboardPasswordButton, { Code } from './KeyboardPasswordButton'\r\nimport { List } from '../../../utils/extensions'\r\nimport gameStore from '../../../store/GameStore'\r\nimport { shuffle } from '../../../utils/functions'\r\n\r\nconst COLUMNS = 3\r\nconst ROWS = 2\r\n\r\nexport default class KeyboardContainer extends Phaser.GameObjects.Container {\r\n  private readonly buttons: List<KeyboardPasswordButton> = new List([])\r\n\r\n  constructor(params: ContainerConstructor) {\r\n    super(params.scene, params.x, params.y, params.children)\r\n\r\n    Array.from(shuffle(['◻', '▲', '|||', '☰', 'O', 'U'])).forEach(\r\n      (code, index) => {\r\n        this.buttons.push(\r\n          new KeyboardPasswordButton({\r\n            scene: params.scene,\r\n            code: code as Code,\r\n            x: ((index % COLUMNS) * 280) / gameStore.ratioResolution,\r\n            y: ((index % ROWS) * 260) / gameStore.ratioResolution,\r\n          })\r\n        )\r\n      }\r\n    )\r\n\r\n    this.add(this.buttons)\r\n    params.scene.add.existing(this)\r\n  }\r\n\r\n  public getButton = (code: Code): KeyboardPasswordButton | undefined =>\r\n    this.buttons.find(button => button.code === code)\r\n}\r\n","import { ContainerConstructor } from '../../../utils/interfaces'\r\nimport gameStore from '../../../store/GameStore'\r\nimport { Emitter } from '../../manager/GameManager'\r\nimport { GameEvents } from '../../../utils/enums'\r\nimport { List } from '../../../utils/extensions'\r\nimport { scenesKeys } from '../../../utils/constants'\r\nimport PasswordGameScene from '../../scenes/action/PasswordGameScene'\r\nimport { gameWait } from '../../../utils/functions'\r\n\r\nconst passwordCharMap = {\r\n  1: -100,\r\n  2: -60,\r\n  3: -20,\r\n  4: 20,\r\n  5: 60,\r\n}\r\n\r\nexport default class ComputerPasswordScreen extends Phaser.GameObjects\r\n  .Container {\r\n  public readonly screen: Phaser.GameObjects.Sprite\r\n  private stars: List<Phaser.GameObjects.Sprite> = new List()\r\n\r\n  constructor(params: ContainerConstructor) {\r\n    super(params.scene, params.x, params.y)\r\n    this.screen = this.createScreenSprite()\r\n    this.add(this.screen)\r\n    const passwordGame = this.scene.scene.get(\r\n      scenesKeys.PasswordGame\r\n    ) as PasswordGameScene\r\n\r\n    Emitter.once(GameEvents.KeyboardPasswordButtonClicked, () => {\r\n      this.screen.setTexture('mdp_screen_2')\r\n    })\r\n    Emitter.on(GameEvents.KeyboardPasswordButtonClicked, async () => {\r\n      if (passwordGame.typedPassword.length < passwordGame.password.length) {\r\n        this.addStarChar(passwordGame.typedPassword.length)\r\n      } else if (\r\n        passwordGame.typedPassword.length === passwordGame.password.length\r\n      ) {\r\n        this.addStarChar(passwordGame.typedPassword.length)\r\n        await gameWait(this.scene.time, 30)\r\n        this.remove(this.stars)\r\n      }\r\n    })\r\n    params.scene.add.existing(this)\r\n  }\r\n\r\n  private addStarChar = (passwordCount: number): void => {\r\n    this.stars.push(this.createStar(passwordCharMap[passwordCount]))\r\n    this.add(this.stars.last())\r\n  }\r\n\r\n  private createStar = (offset: number): Phaser.GameObjects.Sprite => {\r\n    const sprite = this.scene.add.sprite(offset, -150, 'mdp_star')\r\n    sprite\r\n      .setOrigin(0.5, 1)\r\n      .setScale(1 / gameStore.ratioResolution, 1 / gameStore.ratioResolution)\r\n\r\n    return sprite\r\n  }\r\n\r\n  private createScreenSprite = (): Phaser.GameObjects.Sprite => {\r\n    const sprite = this.scene.add.sprite(0, 0, 'mdp_screen_1')\r\n    sprite\r\n      .setOrigin(0.5, 1)\r\n      .setScale(1 / gameStore.ratioResolution, 1 / gameStore.ratioResolution)\r\n\r\n    return sprite\r\n  }\r\n}\r\n","import { scenesKeys } from '../../../utils/constants'\r\nimport gameManager, { Emitter } from '../../manager/GameManager'\r\nimport MinigameScene from '../MinigameScene'\r\nimport KeyboardContainer from '../../objects/password-game/KeyboardContainer'\r\nimport KeyboardPasswordButton, {\r\n  Code,\r\n} from '../../objects/password-game/KeyboardPasswordButton'\r\nimport { gameWait, shuffle } from '../../../utils/functions'\r\nimport { GameEvents } from '../../../utils/enums'\r\nimport ComputerPasswordScreen from '../../objects/password-game/ComputerPasswordScreen'\r\nimport gameStore from '../../../store/GameStore'\r\n\r\nconst PASSWORD_DISPLAY_TIME = 3000\r\nconst PAW_DISPLAY_TIME = 180\r\n\r\nconst EASY_PASSWORD_LENGTH = 3\r\nconst MEDIUM_PASSWORD_LENGTH = 4\r\nconst HARD_PASSWORD_LENGTH = 5\r\n\r\nconst SOUND_PASSWORD_INVALID = 'error'\r\nconst SOUND_KEYBOARD_BUTTON = 'beep'\r\n\r\nexport default class PasswordGameScene extends MinigameScene {\r\n  public password: Code[] = []\r\n  public typedPassword: Code[] = []\r\n  private keyboard?: KeyboardContainer\r\n  private computerScreen?: ComputerPasswordScreen\r\n\r\n  constructor() {\r\n    super({\r\n      key: scenesKeys.PasswordGame,\r\n    })\r\n  }\r\n\r\n  public create = async () => {\r\n    super.create()\r\n    gameManager.suspendMinigame()\r\n    this.typedPassword = []\r\n    this.password = this.createPassword()\r\n    await this.playIntroduction()\r\n    gameManager.resumeMinigame()\r\n    this.computerScreen = new ComputerPasswordScreen({\r\n      scene: this,\r\n      x: window.innerWidth / 2,\r\n      y: window.innerHeight - 200,\r\n    })\r\n    this.keyboard = new KeyboardContainer({\r\n      scene: this,\r\n      y: window.innerHeight - 220,\r\n      x: window.innerWidth / 2,\r\n    })\r\n    this.keyboard.x -= this.keyboard.getBounds().width / 2\r\n  }\r\n\r\n  public update = (time: number, delta: number): void => {}\r\n\r\n  protected initListeners(): void {\r\n    super.initListeners()\r\n    Emitter.on(GameEvents.KeyboardPasswordButtonClicked, async (code: Code) => {\r\n      if (this.typedPassword.length === this.password.length) {\r\n        return\r\n      }\r\n      gameManager.audio.playSfx(SOUND_KEYBOARD_BUTTON)\r\n      this.typedPassword.push(code)\r\n      if (this.typedPassword.length <= this.password.length) {\r\n        const button = this.keyboard!.getButton(code)\r\n        const texture = button!.texture\r\n        if (!this.game.device.os.desktop) {\r\n          button!.setTexture(`${texture.key}_hover`)\r\n        }\r\n        const paw = this.add\r\n          .sprite(button!.getBounds().x, button!.getBounds().y, 'mdp_paw')\r\n          .setScale(1 / gameStore.ratioResolution)\r\n          .setOrigin(-0.5, -0.25)\r\n        gameWait(this.time, PAW_DISPLAY_TIME).then(() => {\r\n          if (!this.game.device.os.desktop) {\r\n            button!.setTexture(`${texture.key}`)\r\n          }\r\n          paw.destroy()\r\n        })\r\n      }\r\n      if (\r\n        this.typedPassword.length === this.password.length &&\r\n        this.password.every(\r\n          (value, index) => this.typedPassword[index] === value\r\n        )\r\n      ) {\r\n        gameManager.suspendMinigame()\r\n        this.computerScreen!.screen.setDepth(1000).anims.play(\r\n          'mdp_valid_animation'\r\n        )\r\n        await gameWait(this.time, 2000)\r\n        this.onSuccess()\r\n      } else if (\r\n        this.typedPassword.length === this.password.length &&\r\n        !this.password.every(\r\n          (value, index) => this.typedPassword[index] === value\r\n        )\r\n      ) {\r\n        gameManager.suspendMinigame()\r\n        this.computerScreen!.screen.setDepth(1000).anims.play(\r\n          'mdp_nope_animation'\r\n        )\r\n        gameManager.audio.playSfx(SOUND_PASSWORD_INVALID, {\r\n          volume: 0.4,\r\n          delay: 0.1,\r\n        })\r\n        gameWait(this.time, 2000).then(() => {\r\n          this.onFailure()\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  private playIntroduction = async () => {\r\n    return new Promise(resolve => {\r\n      const buttons: KeyboardPasswordButton[] = []\r\n      const animation = this.scene.scene.add\r\n        .sprite(window.innerWidth / 2, window.innerHeight, 'mdp_paper')\r\n        .setScale(1 / gameStore.ratioResolution)\r\n        .setOrigin(0.5, 1)\r\n        .anims.play('mdp_paper_animation')\r\n\r\n      animation.on('animationcomplete', async () => {\r\n        this.password.forEach((code, index) => {\r\n          buttons.push(\r\n            new KeyboardPasswordButton({\r\n              scene: this,\r\n              style: 'symbol',\r\n              code: code as Code,\r\n              x:\r\n                window.innerWidth / 2 -\r\n                115 +\r\n                (index * 160) / gameStore.ratioResolution,\r\n              y: window.innerHeight - 240,\r\n            }).setOrigin(0.5, 1)\r\n          )\r\n        })\r\n\r\n        await gameWait(this.time, PASSWORD_DISPLAY_TIME)\r\n        animation.destroy()\r\n        buttons.forEach(button => button.destroy())\r\n        resolve()\r\n      })\r\n    })\r\n  }\r\n\r\n  private createPassword = (): Code[] => {\r\n    let password = shuffle(['◻', '▲', '|||', '☰', 'O', 'U'])\r\n    if (gameStore.difficulty <= 3) {\r\n      password = password.slice(0, EASY_PASSWORD_LENGTH)\r\n    } else if (gameStore.difficulty <= 6) {\r\n      password = password.slice(0, MEDIUM_PASSWORD_LENGTH)\r\n    } else {\r\n      password = password.slice(0, HARD_PASSWORD_LENGTH)\r\n    }\r\n    return Array.from(password).reduce(\r\n      (acc, value, index) => {\r\n        if (index <= 4) {\r\n          acc.push(value as Code)\r\n        }\r\n\r\n        return acc\r\n      },\r\n      [] as Code[]\r\n    )\r\n  }\r\n}\r\n","import { scenesKeys } from '../../utils/constants'\r\nimport BaseScene from './BaseScene'\r\nimport { gameWait } from '../../utils/functions'\r\nimport gameManager from '../manager/GameManager'\r\n\r\nconst SOUND_LOST = 'hit'\r\nconst SOUND_WIN = 'success'\r\nconst DISPLAY_TIME = 3000\r\n\r\nexport default class PostMinigameScene extends BaseScene {\r\n  constructor() {\r\n    super({\r\n      key: scenesKeys.PostMinigameScene,\r\n    })\r\n  }\r\n\r\n  public create = async () => {\r\n    super.create()\r\n    this.createFillerGraphics()\r\n    const { hasTokiJustLost, isTokiDead } = gameManager\r\n\r\n    if (hasTokiJustLost) {\r\n      gameManager.audio.playSfx(SOUND_LOST, { volume: 0.2, delay: 0.5 })\r\n    } else {\r\n      gameManager.audio.playSfx(SOUND_WIN, { volume: 0.2, delay: 0.3 })\r\n    }\r\n\r\n    await gameWait(this.time, DISPLAY_TIME)\r\n    gameManager.resetTokiStatus()\r\n\r\n    if (isTokiDead) {\r\n      gameManager.loadDeathscreen()\r\n    } else {\r\n      gameManager.loadNextMinigame()\r\n    }\r\n  }\r\n\r\n  private createFillerGraphics = (): void => {\r\n    const graphics = this.add.graphics()\r\n    graphics.fillStyle(0xff3300, 0)\r\n    graphics.fillRect(100, 200, 600, 300)\r\n    graphics.fillRect(100, 100, 100, 100)\r\n    this.add.text(-100, -100, this.scene.key)\r\n  }\r\n}\r\n","import { scenesKeys } from '../../utils/constants'\r\nimport BaseScene from './BaseScene'\r\n\r\nexport default class DeathscreenScene extends BaseScene {\r\n  constructor() {\r\n    super({\r\n      key: scenesKeys.Deathscreen,\r\n    })\r\n  }\r\n\r\n  public create(): void {\r\n    super.create()\r\n    const graphics = this.add.graphics()\r\n    graphics.fillStyle(0xff3300, 1)\r\n    graphics.fillRect(100, 200, 600, 300)\r\n    graphics.fillRect(100, 100, 100, 100)\r\n    this.add.text(120, 110, this.scene.key)\r\n  }\r\n}\r\n","export const yellow = '#fcdb73'\r\nexport const blue = '#1334ff'\r\nexport const pink = '#f99bf3'\r\nexport const green = '#6adeb8'\r\n\r\nexport const orange = '#ff6b35'\r\nexport const lightRed = '#ff5a5a'\r\nexport const red = '#dc103c'\r\n\r\nexport const white = '#ffffff'\r\nexport const lightGray = '#cecdd0'\r\nexport const mediumGray = '#948d9b'\r\nexport const darkGray = '#4d4851'\r\nexport const black = '#28252a'\r\n\r\nexport default [\r\n  yellow,\r\n  blue,\r\n  pink,\r\n  green,\r\n  orange,\r\n  lightRed,\r\n  red,\r\n  white,\r\n  lightGray,\r\n  mediumGray,\r\n  darkGray,\r\n  black,\r\n]\r\n","import {\r\n  SpamGameScene,\r\n  PasswordGameScene,\r\n  SandwichGameScene,\r\n  BootScene,\r\n  DeathscreenScene,\r\n  HomescreenScene,\r\n  PostMinigameScene,\r\n  SplashscreenScene,\r\n} from '../game/scenes'\r\nimport { GameBackgroundColor } from './types'\r\nimport { green } from './colors'\r\n\r\nexport interface HFLGameConfig {\r\n  suspended: boolean\r\n  fade: boolean\r\n  minigameDuration: number\r\n  backgroundColor: GameBackgroundColor\r\n  fadeColor: string\r\n}\r\n\r\nexport const gameConfig: GameConfig = {\r\n  antialias: false,\r\n  backgroundColor: green,\r\n  input: {\r\n    gamepad: false,\r\n    keyboard: true,\r\n    mouse: true,\r\n    touch: true,\r\n  },\r\n  physics: {\r\n    arcade: {\r\n      debug: true,\r\n      gravity: { y: 0 },\r\n    },\r\n    default: 'arcade',\r\n  },\r\n  title: 'Harder, Faster, Looser',\r\n  version: '1.0',\r\n  width: window.innerWidth,\r\n  height: window.innerHeight,\r\n  zoom: 3,\r\n  parent: 'game',\r\n  scene: [\r\n    BootScene,\r\n    SplashscreenScene,\r\n    HomescreenScene,\r\n\r\n    SpamGameScene,\r\n    SandwichGameScene,\r\n    PasswordGameScene,\r\n\r\n    PostMinigameScene,\r\n    DeathscreenScene,\r\n  ],\r\n  type: Phaser.AUTO,\r\n  pixelArt: true,\r\n}\r\n","import { TweenLite } from 'gsap'\r\nimport { promiseAnimation } from './functions'\r\n\r\nexport const appear = (\r\n  $el: Element,\r\n  duration: number = 0.2,\r\n  delay: number = 0\r\n) => {\r\n  return promiseAnimation(\r\n    TweenLite.to($el, duration, {\r\n      opacity: 1,\r\n    }).delay(delay)\r\n  )\r\n}\r\n\r\nexport const disappear = (\r\n  $el: Element,\r\n  duration: number = 0.2,\r\n  delay: number = 0\r\n) => {\r\n  return promiseAnimation(\r\n    TweenLite.to($el, duration, {\r\n      opacity: 0,\r\n    }).delay(delay)\r\n  )\r\n}\r\n","import { GameCategory } from '../../utils/enums'\r\nimport { categoriesProbability, scenesKeys } from '../../utils/constants'\r\nimport { List } from '../../utils/extensions'\r\nimport gameManager from './GameManager'\r\n\r\ninterface IGames {\r\n  [category: string]: List<string>\r\n}\r\n\r\nclass MinigameManager {\r\n  public currentCategory: GameCategory = GameCategory.Action\r\n  private lastGame?: string\r\n\r\n  private games: IGames = {\r\n    [GameCategory.Action]: new List<string>([\r\n      scenesKeys.SpamGame,\r\n      scenesKeys.SandwichGame,\r\n      scenesKeys.PasswordGame,\r\n    ]),\r\n    [GameCategory.Waiting]: new List<string>([]),\r\n  }\r\n\r\n  private playedGames: IGames = {\r\n    [GameCategory.Action]: new List<string>(),\r\n    [GameCategory.Waiting]: new List<string>(),\r\n  }\r\n\r\n  public pickNextGameKey(): string {\r\n    let selectedCategory: GameCategory\r\n    selectedCategory = this.pickRandomCategory(Math.random())\r\n\r\n    if (\r\n      this.currentCategory === GameCategory.Waiting &&\r\n      selectedCategory === GameCategory.Waiting\r\n    ) {\r\n      while (selectedCategory === GameCategory.Waiting) {\r\n        selectedCategory = this.pickRandomCategory(Math.random())\r\n      }\r\n    }\r\n\r\n    this.currentCategory = selectedCategory\r\n    console.log(this.currentCategory)\r\n\r\n    return this.pickGameKey(selectedCategory)\r\n  }\r\n\r\n  public startGame = async (key: string) => {\r\n    console.log('picking ' + key)\r\n    let game: string | undefined\r\n    let category: string | undefined\r\n    for (const gameCategory in this.games) {\r\n      if (this.games.hasOwnProperty(gameCategory)) {\r\n        game = this.games[gameCategory].find(gameKey => gameKey === key)\r\n        if (game) {\r\n          category = gameCategory\r\n        }\r\n      }\r\n    }\r\n\r\n    if (category && key) {\r\n      if (this.playedGames[category].length === this.games[category].length) {\r\n        this.playedGames[category].clear()\r\n      }\r\n\r\n      if (!this.playedGames[category].has(key)) {\r\n        this.playedGames[category].push(key)\r\n      } else {\r\n        key = this.games[category].random()\r\n      }\r\n\r\n      if (this.lastGame && this.lastGame === key) {\r\n        while (key === this.lastGame) {\r\n          key = this.games[category].random()\r\n        }\r\n      }\r\n\r\n      this.lastGame = key\r\n\r\n      await gameManager.startScene(key)\r\n    }\r\n  }\r\n\r\n  public pickGameKey(category: GameCategory): string {\r\n    console.log('picking ' + category)\r\n    let game = this.games[category].random()\r\n\r\n    if (this.playedGames[category].length === this.games[category].length) {\r\n      this.playedGames[category].clear()\r\n    }\r\n\r\n    if (!this.playedGames[category].has(game)) {\r\n      this.playedGames[category].push(game)\r\n    } else {\r\n      game = this.games[category].random()\r\n    }\r\n\r\n    if (this.lastGame && this.lastGame === game) {\r\n      while (game === this.lastGame) {\r\n        game = this.games[category].random()\r\n      }\r\n    }\r\n\r\n    this.lastGame = game\r\n\r\n    return game\r\n  }\r\n\r\n  private pickRandomCategory(random: number): GameCategory {\r\n    if (\r\n      this.games[GameCategory.Waiting].length > 0 &&\r\n      random < categoriesProbability[GameCategory.Waiting]\r\n    ) {\r\n      return GameCategory.Waiting\r\n    } else if (\r\n      this.games[GameCategory.Action].length > 0 &&\r\n      random >= categoriesProbability[GameCategory.Waiting] &&\r\n      categoriesProbability[GameCategory.Action]\r\n    ) {\r\n      return GameCategory.Action\r\n    }\r\n\r\n    return GameCategory.Action\r\n  }\r\n}\r\n\r\nconst minigameManager = new MinigameManager()\r\n\r\nexport default minigameManager\r\n","import { GameManager } from './GameManager'\r\n\r\nconst BG_MUSIC = 'bg'\r\nconst BG_VOLUME = 0.1\r\nconst SFX_VOLUME = 0.05\r\n\r\ntype ExtraConfig = Partial<SoundConfig & SoundMarker>\r\n\r\nexport default class AudioManager {\r\n  private sound: Phaser.Sound.BaseSoundManager\r\n\r\n  constructor(private gm: GameManager) {\r\n    this.sound = gm.game.sound\r\n    this.sound.pauseOnBlur = false\r\n  }\r\n\r\n  public playSfx = (key: string, extra?: ExtraConfig): void => {\r\n    this.sound.play(key, {\r\n      ...extra,\r\n      volume: (extra && extra.volume) || SFX_VOLUME,\r\n    })\r\n  }\r\n\r\n  public playBg = (extra?: ExtraConfig): void => {\r\n    this.sound.play(BG_MUSIC, {\r\n      ...extra,\r\n      volume: (extra && extra.volume) || BG_VOLUME,\r\n      loop: true,\r\n    })\r\n  }\r\n}\r\n","import { gameConfig, HFLGameConfig } from '../../utils/game'\r\nimport gameStore from '../../store/GameStore'\r\nimport { BaseEvents, GameEvents, GameState } from '../../utils/enums'\r\nimport { minigameSuffix, scenesKeys } from '../../utils/constants'\r\nimport { EventEmitter } from 'events'\r\nimport { appear, disappear } from '../../utils/anims'\r\nimport { GameBackgroundColor } from '../../utils/types'\r\nimport { gameBackgroundColorToCss } from '../../utils/functions'\r\nimport minigameManager from './MinigameManager'\r\nimport AudioManager from './AudioManager'\r\n\r\nexport const Emitter = new EventEmitter()\r\n\r\nexport class GameManager {\r\n  public game: Phaser.Game = new Phaser.Game(gameConfig)\r\n  public audio: AudioManager = new AudioManager(this)\r\n  public activeScene?: Phaser.Scene\r\n  public gameUI?: HTMLDivElement\r\n  public gameFader?: HTMLDivElement\r\n\r\n  constructor() {\r\n    Emitter.on(BaseEvents.SceneInit, (scene: Phaser.Scene) => {\r\n      this.activeScene = scene\r\n    })\r\n  }\r\n\r\n  public suspendMinigame = (): void => {\r\n    gameStore.changeConfig({\r\n      suspended: true,\r\n    })\r\n  }\r\n\r\n  public resumeMinigame = (): void => {\r\n    gameStore.changeConfig({\r\n      suspended: false,\r\n    })\r\n  }\r\n\r\n  public loadSplashscreen = async () => {\r\n    await this.startScene(scenesKeys.Splashscreen)\r\n    gameStore.changeState(GameState.Splashscreen)\r\n  }\r\n\r\n  public loadHomescreen = async () => {\r\n    await this.startScene(scenesKeys.Homescreen)\r\n    gameStore.changeState(GameState.Homescreen)\r\n  }\r\n\r\n  public loadMinigame = async (minigameKey: string) => {\r\n    gameManager.suspendMinigame()\r\n    await minigameManager.startGame(minigameKey)\r\n  }\r\n\r\n  public loadNextMinigame = async () => {\r\n    gameManager.suspendMinigame()\r\n    await this.startScene(minigameManager.pickNextGameKey())\r\n  }\r\n\r\n  public loadPostMinigame = async () => {\r\n    gameManager.suspendMinigame()\r\n    await this.startScene(scenesKeys.PostMinigameScene)\r\n  }\r\n\r\n  public loadDeathscreen = async () => {\r\n    await this.startScene(scenesKeys.Deathscreen)\r\n  }\r\n\r\n  public startScene = async (\r\n    key: string,\r\n    config: HFLGameConfig = gameStore.config,\r\n    optionnalData?: any\r\n  ) => {\r\n    Object.keys(GameEvents).forEach(event => {\r\n      Emitter.removeAllListeners(GameEvents[event])\r\n    })\r\n    console.log('STARTED ' + key)\r\n    if (this.gameFader && config.fade) {\r\n      gameStore.startTransitionning()\r\n      await appear(this.gameFader)\r\n      this.game.scene.scenes\r\n        .filter(scene => scene.scene.key !== key)\r\n        .forEach(scene => scene.scene.stop(scene.scene.key))\r\n      gameManager.resumeMinigame()\r\n      this.game.scene.start(key, optionnalData)\r\n      gameStore.changeState(\r\n        key.includes(minigameSuffix) ? GameState.Minigame : (key as GameState)\r\n      )\r\n      gameStore.regenerateUiKey()\r\n      gameStore.stopTransitionning()\r\n      await disappear(this.gameFader)\r\n      if (gameStore.paused) {\r\n        gameStore.resume()\r\n      }\r\n    } else {\r\n      this.game.scene.scenes\r\n        .filter(scene => scene.scene.key !== key)\r\n        .forEach(scene => scene.scene.stop(scene.scene.key))\r\n      gameStore.startTransitionning()\r\n      gameManager.resumeMinigame()\r\n      this.game.scene.start(key, optionnalData)\r\n      gameStore.stopTransitionning()\r\n      gameStore.changeState(\r\n        key.includes(minigameSuffix) ? GameState.Minigame : (key as GameState)\r\n      )\r\n      gameStore.regenerateUiKey()\r\n      if (gameStore.paused) {\r\n        gameStore.resume()\r\n      }\r\n    }\r\n  }\r\n\r\n  public pause = (): void => {\r\n    if (!this.activeScene) {\r\n      return\r\n    }\r\n    this.activeScene!.scene.pause()\r\n    gameStore.pause()\r\n  }\r\n\r\n  public resume = (): void => {\r\n    if (!this.activeScene) {\r\n      return\r\n    }\r\n    this.activeScene!.scene.resume()\r\n    gameStore.resume()\r\n  }\r\n\r\n  public changeBackgroundColor = (color: GameBackgroundColor): void => {\r\n    if (this.activeScene) {\r\n      this.activeScene.cameras.main.setBackgroundColor(\r\n        gameBackgroundColorToCss(color)\r\n      )\r\n    }\r\n  }\r\n\r\n  public restartActiveScene = async (\r\n    config: HFLGameConfig = gameStore.config,\r\n    data?: object\r\n  ) => {\r\n    if (this.activeScene) {\r\n      await this.startScene(this.activeScene.scene.key, config, data)\r\n    }\r\n  }\r\n\r\n  public togglePause = (): void => {\r\n    if (!this.activeScene) {\r\n      return\r\n    }\r\n    if (gameStore.paused) {\r\n      this.activeScene!.sound.setDetune(0)\r\n      this.activeScene!.scene.resume()\r\n      gameStore.resume()\r\n    } else {\r\n      this.activeScene!.sound.setDetune(-1200)\r\n      this.activeScene!.scene.pause()\r\n      gameStore.pause()\r\n    }\r\n\r\n    console.log('TOGGLE PAUSE')\r\n  }\r\n\r\n  get hasTokiJustLost(): boolean {\r\n    return (\r\n      gameStore.hasJustLoosedBrain ||\r\n      gameStore.hasJustLoosedHeart ||\r\n      gameStore.hasJustStress\r\n    )\r\n  }\r\n\r\n  public resetTokiStatus = (): void => {\r\n    gameStore.resetTokiStatus()\r\n  }\r\n\r\n  public looseLife = (): void => {\r\n    gameStore.looseLife()\r\n  }\r\n\r\n  get isTokiDead() {\r\n    return !gameStore.status.hasHeart\r\n  }\r\n}\r\n\r\nconst gameManager = new GameManager()\r\nexport default gameManager\r\n","import { action, observable } from 'mobx'\r\nimport { GameState } from '../utils/enums'\r\nimport { GameSettings } from '../utils/interfaces'\r\nimport { HFLGameConfig } from '../utils/game'\r\nimport gameManager from '../game/manager/GameManager'\r\nimport { green } from '../utils/colors'\r\n\r\ninterface TokiStatus {\r\n  hasStress: boolean\r\n  hasJustStress: boolean\r\n  hasBrain: boolean\r\n  hasJustBrain: boolean\r\n  hasHeart: boolean\r\n  hasJustHeart: boolean\r\n}\r\n\r\nclass GameStore {\r\n  @observable public state: GameState = GameState.Splashscreen\r\n  @observable public difficulty: number = 1\r\n  @observable public status: TokiStatus = {\r\n    hasStress: false,\r\n    hasBrain: true,\r\n    hasHeart: true,\r\n    hasJustStress: false,\r\n    hasJustBrain: false,\r\n    hasJustHeart: false,\r\n  }\r\n\r\n  @observable public elapsed: number = 0\r\n  @observable public paused: boolean = false\r\n  @observable public settings: GameSettings = { volume: 1 }\r\n  @observable public config: HFLGameConfig = {\r\n    suspended: false,\r\n    fade: true,\r\n    fadeColor: green,\r\n    backgroundColor: green,\r\n    minigameDuration: 500,\r\n  }\r\n  @observable public ratioResolution: number = 3\r\n  @observable public transitionning: boolean = false\r\n  @observable\r\n  public uiKey: string = new Phaser.Math.RandomDataGenerator().uuid()\r\n\r\n  @action public increaseElapsed = (delta: number = 1): void => {\r\n    this.elapsed += delta\r\n  }\r\n\r\n  @action public regenerateUiKey = (): void => {\r\n    this.uiKey = new Phaser.Math.RandomDataGenerator().uuid()\r\n  }\r\n\r\n  @action public changeConfig = (newConfig: Partial<HFLGameConfig>): void => {\r\n    this.config = { ...this.config, ...newConfig }\r\n    if (newConfig.backgroundColor) {\r\n      gameManager.changeBackgroundColor(this.config.backgroundColor)\r\n    }\r\n  }\r\n\r\n  @action public looseLife = (): void => {\r\n    if (!this.status.hasStress) {\r\n      this.status.hasStress = true\r\n      this.status.hasJustStress = true\r\n      this.status.hasJustBrain = false\r\n      this.status.hasJustHeart = false\r\n      this.status.hasJustStress = true\r\n    } else if (this.status.hasBrain) {\r\n      this.status.hasBrain = false\r\n      this.status.hasJustStress = false\r\n      this.status.hasJustBrain = true\r\n      this.status.hasJustHeart = false\r\n    } else if (this.status.hasHeart) {\r\n      this.status.hasHeart = false\r\n      this.status.hasJustStress = false\r\n      this.status.hasJustBrain = false\r\n      this.status.hasJustHeart = true\r\n    }\r\n  }\r\n\r\n  @action public changeState = (newState: GameState): void => {\r\n    this.state = newState\r\n  }\r\n\r\n  @action public increaseDifficulty = (step: number = 0.5): void => {\r\n    this.difficulty += step\r\n  }\r\n\r\n  @action public changeRatioResolution = (innerWidth: number): void => {\r\n    this.ratioResolution = 2\r\n  }\r\n\r\n  @action public togglePause = (): void => {\r\n    if (this.transitionning) {\r\n      return\r\n    }\r\n    this.paused = !this.paused\r\n  }\r\n\r\n  @action public pause = (): void => {\r\n    if (this.transitionning) {\r\n      return\r\n    }\r\n    this.paused = true\r\n  }\r\n\r\n  @action public resume = (): void => {\r\n    if (this.transitionning) {\r\n      return\r\n    }\r\n    this.paused = false\r\n  }\r\n\r\n  @action public startTransitionning = (): void => {\r\n    this.transitionning = true\r\n  }\r\n\r\n  @action public stopTransitionning = (): void => {\r\n    this.transitionning = false\r\n  }\r\n\r\n  @action public toggleTransition = (): void => {\r\n    this.transitionning = !this.transitionning\r\n  }\r\n\r\n  @action public resetTokiStatus = (): void => {\r\n    this.status.hasJustStress = false\r\n    this.status.hasJustBrain = false\r\n    this.status.hasJustHeart = false\r\n  }\r\n\r\n  get hasStress() {\r\n    return this.status.hasStress\r\n  }\r\n\r\n  get hasLoosedBrain() {\r\n    return !this.status.hasBrain\r\n  }\r\n\r\n  get hasLoosedHeart() {\r\n    return !this.status.hasHeart\r\n  }\r\n\r\n  get hasJustStress() {\r\n    return this.status.hasJustStress\r\n  }\r\n\r\n  get hasJustLoosedBrain() {\r\n    return this.status.hasJustBrain\r\n  }\r\n\r\n  get hasJustLoosedHeart() {\r\n    return this.status.hasJustHeart\r\n  }\r\n\r\n  get secondsElapsed() {\r\n    return (this.elapsed / 1000) * 16\r\n  }\r\n\r\n  get timeElapsed() {\r\n    return new Date(this.secondsElapsed * 1000).toLocaleTimeString('fr', {\r\n      minute: '2-digit',\r\n      second: '2-digit',\r\n    })\r\n  }\r\n}\r\n\r\nconst gameStore = new GameStore()\r\nexport default gameStore\r\n","import React, { FunctionComponent } from 'react'\n\nconst HomescreenUI: FunctionComponent = () => {\n  return (\n    <div className=\"homescreen-ui\">\n      <h1>Je suis l'ui du homescreen</h1>\n    </div>\n  )\n}\n\nexport default HomescreenUI\n","import React, { FunctionComponent } from 'react'\n\nconst SplashscreenUI: FunctionComponent = () => {\n  return (\n    <div className=\"splashscreen-ui\">\n      <h1>Je suis l'ui du splashscreen</h1>\n    </div>\n  )\n}\n\nexport default SplashscreenUI\n","import React, { FunctionComponent, useEffect, useRef, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport gameManager, { Emitter } from '../../../game/manager/GameManager'\r\nimport { GameEvents } from '../../../utils/enums'\r\nimport gameStore from '../../../store/GameStore'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nconst ProgressOuter = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  background: white;\r\n`\r\n\r\nconst ProgressInner = styled.div`\r\n  height: 40px;\r\n  will-change: width;\r\n  background: red;\r\n`\r\n\r\nconst RemainingTime: FunctionComponent = () => {\r\n  const {\r\n    config: { minigameDuration, suspended },\r\n  } = gameStore\r\n  const [remaining, setRemaining] = useState(0)\r\n  const button = useRef<HTMLButtonElement>(null)\r\n  useEffect(() => {\r\n    gameManager.activeScene!.time.addEvent({\r\n      callback: () => {\r\n        if (button.current) {\r\n          button.current.click()\r\n        }\r\n      },\r\n      delay: 16,\r\n      repeat: -1,\r\n    })\r\n  }, [])\r\n\r\n  if (remaining >= minigameDuration!) {\r\n    gameManager.activeScene!.time.removeAllEvents()\r\n    Emitter.emit(GameEvents.RemainingTimeOver)\r\n    setRemaining(minigameDuration - 0.00001)\r\n  }\r\n\r\n  const onClick = () => {\r\n    if (!suspended) {\r\n      gameStore.increaseElapsed()\r\n      setRemaining(remaining + 1)\r\n    }\r\n  }\r\n\r\n  const progress = 100 - (remaining / minigameDuration) * 100\r\n\r\n  return (\r\n    <ProgressOuter className=\"progress remaining-time\">\r\n      <button\r\n        ref={button}\r\n        onClick={onClick}\r\n        style={{ pointerEvents: 'all', display: 'none' }}\r\n      />\r\n      <ProgressInner\r\n        style={{ width: `${progress}%` }}\r\n        className=\"progress inner\"\r\n      >\r\n        <span style={{ display: 'none' }} aria-hidden={true}>\r\n          {progress}%\r\n        </span>\r\n      </ProgressInner>\r\n    </ProgressOuter>\r\n  )\r\n}\r\n\r\nexport default observer(RemainingTime)\r\n","import React, { FunctionComponent } from 'react'\r\nimport styled from 'styled-components'\r\nimport RemainingTime from './RemainingTime'\r\nimport { minigameToolbarHeight } from '../../../utils/constants'\r\n\r\nconst Div = styled.div`\r\n  background: rgb(55, 63, 71);\r\n  height: ${minigameToolbarHeight}px;\r\n  top: 0;\r\n  position: absolute;\r\n  z-index: 0;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 20px;\r\n`\r\n\r\nconst MinigameToolbar: FunctionComponent = props => {\r\n  return (\r\n    <Div {...props} className=\"minigame-toolbar\">\r\n      <RemainingTime />\r\n    </Div>\r\n  )\r\n}\r\n\r\nexport default MinigameToolbar\r\n","import React, { FunctionComponent } from 'react'\nimport MinigameToolbar from './games/MinigameToolbar'\n\nconst MinigameUI: FunctionComponent = () => {\n  return (\n    <div className=\"minigame-ui\">\n      <MinigameToolbar />\n    </div>\n  )\n}\n\nexport default MinigameUI\n","import React, { Component } from 'react'\r\nimport { randomString } from '../../utils/functions'\r\n\r\ninterface Props {\r\n  className?: string\r\n  style?: any\r\n  image: string\r\n  widthFrame: number\r\n  heightFrame: number\r\n  repeat?: number\r\n  isResponsive?: boolean\r\n  steps: number\r\n  scale?: number\r\n  fps: number\r\n  direction?: string\r\n  timeout?: number\r\n  autoplay?: boolean\r\n  loop?: boolean\r\n  startAt?: number\r\n  endAt?: false | number\r\n  background?: string\r\n  backgroundSize?: string\r\n  backgroundRepeat?: string\r\n  backgroundPosition?: string\r\n  getInstance?: (args: any) => void\r\n  onClick?: (args: any) => void\r\n  onDoubleClick?: (args: any) => void\r\n  onMouseMove?: (args: any) => void\r\n  onMouseEnter?: (args: any) => void\r\n  onMouseLeave?: (args: any) => void\r\n  onMouseOver?: (args: any) => void\r\n  onMouseOut?: (args: any) => void\r\n  onMouseDown?: (args: any) => void\r\n  onMouseUp?: (args: any) => void\r\n  onInit?: (args: any) => void\r\n  onResize?: any\r\n  onPlay?: (args: any) => void\r\n  onPause?: (args: any) => void\r\n  onLoopComplete?: any\r\n  onEachFrame?: any\r\n  onEnterFrame?: false | []\r\n}\r\n\r\ntype Direction = 'forward' | 'rewind'\r\n\r\ntype ParamInfo =\r\n  | 'direction'\r\n  | 'frame'\r\n  | 'fps'\r\n  | 'steps'\r\n  | 'width'\r\n  | 'height'\r\n  | 'scale'\r\n  | 'isPlaying'\r\n  | 'isPaused'\r\n  | 'completeLoopCicles'\r\n\r\nclass Spritesheet extends Component<Props> {\r\n  public static defaultProps = {\r\n    className: '',\r\n    style: {},\r\n    isResponsive: true,\r\n    direction: 'forward',\r\n    timeout: 0,\r\n    scale: 1,\r\n    autoplay: true,\r\n    loop: true,\r\n    startAt: 0,\r\n    endAt: false,\r\n    background: '',\r\n    backgroundSize: 'cover',\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundPosition: '',\r\n    repeat: -1,\r\n    getInstance: () => {},\r\n    onClick: () => {},\r\n    onDoubleClick: () => {},\r\n    onMouseMove: () => {},\r\n    onMouseEnter: () => {},\r\n    onMouseLeave: () => {},\r\n    onMouseOver: () => {},\r\n    onMouseOut: () => {},\r\n    onMouseDown: () => {},\r\n    onMouseUp: () => {},\r\n    onInit: () => {},\r\n    onResize: false,\r\n    onPlay: () => {},\r\n    onPause: () => {},\r\n    onLoopComplete: false,\r\n    onEachFrame: false,\r\n    onEnterFrame: false,\r\n  }\r\n\r\n  private intervalSprite: number | boolean\r\n  private isResponsive: boolean\r\n  private startAt: number\r\n  private fps: number\r\n  private steps: number\r\n  private completeLoopCicles: number\r\n  private isPlaying: boolean\r\n  private endAt: number\r\n  private spriteScale: number\r\n  private spriteEl: Element | HTMLElement | number | null\r\n  private direction: Direction\r\n  private frame: number\r\n  private spriteElContainer: any\r\n  private spriteElMove: HTMLElement | Element | null\r\n  private imageSprite: HTMLImageElement | null\r\n  private cols: number | null\r\n  private rows: number | null\r\n  private id: string\r\n\r\n  constructor(props: Props) {\r\n    super(props)\r\n\r\n    const {\r\n      isResponsive,\r\n      startAt,\r\n      endAt,\r\n      fps,\r\n      steps,\r\n      direction,\r\n      scale,\r\n    } = this.props\r\n\r\n    this.id = `spritesheet--${randomString(8)}`\r\n    this.spriteEl = this.spriteElContainer = this.spriteElMove = this.imageSprite = this.cols = this.rows = null\r\n    this.intervalSprite = false\r\n    // @ts-ignore\r\n    this.isResponsive = isResponsive\r\n    // @ts-ignore\r\n    this.startAt = this.setStartAt(startAt)\r\n    // @ts-ignore\r\n    this.endAt = this.setEndAt(endAt)\r\n    this.fps = fps\r\n    this.steps = steps\r\n    this.completeLoopCicles = 0\r\n    this.isPlaying = false\r\n    this.spriteScale = scale!\r\n    this.direction = this.setDirection(direction as Direction)\r\n    this.frame = this.startAt\r\n      ? this.startAt\r\n      : this.direction === 'rewind'\r\n      ? this.steps - 1\r\n      : 0\r\n  }\r\n\r\n  public componentDidMount() {\r\n    this.init()\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    // @ts-ignore\r\n    window.removeEventListener('resize', this.resize)\r\n  }\r\n\r\n  public renderElements = () => {\r\n    const {\r\n      image,\r\n      className,\r\n      style,\r\n      widthFrame,\r\n      heightFrame,\r\n      background,\r\n      backgroundSize,\r\n      backgroundRepeat,\r\n      backgroundPosition,\r\n      onClick,\r\n      onDoubleClick,\r\n      onMouseMove,\r\n      onMouseEnter,\r\n      onMouseLeave,\r\n      onMouseOver,\r\n      onMouseOut,\r\n      onMouseDown,\r\n      onMouseUp,\r\n    } = this.props\r\n\r\n    const containerStyles = {\r\n      position: 'relative',\r\n      overflow: 'hidden',\r\n      width: `${widthFrame}px`,\r\n      height: `${heightFrame}px`,\r\n      transform: `scale(${this.spriteScale})`,\r\n      transformOrigin: '0 0',\r\n      backgroundImage: `url(${background})`,\r\n      backgroundSize,\r\n      backgroundRepeat,\r\n      backgroundPosition,\r\n    }\r\n\r\n    const moveStyles = {\r\n      overflow: 'hidden',\r\n      backgroundRepeat: 'no-repeat',\r\n      display: 'table-cell',\r\n      backgroundImage: `url(${image})`,\r\n      width: `${widthFrame}px`,\r\n      height: `${heightFrame}px`,\r\n      transformOrigin: '0 50%',\r\n    }\r\n\r\n    const elMove = React.createElement('div', {\r\n      className: 'react-responsive-spritesheet-container__move',\r\n      style: moveStyles,\r\n    })\r\n\r\n    const elContainer = React.createElement(\r\n      'div',\r\n      {\r\n        className: 'react-responsive-spritesheet-container',\r\n        style: containerStyles,\r\n      },\r\n      elMove\r\n    )\r\n    const elSprite = React.createElement(\r\n      'div',\r\n      {\r\n        className: `spritesheet ${this.id} ${className}`,\r\n        style,\r\n        // @ts-ignore\r\n        onClick: () => onClick(this.setInstance()),\r\n        // @ts-ignore\r\n        onDoubleClick: () => onDoubleClick(this.setInstance()),\r\n        // @ts-ignore\r\n        onMouseMove: () => onMouseMove(this.setInstance()),\r\n        // @ts-ignore\r\n        onMouseEnter: () => onMouseEnter(this.setInstance()),\r\n        // @ts-ignore\r\n        onMouseLeave: () => onMouseLeave(this.setInstance()),\r\n        // @ts-ignore\r\n        onMouseOver: () => onMouseOver(this.setInstance()),\r\n        // @ts-ignore\r\n        onMouseOut: () => onMouseOut(this.setInstance()),\r\n        // @ts-ignore\r\n        onMouseDown: () => onMouseDown(this.setInstance()),\r\n        // @ts-ignore\r\n        onMouseUp: () => onMouseUp(this.setInstance()),\r\n      },\r\n      elContainer\r\n    )\r\n\r\n    return elSprite\r\n  }\r\n\r\n  public init = () => {\r\n    const {\r\n      image,\r\n      widthFrame,\r\n      heightFrame,\r\n      autoplay,\r\n      getInstance,\r\n      onInit,\r\n    } = this.props\r\n\r\n    const imgLoadSprite = new Image()\r\n    imgLoadSprite.src = image\r\n    imgLoadSprite.onload = () => {\r\n      if (!(document && document.querySelector(`.${this.id}`))) {\r\n        return\r\n      }\r\n      this.imageSprite = imgLoadSprite\r\n      this.cols =\r\n        this.imageSprite.width === widthFrame\r\n          ? 1\r\n          : this.imageSprite.width / widthFrame\r\n      this.rows =\r\n        this.imageSprite.height === heightFrame\r\n          ? 1\r\n          : this.imageSprite.height / heightFrame\r\n      this.spriteEl = document.querySelector(`.${this.id}`)\r\n      this.spriteElContainer = this.spriteEl!.querySelector(\r\n        '.react-responsive-spritesheet-container'\r\n      )\r\n      this.spriteElMove = this.spriteElContainer.querySelector(\r\n        '.react-responsive-spritesheet-container__move'\r\n      )\r\n      this.resize(false)\r\n      // @ts-ignore\r\n      window.addEventListener('resize', this.resize)\r\n      this.moveImage(false)\r\n      setTimeout(() => {\r\n        this.resize(false)\r\n      }, 10)\r\n      if (autoplay) {\r\n        this.play(true)\r\n      }\r\n      const instance = this.setInstance()\r\n      // @ts-ignore\r\n      getInstance(instance)\r\n      // @ts-ignore\r\n      onInit(instance)\r\n    }\r\n\r\n    imgLoadSprite.onerror = () => {\r\n      throw new Error(`Failed to load image ${imgLoadSprite.src}`)\r\n    }\r\n  }\r\n\r\n  public resize = (callback = true) => {\r\n    const { widthFrame, onResize, scale } = this.props\r\n\r\n    if (this.isResponsive) {\r\n      this.spriteScale =\r\n        ((this.spriteEl! as HTMLElement).offsetWidth / widthFrame) * scale!\r\n      this.spriteElContainer.style.transform = `scale(${this.spriteScale})`\r\n      this.spriteElContainer.style.imageRendering = 'pixelated'\r\n      ;(this.spriteEl! as HTMLElement).style.height = `${this.getInfo(\r\n        'height'\r\n      )}px`\r\n      if (callback && onResize) {\r\n        onResize(this.setInstance())\r\n      }\r\n    }\r\n  }\r\n\r\n  public play = (withTimeout = false) => {\r\n    const { onPlay, timeout } = this.props\r\n\r\n    if (!this.isPlaying) {\r\n      setTimeout(\r\n        () => {\r\n          // @ts-ignore\r\n          onPlay(this.setInstance())\r\n          this.setIntervalPlayFunctions()\r\n          this.isPlaying = true\r\n        },\r\n        withTimeout ? timeout : 0\r\n      )\r\n    }\r\n  }\r\n\r\n  public setIntervalPlayFunctions = () => {\r\n    if (this.intervalSprite) {\r\n      // @ts-ignore\r\n      // @ts-ignore\r\n      clearInterval(this.intervalSprite)\r\n    }\r\n    // @ts-ignore\r\n    this.intervalSprite = setInterval(() => {\r\n      if (this.isPlaying) {\r\n        this.moveImage()\r\n      }\r\n    }, 1000 / this.fps)\r\n  }\r\n\r\n  public moveImage = (play = true) => {\r\n    const {\r\n      onEnterFrame,\r\n      onEachFrame,\r\n      loop,\r\n      onLoopComplete,\r\n      repeat,\r\n    } = this.props\r\n\r\n    const currentRow = Math.floor(this.frame / this.cols!)\r\n    const currentCol = this.frame - this.cols! * currentRow\r\n    ;(this.spriteElMove! as HTMLElement).style.backgroundPosition = `-${this\r\n      .props.widthFrame * currentCol}px -${this.props.heightFrame *\r\n      currentRow}px`\r\n\r\n    if (onEnterFrame) {\r\n      onEnterFrame.map((frameAction, i) => {\r\n        // @ts-ignore\r\n        if (frameAction.frame === this.frame && frameAction.callback) {\r\n          // @ts-ignore\r\n          frameAction.callback()\r\n        }\r\n      })\r\n    }\r\n\r\n    if (play) {\r\n      if (this.direction === 'rewind') {\r\n        this.frame -= 1\r\n      } else {\r\n        this.frame += 1\r\n      }\r\n      if (onEachFrame) {\r\n        onEachFrame(this.setInstance())\r\n      }\r\n    }\r\n\r\n    if (this.isPlaying) {\r\n      if (\r\n        (this.direction === 'forward' &&\r\n          (this.frame === this.steps || this.frame === this.endAt)) ||\r\n        (this.direction === 'rewind' &&\r\n          (this.frame === -1 || this.frame === this.endAt))\r\n      ) {\r\n        if (loop) {\r\n          if (onLoopComplete) {\r\n            onLoopComplete(this.setInstance())\r\n          }\r\n          if (repeat === -1) {\r\n            this.completeLoopCicles += 1\r\n            this.frame = this.startAt\r\n              ? this.startAt\r\n              : this.direction === 'rewind'\r\n              ? this.steps - 1\r\n              : 0\r\n          } else if (repeat === 0) {\r\n            this.pause()\r\n          } else {\r\n            this.completeLoopCicles += 1\r\n            this.frame = this.startAt\r\n              ? this.startAt\r\n              : this.direction === 'rewind'\r\n              ? this.steps - 1\r\n              : 0\r\n            if (this.completeLoopCicles === repeat!) {\r\n              this.pause()\r\n            }\r\n          }\r\n        } else {\r\n          this.pause()\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public pause = () => {\r\n    const { onPause } = this.props\r\n\r\n    this.isPlaying = false\r\n    // @ts-ignore\r\n    clearInterval(this.intervalSprite)\r\n    // @ts-ignore\r\n    onPause(this.setInstance())\r\n  }\r\n\r\n  public goToAndPlay = (frame: number): void => {\r\n    this.frame = frame ? frame : this.frame\r\n    this.play()\r\n  }\r\n\r\n  public goToAndPause = (frame: number): void => {\r\n    this.pause()\r\n    this.frame = frame ? frame : this.frame\r\n    this.moveImage()\r\n  }\r\n\r\n  public setStartAt = (frame: number): number => {\r\n    this.startAt = frame ? frame - 1 : 0\r\n    return this.startAt\r\n  }\r\n\r\n  public setEndAt = (frame: number): number => {\r\n    this.endAt = frame\r\n    return this.endAt\r\n  }\r\n\r\n  public setFps(fps: number) {\r\n    this.fps = fps\r\n    this.setIntervalPlayFunctions()\r\n  }\r\n\r\n  public setDirection = (direction: Direction): Direction => {\r\n    this.direction = direction === 'rewind' ? 'rewind' : 'forward'\r\n    return this.direction\r\n  }\r\n\r\n  public getInfo = (param: ParamInfo) => {\r\n    switch (param) {\r\n      case 'direction':\r\n        return this.direction\r\n      case 'frame':\r\n        return this.frame\r\n      case 'fps':\r\n        return this.fps\r\n      case 'steps':\r\n        return this.steps\r\n      case 'width':\r\n        return this.spriteElContainer.getBoundingClientRect().width\r\n      case 'height':\r\n        return this.spriteElContainer.getBoundingClientRect().height\r\n      case 'scale':\r\n        return this.spriteScale\r\n      case 'isPlaying':\r\n        return this.isPlaying\r\n      case 'isPaused':\r\n        return !this.isPlaying\r\n      case 'completeLoopCicles':\r\n        return this.completeLoopCicles\r\n      default:\r\n        throw new Error(\r\n          `Invalid param \\`${param}\\` requested by Spritesheet.getinfo(). See the documentation on https://github.com/danilosetra/react-responsive-spritesheet`\r\n        )\r\n    }\r\n  }\r\n\r\n  public setInstance() {\r\n    return {\r\n      play: this.play,\r\n      pause: this.pause,\r\n      goToAndPlay: this.goToAndPlay,\r\n      goToAndPause: this.goToAndPause,\r\n      setStartAt: this.setStartAt,\r\n      setEndAt: this.setEndAt,\r\n      setFps: this.setFps,\r\n      setDirection: this.setDirection,\r\n      getInfo: this.getInfo,\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return this.renderElements()\r\n  }\r\n}\r\n\r\nexport default Spritesheet\r\n","import React, { FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport gameStore from '../../../store/GameStore'\r\nimport styled from 'styled-components'\r\nimport stress from '../../../assets/sprites/post-minigame/life_1_285_270.png'\r\nimport brain from '../../../assets/sprites/post-minigame/life_2_285_270.png'\r\nimport heart from '../../../assets/sprites/post-minigame/life_3_285_270.png'\r\nimport Spritesheet from '../Spritesheet'\r\n\r\nconst FRAME_WIDTH = 285\r\nconst FRAME_HEIGHT = 270\r\nconst FPS = 8\r\n\r\nconst LivesListInner = styled.ul`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: ${FRAME_WIDTH / 3}px;\r\n  & li {\r\n    margin-bottom: 20px;\r\n  }\r\n`\r\n\r\nconst LivesList: FunctionComponent = () => {\r\n  const {\r\n    hasLoosedBrain,\r\n    hasLoosedHeart,\r\n    hasStress,\r\n    hasJustLoosedBrain,\r\n    hasJustLoosedHeart,\r\n    hasJustStress,\r\n  } = gameStore\r\n  return (\r\n    <LivesListInner>\r\n      <li>\r\n        <Spritesheet\r\n          image={stress}\r\n          widthFrame={FRAME_WIDTH}\r\n          heightFrame={FRAME_HEIGHT}\r\n          steps={8}\r\n          autoplay={hasJustStress}\r\n          startAt={hasStress && !hasJustStress ? 8 : 0}\r\n          fps={FPS}\r\n          repeat={0}\r\n        />\r\n      </li>\r\n      <li>\r\n        <Spritesheet\r\n          image={brain}\r\n          widthFrame={FRAME_WIDTH}\r\n          heightFrame={FRAME_HEIGHT}\r\n          steps={20}\r\n          autoplay={hasJustLoosedBrain}\r\n          startAt={hasLoosedBrain && !hasJustLoosedBrain ? 20 : 0}\r\n          fps={FPS}\r\n          repeat={0}\r\n        />\r\n      </li>\r\n      <li>\r\n        <Spritesheet\r\n          image={heart}\r\n          widthFrame={FRAME_WIDTH}\r\n          heightFrame={FRAME_HEIGHT}\r\n          steps={9}\r\n          autoplay={hasJustLoosedHeart}\r\n          startAt={hasLoosedHeart && !hasJustLoosedHeart ? 9 : 0}\r\n          fps={FPS}\r\n          repeat={0}\r\n        />\r\n      </li>\r\n    </LivesListInner>\r\n  )\r\n}\r\n\r\nexport default observer(LivesList)\r\n","import React, { FunctionComponent } from 'react'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport gameStore from '../../store/GameStore'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { gameBackgroundColorToCss } from '../../utils/functions'\r\nimport LivesContainer from './post-minigame/LivesList'\r\nimport { black } from '../../utils/colors'\r\n\r\ninterface StyledProps {\r\n  backgroundColor?: string\r\n}\r\n\r\nconst show = keyframes`\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n`\r\n\r\nconst PostMinigameUIInner = styled.div<StyledProps>`\r\n  background: ${(props: StyledProps) => props.backgroundColor};\r\n  position: fixed;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  animation: ${show} 0.8s;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst Score = styled.h2`\r\n  margin-bottom: 40px;\r\n  font-size: 36px;\r\n  color: ${black};\r\n`\r\n\r\nconst PostMinigameUI: FunctionComponent = () => {\r\n  const {\r\n    timeElapsed,\r\n    config: { backgroundColor },\r\n  } = gameStore\r\n  return (\r\n    <PostMinigameUIInner\r\n      backgroundColor={gameBackgroundColorToCss(backgroundColor)}\r\n    >\r\n      <Score>{timeElapsed}</Score>\r\n      <LivesContainer />\r\n    </PostMinigameUIInner>\r\n  )\r\n}\r\n\r\nexport default observer(PostMinigameUI)\r\n\r\n","import React, { FunctionComponent } from 'react'\n\nconst DeathscreenUI: FunctionComponent = () => {\n  return (\n    <div className=\"deathscreen-ui\">\n      <h1>Je suis l'ui du deathscreen</h1>\n    </div>\n  )\n}\n\nexport default DeathscreenUI\n","import React, { FunctionComponent, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { observer } from 'mobx-react-lite'\nimport gameManager from '../../game/manager/GameManager'\nimport gameStore from '../../store/GameStore'\n\nconst Div = styled.div`\n  position: absolute;\n  z-index: 10;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  opacity: 0;\n  &::after {\n    content: '';\n    transition: all 0.3s;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: ${props => props.color};\n  }\n`\n\ninterface Props {\n  color?: string\n}\n\nconst Transition: FunctionComponent<Props> = () => {\n  const fader = React.createRef<HTMLDivElement>()\n  const {\n    config: { fadeColor },\n  } = gameStore\n  useEffect(() => {\n    if (fader.current) {\n      gameManager.gameFader = fader.current\n    }\n  }, [])\n\n  return <Div color={fadeColor} ref={fader} className=\"transition-fade\" />\n}\n\nexport default observer(Transition)\n","import React, { FunctionComponent, useEffect, useRef } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport gameStore from '../../store/GameStore'\r\nimport { GameState } from '../../utils/enums'\r\nimport HomescreenUI from './HomescreenUI'\r\nimport SplashscreenUI from './SplashscreenUI'\r\nimport MinigameUI from './MinigameUI'\r\nimport PostMinigameUI from './PostMinigameUI'\r\nimport DeathscreenUI from './DeathscreenUI'\r\nimport Transition from './Transition'\r\nimport gameManager from '../../game/manager/GameManager'\r\n\r\nconst GameUI: FunctionComponent = () => {\r\n  const { state, uiKey, paused } = gameStore\r\n  const classNames = ['game-ui']\r\n  const gameUI = useRef<HTMLDivElement>(null)\r\n  useEffect(() => {\r\n    if (gameUI.current) {\r\n      gameManager.gameUI = gameUI.current\r\n    }\r\n  }, [])\r\n\r\n  let UIComponent = SplashscreenUI\r\n\r\n  switch (state) {\r\n    case GameState.Splashscreen:\r\n      UIComponent = SplashscreenUI\r\n      break\r\n    case GameState.Homescreen:\r\n      UIComponent = HomescreenUI\r\n      break\r\n    case GameState.Minigame:\r\n      UIComponent = MinigameUI\r\n      break\r\n    case GameState.PostMinigame:\r\n      UIComponent = PostMinigameUI\r\n      break\r\n    case GameState.Deathscreen:\r\n      UIComponent = DeathscreenUI\r\n      break\r\n  }\r\n\r\n  if (paused) {\r\n    classNames.push('paused')\r\n  }\r\n\r\n  return (\r\n    <div ref={gameUI} className={classNames.join(' ')}>\r\n      <Transition />\r\n      {gameManager.activeScene !== undefined && <UIComponent key={uiKey} />}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(GameUI)\r\n","import React, { FunctionComponent, ReactNode } from 'react'\r\nimport Draggable from 'react-draggable'\r\nimport { observer } from 'mobx-react-lite'\r\nimport {\r\n  ForceThemeProps,\r\n  HideableProps,\r\n  PositionneableProps,\r\n  TitledProps,\r\n} from '../../../utils/interfaces'\r\nimport { useClassTheme } from '../../../utils/hooks'\r\n\r\ninterface Props {\r\n  children?: ReactNode | string\r\n  disabled?: boolean\r\n  center?: boolean\r\n  rounded?: boolean\r\n}\r\n\r\nconst DebugContainer: FunctionComponent<\r\n  Props & ForceThemeProps & PositionneableProps & TitledProps & HideableProps\r\n> = props => {\r\n  const {\r\n    title,\r\n    children,\r\n    center,\r\n    rounded,\r\n    forceTheme,\r\n    x,\r\n    hide,\r\n    y,\r\n    zIndex,\r\n    draggable,\r\n    disabled,\r\n  } = props\r\n  const isDraggable =\r\n    draggable !== undefined ? draggable : DebugContainer.defaultProps!.draggable\r\n  const classNames = ['game-state-list', 'container']\r\n  const themeClass = useClassTheme(forceTheme)\r\n  if (themeClass) {\r\n    classNames.push(themeClass)\r\n  }\r\n\r\n  if (disabled) {\r\n    classNames.push('disabled')\r\n  }\r\n\r\n  if (title && title !== '') {\r\n    classNames.push('with-title')\r\n  }\r\n  if (center) {\r\n    classNames.push('is-center')\r\n  }\r\n  if (rounded) {\r\n    classNames.push('is-rounded')\r\n  }\r\n\r\n  const section = (\r\n    <section\r\n      className={classNames.join(' ')}\r\n      style={{\r\n        left: x,\r\n        top: y,\r\n        zIndex,\r\n        position: 'fixed',\r\n        display: hide ? 'none' : 'initial',\r\n      }}\r\n    >\r\n      {title && title !== '' && <h2 className=\"title\">{title}</h2>}\r\n      {children}\r\n    </section>\r\n  )\r\n\r\n  if (isDraggable) {\r\n    return <Draggable>{section}</Draggable>\r\n  }\r\n\r\n  return section\r\n}\r\n\r\nDebugContainer.defaultProps = {\r\n  center: false,\r\n  draggable: true,\r\n  hide: false,\r\n  disabled: false,\r\n  rounded: false,\r\n}\r\n\r\nexport default observer(DebugContainer)\r\n","import * as React from 'react'\r\nimport { ChangeEvent, FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport gameStore from '../../../store/GameStore'\r\nimport DebugContainer from './DebugContainer'\r\nimport gameManager from '../../../game/manager/GameManager'\r\nimport { minigameSuffix } from '../../../utils/constants'\r\nimport {\r\n  HideableProps,\r\n  PositionneableProps,\r\n  TitledProps,\r\n} from '../../../utils/interfaces'\r\n\r\nconst GameDebugMinigamePicker: FunctionComponent<\r\n  TitledProps & PositionneableProps & HideableProps\r\n> = props => {\r\n  const { transitionning } = gameStore\r\n\r\n  const minigames = gameManager.game.scene.scenes\r\n    .filter(scene => scene.scene.key.includes(minigameSuffix))\r\n    .map(scene => scene.scene.key)\r\n\r\n  const handleMinigameChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    gameManager.loadMinigame(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <DebugContainer disabled={transitionning} {...props}>\r\n        {minigames.map(minigame => {\r\n          return (\r\n            <label key={minigame} className=\"game-state-list--item\">\r\n              <input\r\n                id={minigame}\r\n                className=\"radio\"\r\n                type=\"radio\"\r\n                name=\"currentMinigame\"\r\n                value={minigame}\r\n                checked={\r\n                  gameManager.activeScene\r\n                    ? minigame === gameManager.activeScene.scene.key\r\n                    : false\r\n                }\r\n                onChange={handleMinigameChange}\r\n              />\r\n              <span>{minigame}</span>\r\n            </label>\r\n          )\r\n        })}\r\n      </DebugContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default observer(GameDebugMinigamePicker)\r\n","import * as React from 'react'\r\nimport { ChangeEvent, FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport gameStore from '../../../store/GameStore'\r\nimport { GameState } from '../../../utils/enums'\r\nimport DebugContainer from './DebugContainer'\r\nimport gameManager from '../../../game/manager/GameManager'\r\nimport { scenesKeys } from '../../../utils/constants'\r\nimport { PositionneableProps, TitledProps } from '../../../utils/interfaces'\r\nimport GameDebugMinigamePicker from './GameDebugMinigamePicker'\r\n\r\nconst GameDebugStateList: FunctionComponent<\r\n  TitledProps & PositionneableProps\r\n> = props => {\r\n  const { state, transitionning } = gameStore\r\n  const availableStates = Object.keys(GameState).map(\r\n    gameState => GameState[gameState]\r\n  )\r\n\r\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    switch (e.target.value as GameState) {\r\n      case GameState.Splashscreen:\r\n        gameManager.loadSplashscreen()\r\n        break\r\n      case GameState.Homescreen:\r\n        gameManager.loadHomescreen()\r\n        break\r\n      case GameState.Deathscreen:\r\n        gameManager.loadDeathscreen()\r\n        break\r\n      case GameState.Minigame:\r\n        gameManager.loadMinigame(scenesKeys.SpamGame)\r\n        break\r\n      default:\r\n        gameManager.startScene(e.target.value as GameState)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <DebugContainer disabled={transitionning} {...props}>\r\n        {availableStates.map(availableState => {\r\n          return (\r\n            <label key={availableState} className=\"game-state-list--item\">\r\n              <input\r\n                id={availableState}\r\n                className=\"radio\"\r\n                type=\"radio\"\r\n                name=\"currentState\"\r\n                value={availableState}\r\n                checked={availableState === state}\r\n                onChange={handleInputChange}\r\n              />\r\n              <span>{availableState}</span>\r\n            </label>\r\n          )\r\n        })}\r\n      </DebugContainer>\r\n      <GameDebugMinigamePicker\r\n        hide={state && state !== GameState.Minigame}\r\n        title=\"Minigame picker\"\r\n        x={630}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default observer(GameDebugStateList)\r\n","import * as React from 'react'\r\nimport { FunctionComponent } from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface Props {\r\n  size?: 'small' | 'medium' | 'large'\r\n}\r\n\r\nconst Div = styled.div`\r\n  ${(props: Props) => {\r\n    switch (props.size!) {\r\n      case 'small':\r\n        return 'margin: 1rem 0'\r\n      case 'medium':\r\n        return 'margin: 2rem 0'\r\n      case 'large':\r\n        return 'margin: 4rem 0'\r\n    }\r\n  }}\r\n`\r\n\r\nconst Spacer: FunctionComponent<Props> = props => {\r\n  return <Div {...props} />\r\n}\r\n\r\nSpacer.defaultProps = {\r\n  size: 'small',\r\n}\r\n\r\nexport default Spacer\r\n","import * as React from 'react'\r\nimport {\r\n  FunctionComponent,\r\n  KeyboardEventHandler,\r\n  KeyboardEvent,\r\n  useRef,\r\n} from 'react'\r\nimport { useCallback } from 'react'\r\nimport { Key } from 'ts-key-enum'\r\nimport { ReactNode } from 'react'\r\n\r\ninterface Props {\r\n  validationFeedbackDelay?: number\r\n  children?: ReactNode | string\r\n  onValidate?: (value: string) => void\r\n  onKeyDown?: KeyboardEventHandler<HTMLInputElement>\r\n  max?: number\r\n  min?: number\r\n  validationClassname?: string\r\n}\r\n\r\ntype HTMLInputProps = Partial<\r\n  Pick<\r\n    HTMLInputElement,\r\n    'type' | 'checked' | 'defaultValue' | 'value' | 'className'\r\n  >\r\n>\r\n\r\nconst ValidatableInput: FunctionComponent<Props & HTMLInputProps> = props => {\r\n  const {\r\n    validationClassname,\r\n    validationFeedbackDelay,\r\n    onValidate,\r\n    onKeyDown,\r\n    ...rest\r\n  } = props\r\n  const input = useRef<HTMLInputElement>(null)\r\n\r\n  let last: number\r\n  const handleOnKeyDown = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === Key.Enter) {\r\n      if (input.current && !input.current.classList.contains('is-success')) {\r\n        input.current.classList.add('is-success')\r\n      }\r\n      if (last) {\r\n        clearTimeout(last)\r\n      }\r\n      if (onValidate) {\r\n        onValidate((e.target as HTMLInputElement).value)\r\n      }\r\n      last = setTimeout(() => {\r\n        if (input.current && validationClassname) {\r\n          input.current.classList.remove(validationClassname)\r\n        }\r\n      }, validationFeedbackDelay)\r\n    }\r\n    if (onKeyDown) {\r\n      onKeyDown(e)\r\n    }\r\n  }, [])\r\n\r\n  return <input {...rest} onKeyDown={handleOnKeyDown} ref={input} />\r\n}\r\n\r\nValidatableInput.defaultProps = {\r\n  validationFeedbackDelay: 2000,\r\n  validationClassname: 'is-success',\r\n}\r\n\r\nexport default ValidatableInput\r\n","import * as React from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  KeyboardEvent,\r\n  FunctionComponent,\r\n  useCallback,\r\n  useState,\r\n  useRef,\r\n} from 'react'\r\nimport DebugContainer from './DebugContainer'\r\nimport {\r\n  HideableProps,\r\n  PositionneableProps,\r\n  TitledProps,\r\n} from '../../../utils/interfaces'\r\nimport gameStore from '../../../store/GameStore'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { CirclePicker, ColorResult } from 'react-color'\r\nimport Spacer from '../Spacer'\r\nimport ValidatableInput from '../ValidatableInput'\r\nimport colors from '../../../utils/colors'\r\n\r\nconst MinigameDurationCol = styled.span`\r\n  width: 100px;\r\n  display: inline-block;\r\n  transition: all 0.15s;\r\n`\r\n\r\nconst GameDebugConfigPanel: FunctionComponent<\r\n  PositionneableProps & TitledProps & HideableProps\r\n> = props => {\r\n  const {\r\n    config: { fade, minigameDuration },\r\n    changeConfig,\r\n  } = gameStore\r\n\r\n  const handleFadeChange = useCallback(\r\n    () => {\r\n      changeConfig({\r\n        fade: !fade,\r\n      })\r\n    },\r\n    [fade]\r\n  )\r\n\r\n  const handleFadeColorChange = useCallback((color: ColorResult) => {\r\n    changeConfig({\r\n      fadeColor: color.hex,\r\n    })\r\n  }, [])\r\n  const handleGameBackgroundColorChange = useCallback((color: ColorResult) => {\r\n    changeConfig({\r\n      backgroundColor: { ...color.rgb, a: 1 },\r\n    })\r\n  }, [])\r\n\r\n  const handleOnValidate = useCallback(\r\n    (duration: string) => {\r\n      changeConfig({\r\n        minigameDuration: Number(duration),\r\n      })\r\n    },\r\n    [minigameDuration]\r\n  )\r\n\r\n  return (\r\n    <DebugContainer {...props}>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          className=\"checkbox\"\r\n          checked={fade}\r\n          onChange={handleFadeChange}\r\n        />\r\n        <span>Fade?</span>\r\n      </label>\r\n      {fade && (\r\n        <>\r\n          <Spacer />\r\n          <p>Fade color</p>\r\n          <Spacer size=\"small\" />\r\n          <CirclePicker\r\n            colors={colors}\r\n            onChangeComplete={handleFadeColorChange}\r\n          />\r\n        </>\r\n      )}\r\n      <Spacer />\r\n      <p>Game background color</p>\r\n      <Spacer size=\"small\" />\r\n      <CirclePicker\r\n        colors={colors}\r\n        onChangeComplete={handleGameBackgroundColorChange}\r\n      />\r\n      <Spacer />\r\n      <p>\r\n        Minigame duration :\r\n        <MinigameDurationCol>\r\n          <ValidatableInput\r\n            defaultValue={String(minigameDuration)}\r\n            onValidate={handleOnValidate}\r\n            className=\"input\"\r\n            type=\"number\"\r\n            max={700}\r\n            min={200}\r\n          />\r\n        </MinigameDurationCol>\r\n      </p>\r\n    </DebugContainer>\r\n  )\r\n}\r\n\r\nexport default observer(GameDebugConfigPanel)\r\n","import * as React from 'react'\r\nimport GameDebugStateList from './ui/debug/GameDebugStateList'\r\nimport { FunctionComponent } from 'react'\r\nimport GameDebugConfigPanel from './ui/debug/GameDebugConfigPanel'\r\nimport { HideableProps } from '../utils/interfaces'\r\n\r\nconst GameDebug: FunctionComponent<HideableProps> = props => {\r\n  const { hide } = props\r\n\r\n  return (\r\n    <div\r\n      style={{ display: hide ? 'block' : 'none' }}\r\n      className=\"game-debug game-ui\"\r\n    >\r\n      <h1>Debug interface</h1>\r\n      <GameDebugConfigPanel title=\"Game config\" x={10} y={180} />\r\n      <GameDebugStateList title=\"Game state\" x={10} y={10} />\r\n    </div>\r\n  )\r\n}\r\n\r\nGameDebug.defaultProps = {\r\n  hide: false,\r\n}\r\n\r\nexport default GameDebug\r\n","import React, {FunctionComponent, MouseEventHandler, ReactNode} from 'react'\nimport {observer} from \"mobx-react-lite\";\nimport gameDebugStore from \"../../../store/GameDebugStore\";\nimport {ForceThemeProps, PositionneableProps} from \"../../../utils/interfaces\";\nimport {useClassTheme} from \"../../../utils/hooks\";\nimport Draggable from \"react-draggable\";\nimport {GameDebugTheme} from \"../../../utils/enums\";\n\ntype RenderProps = (theme: GameDebugTheme) => ReactNode\n\ninterface Props {\n  children?: RenderProps | ReactNode | string\n  className?: string\n  onClick?: MouseEventHandler<HTMLButtonElement>\n}\n\nconst DebugButton: FunctionComponent<\n  Props & ForceThemeProps & PositionneableProps\n> = props => {\n  const {\n    onClick,\n    children,\n    className,\n    forceTheme,\n    x,\n    y,\n    zIndex,\n    draggable,\n  } = props\n  const classNames = ['debug-button', 'game-debug-toggle-button']\n  const { theme } = gameDebugStore\n\n  if (className) {\n    classNames.push(...className.split(' '))\n  }\n\n  const themeClass = useClassTheme(forceTheme)\n  if (themeClass) {\n    classNames.push(themeClass)\n  }\n\n  const render = children\n    ? typeof children === 'function'\n      ? (children as RenderProps)(theme)\n      : children\n    : null\n\n  const button = (\n    <button\n      {...(onClick ? { onClick } : {})}\n      style={{\n        left: x,\n        top: y,\n        zIndex,\n        ...(x || y ? { position: 'fixed' } : {}),\n      }}\n      className={classNames.join(' ')}\n    >\n      {render}\n    </button>\n  )\n\n  if (draggable !== undefined && draggable) {\n    return <Draggable>{button}</Draggable>\n  }\n\n  return button\n}\n\nDebugButton.defaultProps = {\n  draggable: false,\n}\n\nexport default observer(DebugButton)\n","import * as React from 'react'\nimport { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport { useKeyboardShortcuts } from '../../../utils/hooks'\nimport { Key } from 'ts-key-enum'\nimport gameDebugStore from '../../../store/GameDebugStore'\nimport DebugButton from './DebugButton'\nimport { GameDebugTheme } from '../../../utils/enums'\nimport styled from 'styled-components'\nimport debugIcon from '../../../assets/images/icons/debug.png'\n\nconst GameDebugToggleButtonIcon = styled.i`\n  background: url(${debugIcon}) no-repeat;\n  height: 50px;\n  width: 50px;\n`\n\nconst GameDebugToggleButton: FunctionComponent = () => {\n  const { debug, toggleDebug, hideDebug } = gameDebugStore\n  console.log(process.env.PUBLIC_URL)\n  useKeyboardShortcuts([\n    {\n      keys: [Key.Escape],\n      action: hideDebug,\n    },\n    {\n      keys: ['D'],\n      action: toggleDebug,\n    },\n  ])\n\n  return (\n    <DebugButton onClick={toggleDebug} forceTheme={GameDebugTheme.Light}>\n      {debug ? <i className=\"icon close\" /> : <GameDebugToggleButtonIcon />}\n    </DebugButton>\n  )\n}\n\nexport default observer(GameDebugToggleButton)\n","import * as React from 'react'\nimport { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport gameDebugStore from '../../../store/GameDebugStore'\nimport DebugButton from './DebugButton'\n\nconst GameDebugToggleThemeButton: FunctionComponent = () => {\n  const { toggleTheme, otherThemeName } = gameDebugStore\n\n  return <DebugButton onClick={toggleTheme}>{otherThemeName[0]}</DebugButton>\n}\n\nexport default observer(GameDebugToggleThemeButton)\n","import React, {FunctionComponent} from 'react'\nimport styled from 'styled-components'\n\ninterface Props {\n  color?: string,\n  size?: \"small\" | \"medium\" | \"large\"\n}\n\nconst Div = styled.div`\n  display: flex;\n  -webkit-font-smoothing: antialiased;\n  justify-content: space-evenly;\n  width: 40px;\n  height: 40px;\n  transform: ${props => {\n    switch (props.size) {\n      case \"small\":\n        return 'scale(0.6)'\n      case \"medium\":\n        return 'scale(0.7)'\n      case \"large\":\n        return 'scale(0.8)'\n    }\n    return 'scale(0.8)'\n    }\n  };\n  & .bar {\n    position: relative;\n    width: ${(props: Props) => {\n      switch (props.size) {\n        case \"small\":\n          return '4px'\n        case \"medium\":\n          return '8px'\n        case \"large\":\n          return '12px'\n      }\n      \n      return '8px'\n}};\n    height: 100%;\n    background: ${props => props.color};\n    &:first-of-type {\n      margin-right: 0.6rem;\n    }\n  }\n`\n\nconst PauseIcon: FunctionComponent<Props> = (props) => {\n  const { color } = props\n\n  return (\n    <Div {...props} className=\"pause-icon\" style={{ color }}>\n      <div className=\"bar\"/>\n      <div className=\"bar\"/>\n    </Div>\n  )\n}\n\nPauseIcon.defaultProps = {\n  color: 'white',\n  size: \"large\"\n}\n\nexport default PauseIcon\n","import React, {FunctionComponent} from 'react'\nimport styled from 'styled-components'\n\ninterface Props {\n  color?: string,\n  size?: \"small\" | \"medium\" | \"large\"\n}\n\nconst Div = styled.div`\n  width: 40px;\n  height: 40px;\n  position: relative;\n  left: 6px;\n  border-style: solid;\n  border-width: 20px 0 20px 30px;\n  transform: ${(props: Props) => {\n    switch (props.size) {\n      case \"small\":\n        return 'scale(0.6)'\n      case \"medium\":\n        return 'scale(0.7)'\n      case \"large\":\n        return 'scale(0.8)'\n    }\n    return 'scale(1)'\n  }\n  };\n  border-color: transparent transparent transparent ${props => props.color};\n`\n\nconst PlayIcon: FunctionComponent<Props> = (props) => {\n  const { color } = props\n\n  return (\n    <Div {...props} className=\"play-icon\" style={{ color }}/>\n  )\n}\n\nPlayIcon.defaultProps = {\n  color: 'white',\n  size: \"large\"\n}\n\nexport default PlayIcon\n","import * as React from 'react';\nimport {FunctionComponent} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport DebugButton from \"./DebugButton\";\nimport PauseIcon from \"../icons/PauseIcon\";\nimport {GameDebugTheme} from \"../../../utils/enums\";\nimport gameStore from \"../../../store/GameStore\";\nimport PlayIcon from \"../icons/PlayIcon\";\nimport gameManager from \"../../../game/manager/GameManager\";\nimport {useKeyboardShortcuts} from \"../../../utils/hooks\";\n\nconst GameDebugTogglePauseButton: FunctionComponent = () => {\n  const { paused } = gameStore\n  const { togglePause } = gameManager\n\n  useKeyboardShortcuts([\n    {\n      keys: [\"P\"],\n      action: togglePause\n    }\n  ])\n\n  return (\n    <DebugButton onClick={togglePause}>\n      {theme =>\n        !paused && <PauseIcon color={theme === GameDebugTheme.Light ? \"black\" : \"white\"}/> ||\n        paused && <PlayIcon color={theme === GameDebugTheme.Light ? \"black\" : \"white\"}/>\n      }\n    </DebugButton>\n  )\n}\n\n\nexport default observer(\n  GameDebugTogglePauseButton\n)\n\n\n","import * as React from 'react'\r\nimport { FunctionComponent } from 'react'\r\nimport GameDebugToggleButton from './GameDebugToggleButton'\r\nimport GameDebugToggleThemeButton from './GameDebugToggleThemeButton'\r\nimport GameDebugTogglePauseButton from './GameDebugTogglePauseButton'\r\nimport { useKeyboardShortcuts } from '../../../utils/hooks'\r\nimport gameDebugStore from '../../../store/GameDebugStore'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nconst GameDebugButtonsToolbar: FunctionComponent = () => {\r\n  const { toggleDebugToolbar, debugToolbar } = gameDebugStore\r\n\r\n  useKeyboardShortcuts([\r\n    {\r\n      keys: ['K'],\r\n      action: toggleDebugToolbar,\r\n    },\r\n  ])\r\n\r\n  if (!debugToolbar) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-debug-buttons-toolbar\">\r\n      <GameDebugTogglePauseButton />\r\n      <GameDebugToggleThemeButton />\r\n      <GameDebugToggleButton />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(GameDebugButtonsToolbar)\r\n","import 'phaser'\r\nimport * as React from 'react'\r\nimport { useResize } from '../utils/hooks'\r\nimport GameUI from './ui/GameUI'\r\nimport GameDebug from './GameDebug'\r\nimport { FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport GameDebugButtonsToolbar from './ui/debug/GameDebugButtonsToolbar'\r\nimport gameDebugStore from '../store/GameDebugStore'\r\nimport gameManager from '../game/manager/GameManager'\r\nimport gameStore from '../store/GameStore'\r\n\r\nconst Game: FunctionComponent = () => {\r\n  const { width, height } = useResize()\r\n  const { debug } = gameDebugStore\r\n  const { paused } = gameStore\r\n\r\n  if (gameManager.game.canvas) {\r\n    gameManager.game.canvas.style.transition = 'all 0.15s'\r\n    gameManager.game.resize(width, height)\r\n    gameManager.game.canvas.style.filter = paused\r\n      ? 'blur(20px) grayscale(80%)'\r\n      : null\r\n    gameManager.game.canvas.style.transform = paused ? 'scale(1.2)' : null\r\n  }\r\n\r\n  return (\r\n    <div id=\"game\" className=\"game\">\r\n      <GameDebugButtonsToolbar />\r\n      <GameDebug hide={debug} />\r\n      <GameUI />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(Game)\r\n","import * as React from 'react'\nimport { FunctionComponent } from 'react'\nimport Game from './components/Game'\n\nconst App: FunctionComponent = () => {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  )\n}\n\nexport default App\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.')\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.')\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport App from './App'\nimport 'gsap/CSSPlugin'\nimport './assets/styles/app.scss'\nimport registerServiceWorker from './registerServiceWorker'\nimport './utils/extensions'\nconsole.log('public url: ', process.env.PUBLIC_URL)\n\nReactDOM.render(<App />, document.getElementById('root') as HTMLElement)\nregisterServiceWorker()\n","module.exports = __webpack_public_path__ + \"static/media/life_1_285_270.4dfc78f2.png\";","module.exports = __webpack_public_path__ + \"static/media/life_2_285_270.26bad4f0.png\";","module.exports = __webpack_public_path__ + \"static/media/life_3_285_270.3365a732.png\";","module.exports = __webpack_public_path__ + \"static/media/debug.2896fca5.png\";"],"sourceRoot":""}