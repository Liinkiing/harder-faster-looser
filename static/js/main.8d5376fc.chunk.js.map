{"version":3,"sources":["utils/enums.ts","store/GameDebugStore.ts","utils/hooks.ts","utils/constants.ts","game/manager/AnimationManager.ts","game/scenes/BaseScene.ts","game/scenes/BootScene.ts","game/scenes/SplashscreenScene.ts","game/scenes/HomescreenScene.ts","utils/functions.ts","game/objects/Spam.ts","utils/extensions.ts","game/scenes/MinigameScene.ts","game/scenes/action/SpamGameScene.ts","game/scenes/action/SandwichGameScene.ts","game/objects/password-game/KeyboardPasswordButton.ts","game/objects/password-game/KeyboardContainer.ts","game/objects/password-game/ComputerPasswordScreen.ts","game/scenes/action/PasswordGameScene.ts","game/scenes/PostMinigameScene.ts","game/scenes/DeathscreenScene.ts","utils/colors.ts","utils/game.ts","utils/anims.ts","game/manager/MinigameManager.ts","game/manager/AudioManager.ts","game/manager/GameManager.ts","store/GameStore.ts","components/ui/HomescreenUI.tsx","components/ui/SplashscreenUI.tsx","components/ui/games/RemainingTime.tsx","components/ui/games/MinigameToolbar.tsx","components/ui/MinigameUI.tsx","components/ui/Spritesheet.tsx","components/ui/post-minigame/LivesList.tsx","components/ui/PostMinigameUI.tsx","components/ui/DeathscreenUI.tsx","components/ui/Transition.tsx","components/ui/GameUI.tsx","components/ui/debug/DebugContainer.tsx","components/ui/debug/GameDebugMinigamePicker.tsx","components/ui/debug/GameDebugStateList.tsx","components/ui/Spacer.tsx","components/ui/ValidatableInput.tsx","components/ui/debug/GameDebugConfigPanel.tsx","components/GameDebug.tsx","components/ui/debug/DebugButton.tsx","components/ui/debug/GameDebugToggleButton.tsx","components/ui/debug/GameDebugToggleThemeButton.tsx","components/ui/icons/PauseIcon.tsx","components/ui/icons/PlayIcon.tsx","components/ui/debug/GameDebugTogglePauseButton.tsx","components/ui/debug/GameDebugButtonsToolbar.tsx","components/Game.tsx","components/Introduction.tsx","App.tsx","index.tsx","assets/sprites/post-minigame/life_1_285_270.png","assets/sprites/post-minigame/life_2_285_270.png","assets/sprites/post-minigame/life_3_285_270.png","assets/images/icons/debug.png"],"names":["GameCategory","GameState","BaseEvents","GameEvents","GameDebugTheme","gameDebugStore","this","theme","Dark","toUpperCase","Light","observable","action","_this","debugToolbar","showDebug","_this2","hideDebug","_this3","debug","_this4","_this5","_this6","newTheme","_this7","_this8","computed","useKeyboardShortcuts","shortcuts","listener","e","forEach","shortcut","keys","some","key","toLowerCase","useEffect","window","addEventListener","removeEventListener","useClassTheme","forceTheme","isDarkTheme","minigameSuffix","scenesKeys","Boot","Splashscreen","Homescreen","SandwichGame","SpamGame","PasswordGame","PostMinigameScene","Deathscreen","categoriesProbability","_categoriesProbabilit","Object","defineProperty","Action","Waiting","AnimationHelper","scene","data","classCallCheck","animationData","createGameAnimations","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","anims","Symbol","iterator","next","done","value","frames","framesArray","typeOfGeneration","generateFrameNames","prefix","start","end","suffix","zeroPad","generateFrameNumbers","first","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","i","frame","duration","visible","push","err","return","create","defaultTextureKey","frameRate","skipMissedFrames","delay","repeat","repeatDelay","yoyo","showOnStart","hideOnComplete","BaseScene","console","log","concat","game","dump","Emitter","emit","SceneInit","load","on","animationHelper","cache","json","get","gameManager","resizeCamera","innerWidth","innerHeight","changeBackgroundColor","gameStore","config","backgroundColor","SceneCreated","initListeners","time","delta","Phaser","Scene","BootScene","possibleConstructorReturn","getPrototypeOf","call","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","esm_get","prototype","assertThisInitialized","stopLoading","dev","startGame","stop","audio","playBg","initial","fade","changeConfig","loadNextMinigame","setBaseURL","process","pack","SplashscreenScene","graphics","add","fillStyle","fillRect","text","HomescreenScene","wait","ms","Promise","resolve","setTimeout","gameWait","clock","addEvent","callback","randomRange","min","max","Math","random","promiseAnimation","animation","eventCallback","shuffle","length","j","floor","_ref2","gameBackgroundColorToCss","r","g","b","String","randomString","toString","substring","Spam","params","x","y","children","createSpamContent","spamTexture","sprite","setOrigin","spriteAnim","animationManager","texture","_ref","width","height","setScale","ratioResolution","setInteractive","input","hitArea","setSize","SpamClicked","createCloseIcon","spamContent","close","SpamDestroyed","destroy","setTexture","closeIcon","existing","isAnimated","play","GameObjects","Container","List","_Array","items","_getPrototypeOf2","apply","toConsumableArray","inherits","createClass","searchedValue","find","item","indexToRemove","indexOf","splice","wrapNativeSuper","Array","MinigameScene","loadPostMinigame","looseLife","RemainingTimeOver","onFailure","SpamGameScene","spams","setGlobalTopOnly","nbrSpam","createSpam","spam","update","playSfx","remove","onSuccess","detune","availablesSpam","SOUND_GET_SANDWICH","SandwichGameScene","skies","buildings","landscapes","streetLights","grounds","currentFrame","isControlsEnabled","createPlayer","playerTexture","Number","createSandwich","sandwichTexture","playWinAnimation","_callee2","_context2","volume","abrupt","player","playerWinTexture","resetClassVariables","initBackground","createControls","sky","from","element","createCloneBackgroundElement","SandwichPicked","suspendMinigame","sandwich","disableMobileControls","nativeSpeed","props","createBackgroundElement","keyCode","keyboard","lastKeyPressed","animateGame","physics","world","enable","setDisplaySize","collider","overlap","removeCollider","array","leftBtn","setDepth","rightBtn","btn","KeyboardPasswordButton","style","code","KeyboardPasswordButtonClicked","Sprite","COLUMNS","ROWS","KeyboardContainer","buttons","getButton","button","index","passwordCharMap","1","2","3","4","5","ComputerPasswordScreen","stars","addStarChar","passwordCount","createStar","last","offset","createScreenSprite","screen","passwordGame","once","typedPassword","password","PASSWORD_DISPLAY_TIME","EASY_PASSWORD_LENGTH","MEDIUM_PASSWORD_LENGTH","HARD_PASSWORD_LENGTH","PasswordGameScene","createPassword","playIntroduction","resumeMinigame","computerScreen","getBounds","_callee3","_context3","difficulty","slice","reduce","acc","_ref4","_callee4","paw","_context4","device","os","desktop","then","every","_x","arguments","SOUND_LOST","SOUND_WIN","DISPLAY_TIME","hasTokiJustLost","isTokiDead","createFillerGraphics","resetTokiStatus","loadDeathscreen","DeathscreenScene","green","colors","gameConfig","antialias","gamepad","mouse","touch","arcade","gravity","default","title","version","zoom","parent","type","AUTO","pixelArt","appear","$el","TweenLite","to","opacity","disappear","minigameManager","currentCategory","games","playedGames","category","gameCategory","hasOwnProperty","gameKey","clear","has","lastGame","startScene","selectedCategory","pickRandomCategory","pickGameKey","AudioManager","gm","extra","sound","objectSpread","loop","pauseOnBlur","EventEmitter","GameManager","Game","suspended","getScene","activeScene","cameras","resize","loadSplashscreen","changeState","loadHomescreen","loadMinigame","_ref3","minigameKey","pickNextGameKey","_callee5","_context5","_callee6","_context6","_ref7","_callee7","optionnalData","_args7","_context7","event","removeAllListeners","gameFader","startTransitionning","scenes","filter","includes","Minigame","regenerateUiKey","stopTransitionning","paused","resume","_x2","pause","color","main","setBackgroundColor","restartActiveScene","_callee8","_args8","_context8","togglePause","setDetune","hasJustLoosedBrain","hasJustLoosedHeart","hasJustStress","status","hasHeart","hasStress","hasBrain","hasJustBrain","hasJustHeart","elapsed","Date","secondsElapsed","toLocaleTimeString","minute","second","fadeColor","minigameDuration","RandomDataGenerator","uuid","started","uiKey","newConfig","loading","newState","_this9","state","step","_this10","_this11","_this12","transitionning","_this13","_this14","_this15","_this16","_this17","_this18","HomescreenUI","react_default","createElement","className","SplashscreenUI","ProgressOuter","styled","div","_templateObject","ProgressInner","_templateObject2","observer","_gameStore$config","_useState","useState","_useState2","slicedToArray","remaining","setRemaining","useRef","current","click","removeAllEvents","progress","ref","onClick","increaseElapsed","pointerEvents","display","aria-hidden","Div","MinigameToolbar_templateObject","MinigameToolbar","assign","games_RemainingTime","MinigameUI","games_MinigameToolbar","Spritesheet","renderElements","_this$props","image","widthFrame","heightFrame","background","backgroundSize","backgroundRepeat","backgroundPosition","onDoubleClick","onMouseMove","onMouseEnter","onMouseLeave","onMouseOver","onMouseOut","onMouseDown","onMouseUp","containerStyles","position","overflow","transform","spriteScale","transformOrigin","backgroundImage","moveStyles","elMove","React","elContainer","id","_onClick","setInstance","_onDoubleClick","_onMouseMove","_onMouseEnter","_onMouseLeave","_onMouseOver","_onMouseOut","_onMouseDown","_onMouseUp","init","_this$props2","autoplay","getInstance","onInit","imgLoadSprite","Image","src","onload","document","querySelector","imageSprite","cols","rows","spriteEl","spriteElContainer","spriteElMove","moveImage","instance","onerror","Error","_this$props3","onResize","scale","isResponsive","offsetWidth","imageRendering","getInfo","withTimeout","_this$props4","onPlay","timeout","isPlaying","setIntervalPlayFunctions","intervalSprite","clearInterval","setInterval","fps","_this$props5","onEnterFrame","onEachFrame","onLoopComplete","currentRow","currentCol","map","frameAction","direction","steps","endAt","completeLoopCicles","startAt","onPause","goToAndPlay","goToAndPause","setStartAt","setEndAt","setDirection","param","getBoundingClientRect","_this$props6","setFps","Component","defaultProps","LivesListInner","ul","LivesList_templateObject","FRAME_WIDTH","hasLoosedBrain","hasLoosedHeart","ui_Spritesheet","stress","brain","heart","show","keyframes","PostMinigameUI_templateObject","PostMinigameUIInner","PostMinigameUI_templateObject2","Score","h2","_templateObject3","timeElapsed","post_minigame_LivesList","DeathscreenUI","Transition_templateObject","fader","createRef","Transition_Div","classNames","gameUI","UIComponent","PostMinigame","PostMinigameUI","join","ui_Transition","DebugContainer","center","rounded","hide","zIndex","draggable","disabled","isDraggable","themeClass","section","left","top","react_draggable_default","minigames","handleMinigameChange","target","react","debug_DebugContainer","minigame","name","checked","onChange","availableStates","gameState","handleInputChange","availableState","debug_GameDebugMinigamePicker","Spacer_templateObject","size","Spacer","Spacer_Div","ValidatableInput","validationClassname","validationFeedbackDelay","onValidate","onKeyDown","rest","objectWithoutProperties","handleOnKeyDown","useCallback","Key","Enter","classList","contains","clearTimeout","MinigameDurationCol","span","GameDebugConfigPanel_templateObject","handleFadeChange","handleFadeColorChange","hex","handleGameBackgroundColorChange","rgb","handleOnValidate","ui_Spacer","lib","onChangeComplete","ui_ValidatableInput","defaultValue","GameDebug","debug_GameDebugConfigPanel","debug_GameDebugStateList","DebugButton","split","render","GameDebugToggleButtonIcon","GameDebugToggleButton_templateObject","debugIcon","toggleDebug","Escape","debug_DebugButton","toggleTheme","otherThemeName","PauseIcon_templateObject","PauseIcon","PauseIcon_Div","PlayIcon_templateObject","PlayIcon","PlayIcon_Div","icons_PauseIcon","icons_PlayIcon","toggleDebugToolbar","debug_GameDebugTogglePauseButton","debug_GameDebugToggleThemeButton","debug_GameDebugToggleButton","_useResize","useResize","canvas","transition","debug_GameDebugButtonsToolbar","components_GameDebug","ui_GameUI","IntroductionInner","Introduction_templateObject","onLaunchGame","body","requestFullscreen","components_Introduction","components_Game","ReactDOM","src_App","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.8d5376fc.chunk.js","sourcesContent":["export enum GameCategory {\r\n  Action = 'ACTION',\r\n  Waiting = 'WAITING',\r\n}\r\n\r\nexport enum GameState {\r\n  Splashscreen = 'SPLASHSCREEN',\r\n  Homescreen = 'HOMESCREEN',\r\n  Minigame = 'MINIGAME',\r\n  PostMinigame = 'POSTMINIGAME',\r\n  Deathscreen = 'DEATHSCREEN',\r\n}\r\n\r\nexport enum BaseEvents {\r\n  SceneInit = 'SCENE_INIT',\r\n  SceneCreated = 'SCENE_CREATED',\r\n}\r\n\r\nexport enum GameEvents {\r\n  KeyboardPasswordButtonClicked = 'KEYBOARD_PASSWORD_BUTTON_CLICKED',\r\n  SpamDestroyed = 'SPAM_DESTROYED',\r\n  RemainingTimeOver = 'REMANING_TIME_OVER',\r\n  SpamClicked = 'SPAM_CLICKED',\r\n\r\n  SandwichPicked = 'SANDWICH_PICKED',\r\n}\r\n\r\nexport enum GameDebugTheme {\r\n  Light = 'LIGHT',\r\n  Dark = 'DARK',\r\n}\r\n","import { action, computed, observable } from 'mobx'\r\nimport { GameDebugTheme } from '../utils/enums'\r\n\r\nclass GameDebugStore {\r\n  @observable public debug: boolean = false\r\n  @observable public debugToolbar: boolean = true\r\n  @observable public theme: GameDebugTheme = GameDebugTheme.Light\r\n\r\n  @action public showDebugToolbar = (): void => {\r\n    this.debugToolbar = true\r\n    this.showDebug()\r\n  }\r\n\r\n  @action public hideDebugToolbar = (): void => {\r\n    this.debugToolbar = false\r\n    this.hideDebug()\r\n  }\r\n\r\n  @action public toggleDebugToolbar = (): void => {\r\n    this.debugToolbar = !this.debugToolbar\r\n    this.debug = this.debugToolbar\r\n  }\r\n\r\n  @action public toggleDebug = (): void => {\r\n    this.debug = !this.debug\r\n  }\r\n\r\n  @action public showDebug = (): void => {\r\n    this.debug = true\r\n  }\r\n\r\n  @action public hideDebug = (): void => {\r\n    this.debug = false\r\n  }\r\n\r\n  @action public setTheme = (newTheme: GameDebugTheme): void => {\r\n    this.theme = newTheme\r\n  }\r\n\r\n  @action public toggleTheme = (): void => {\r\n    this.theme =\r\n      this.theme === GameDebugTheme.Dark\r\n        ? GameDebugTheme.Light\r\n        : GameDebugTheme.Dark\r\n  }\r\n\r\n  @computed get isDarkTheme(): boolean {\r\n    return this.theme === GameDebugTheme.Dark\r\n  }\r\n\r\n  @computed get shortThemeName(): string {\r\n    return this.theme[0].toUpperCase()\r\n  }\r\n\r\n  @computed get otherThemeName(): string {\r\n    return this.theme === GameDebugTheme.Dark\r\n      ? GameDebugTheme.Light\r\n      : GameDebugTheme.Dark\r\n  }\r\n}\r\n\r\nconst gameDebugStore = new GameDebugStore()\r\nexport default gameDebugStore\r\n","import { ChangeEvent, useCallback, useEffect, useRef, useState } from 'react'\r\nimport gameDebugStore from '../store/GameDebugStore'\r\nimport { GameDebugTheme } from './enums'\r\nimport { KeyboardShortcut } from './interfaces'\r\n\r\nexport const useResize = (): { width: number; height: number } => {\r\n  const [size, setSize] = useState({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n  })\r\n\r\n  useEffect(\r\n    () => {\r\n      const listener = () =>\r\n        setSize({\r\n          width: window.innerWidth,\r\n          height: window.innerHeight,\r\n        })\r\n      window.addEventListener('resize', listener)\r\n\r\n      return () => {\r\n        window.removeEventListener('resize', listener)\r\n      }\r\n    },\r\n    [window.innerWidth, window.innerHeight]\r\n  )\r\n\r\n  return size\r\n}\r\n\r\nexport const useKeyboardInput = (listener: (e: KeyboardEvent) => void) => {\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', listener)\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', listener)\r\n    }\r\n  }, [])\r\n}\r\n\r\nexport const useKeyboardShortcuts = (shortcuts: KeyboardShortcut[]) => {\r\n  useKeyboardInput(e => {\r\n    shortcuts.forEach(shortcut => {\r\n      if (\r\n        shortcut.keys.some(key => key.toLowerCase() === e.key.toLowerCase())\r\n      ) {\r\n        shortcut.action()\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\nexport const usePrevious = (value: any) => {\r\n  const ref = useRef(null)\r\n  useEffect(() => {\r\n    ref.current = value\r\n  })\r\n\r\n  return ref.current!\r\n}\r\n\r\nexport const useInputValue = <T>(initialValue: T) => {\r\n  const [value, setValue] = useState<T>(initialValue)\r\n  const onChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    setValue((e.target.value as unknown) as T)\r\n  }, [])\r\n\r\n  return {\r\n    value,\r\n    onChange,\r\n  }\r\n}\r\n\r\nexport const useClassTheme = (forceTheme?: GameDebugTheme): string | null => {\r\n  const { isDarkTheme } = gameDebugStore\r\n\r\n  if (!forceTheme && isDarkTheme) {\r\n    return 'is-dark'\r\n  }\r\n\r\n  if (!isDarkTheme && forceTheme && forceTheme === GameDebugTheme.Dark) {\r\n    return 'is-dark'\r\n  } else if (isDarkTheme && forceTheme && forceTheme === GameDebugTheme.Dark) {\r\n    return 'is-dark'\r\n  } else if (forceTheme && forceTheme === GameDebugTheme.Light) {\r\n    return null\r\n  }\r\n\r\n  return null\r\n}\r\n","import { GameCategory } from './enums'\n\nexport const minigameSuffix = '_MINIGAME'\nexport const minigameToolbarHeight = 84\n\nexport const scenesKeys = {\n  Boot: 'BOOT',\n  Splashscreen: 'SPLASHSCREEN',\n  Homescreen: 'HOMESCREEN',\n\n  SandwichGame: 'SANDWICH' + minigameSuffix,\n  SpamGame: 'SPAM' + minigameSuffix,\n  PasswordGame: 'PASSWORD' + minigameSuffix,\n\n  PostMinigameScene: 'POSTMINIGAME',\n\n  Deathscreen: 'DEATHSCREEN',\n}\n\nexport const categoriesProbability = {\n  [GameCategory.Action]: 0.9,\n  [GameCategory.Waiting]: 0.1,\n}\n","/**\n * @author       Digitsensitive <digit.sensitivee@gmail.com>\n * @copyright    2018 Digitsensitive\n * @description  Animation Helper\n * @license      Digitsensitive\n */\n\n/**\n * Configs taken from official Phaser library code and edited\n *\n * AnimationConfig\n * {string}           [key] - The key that the animation will be associated with. i.e. sprite.animations.play(key)\n * {AnimationFrameConfig[]} [frames] - An object containing data used to generate the frames for the animation\n * {string}           [defaultTextureKey=null] - The key of the texture all frames of the animation will use. Can be overridden on a per frame basis.\n * {integer}          [frameRate] - The frame rate of playback in frames per second (default 24 if duration is null)\n * {integer}          [duration] - How long the animation should play for in milliseconds. If not given its derived from frameRate.\n * {boolean}          [skipMissedFrames=true] - Skip frames if the time lags, or always advanced anyway?\n * {integer}          [delay=0] - Delay before starting playback. Value given in milliseconds.\n * {integer}          [repeat=0] - Number of times to repeat the animation (-1 for infinity)\n * {integer}          [repeatDelay=0] - Delay before the animation repeats. Value given in milliseconds.\n * {boolean}          [yoyo=false] - Should the animation yoyo? (reverse back down to the start) before repeating?\n * {boolean}          [showOnStart=false] - Should sprite.visible = true when the animation starts to play?\n * {boolean}          [hideOnComplete=false] - Should sprite.visible = false when the animation finishes?\n *\n * AnimationFrameConfig\n * {string}           key - The key that the animation will be associated with. i.e. sprite.animations.play(key)\n * {(string|number)}  frame - [description]\n * {number}           [duration=0] - [description]\n * {boolean}          [visible] - [description]\n *\n * GenerateFrameNamesConfig\n * {string}           [prefix=''] - [description]\n * {integer}          [start=0] - [description]\n * {integer}          [end=0] - [description]\n * {string}           [suffix=''] - [description]\n * {integer}          [zeroPad=0] - [description]\n * {boolean}          [frames=false] - [description]\n *\n * GenerateFrameNumbersConfig\n * {integer}          [start=0] - [At which frame the animation starts]\n * {integer}          [end=-1] - [At which frame the animation stops]\n * {boolean}          [first=false] - [description]\n * {boolean}          [frames=false] - [description]\n */\n\n/**\n * This is a helper class for your game animations.\n *\n * There is a easier way to load animations from JSON:\n * https://labs.phaser.io/edit.html?src=src\\animation\\from%20json.js\n *\n * The only problem with that approach is, that you can not use\n * generateFrameNames and generateFrameNumbers and with that not load\n * your frames from your atlas.\n *\n * The class needs a scene from you game to be able to create the animations.\n * Since the Animation Manager is global, any scene from your game is okay.\n * The class also needs the animation data to be able to create the animations.\n * We load a JSON upfront and get the data from the global cache.\n * @param scene [Any scene from your game]\n * @param data  [Animation data from the cache, loaded from JSON]\n */\nexport default class AnimationHelper {\n  private scene: Phaser.Scene\n  private animationData: any\n\n  constructor(scene: Phaser.Scene, data: any) {\n    this.scene = scene\n    this.animationData = data\n    this.createGameAnimations()\n  }\n\n  private createGameAnimations(): void {\n    for (const data of this.animationData.anims) {\n      let frames\n      const framesArray = []\n      if (data.frames.typeOfGeneration === 'generateFrameNames') {\n        frames = this.scene.anims.generateFrameNames(data.frames.key, {\n          prefix: data.frames.prefix || '',\n          start: data.frames.start || 0,\n          end: data.frames.end || 0,\n          suffix: data.frames.suffix || '',\n          zeroPad: data.frames.zeroPad || 0,\n          frames: data.frames.frames || false,\n        })\n      } else if (data.frames.typeOfGeneration === 'generateFrameNumbers') {\n        frames = this.scene.anims.generateFrameNumbers(data.frames.key, {\n          start: data.frames.start || 0,\n          end: data.frames.end || -1,\n          first: data.frames.first || false,\n          frames: data.frames.frames || false,\n        })\n      } else {\n        for (const i of data.frames) {\n          const frame = {\n            key: i.key,\n            frame: i.frame,\n            duration: i.duration || 0,\n            visible: i.visible,\n          }\n          framesArray.push(frame)\n        }\n      }\n\n      this.scene.anims.create({\n        key: data.key,\n        frames: frames || framesArray,\n        defaultTextureKey: data.defaultTextureKey || null,\n        frameRate: data.frameRate || 24,\n        duration: data.duration,\n        skipMissedFrames: data.skipMissedFrames || true,\n        delay: data.delay || 0,\n        repeat: data.repeat || 0,\n        repeatDelay: data.repeatDelay || 0,\n        yoyo: data.yoyo || false,\n        showOnStart: data.showOnStart || false,\n        hideOnComplete: data.hideOnComplete || false,\n      })\n    }\n  }\n}\n","import gameManager, { Emitter } from '../manager/GameManager'\r\nimport { BaseEvents } from '../../utils/enums'\r\nimport AnimationHelper from '../manager/AnimationManager'\r\nimport gameStore from '../../store/GameStore'\r\n\r\nexport default class BaseScene extends Phaser.Scene {\r\n  protected animationHelper?: AnimationHelper\r\n\r\n  public init(): void {\r\n    console.log(`init (${this.scene.key})`)\r\n    this.game.scene.dump()\r\n    Emitter.emit(BaseEvents.SceneInit, this)\r\n  }\r\n\r\n  public preload(): void {\r\n    console.log(`preload (${this.scene.key})`)\r\n    this.load.on('complete', () => {\r\n      this.animationHelper = new AnimationHelper(\r\n        this,\r\n        this.cache.json.get('animations')\r\n      )\r\n    })\r\n  }\r\n\r\n  public create(): void {\r\n    console.log(`create (${this.scene.key})`)\r\n    gameManager.resizeCamera(window.innerWidth, window.innerHeight)\r\n    gameManager.changeBackgroundColor(gameStore.config.backgroundColor)\r\n    Emitter.emit(BaseEvents.SceneCreated, this)\r\n    this.initListeners()\r\n  }\r\n\r\n  public update(time: number, delta: number): void {\r\n    console.log(`update (${this.scene.key})`)\r\n  }\r\n\r\n  protected initListeners(): void {}\r\n}\r\n","import { scenesKeys } from '../../utils/constants'\nimport gameManager from '../manager/GameManager'\nimport BaseScene from './BaseScene'\nimport gameStore from '../../store/GameStore'\n\nexport default class BootScene extends BaseScene {\n  constructor() {\n    super({\n      key: scenesKeys.Boot,\n    })\n  }\n\n  public preload(): void {\n    super.preload()\n    this.load.setBaseURL(process.env.PUBLIC_URL)\n    this.load.pack('preload', '/static/assets/sprites/pack.json', 'preload')\n  }\n\n  public update(time: number, delta: number): void {}\n\n  public create = async () => {\n    super.create()\n    gameStore.stopLoading()\n    if (gameStore.config.dev) {\n      this.startGame()\n    }\n  }\n\n  public startGame = (): void => {\n    gameStore.startGame()\n    gameManager.audio.playBg()\n    const initial = gameStore.config.fade\n    gameStore.changeConfig({ fade: false })\n    gameManager.loadNextMinigame()\n    gameStore.changeConfig({ fade: initial })\n    this.scene.stop(this.scene.key)\n  }\n}\n","import { scenesKeys } from '../../utils/constants'\nimport BaseScene from './BaseScene'\nimport { wait } from '../../utils/functions'\nimport gameManager from '../manager/GameManager'\n\nexport default class SplashscreenScene extends BaseScene {\n  constructor() {\n    super({\n      key: scenesKeys.Splashscreen,\n    })\n  }\n\n  public create(): void {\n    super.create()\n    const graphics = this.add.graphics()\n    graphics.fillStyle(0xff3300, 1)\n    graphics.fillRect(100, 200, 600, 300)\n    graphics.fillRect(100, 100, 100, 100)\n    this.add.text(120, 110, this.scene.key)\n  }\n\n  public update(time: number, delta: number): void {}\n}\n","import { scenesKeys } from '../../utils/constants'\nimport BaseScene from './BaseScene'\n\nexport default class HomescreenScene extends BaseScene {\n  constructor() {\n    super({\n      key: scenesKeys.Homescreen,\n    })\n  }\n\n  public create(): void {\n    super.create()\n    const graphics = this.add.graphics()\n    graphics.fillStyle(0xff9933, 1)\n    graphics.fillRect(100, 200, 600, 300)\n    graphics.fillRect(200, 100, 100, 100)\n    this.add.text(220, 110, this.scene.key)\n  }\n\n  public update(time: number, delta: number): void {}\n}\n","import { TweenLite } from 'gsap'\r\nimport { GameBackgroundColor } from './types'\r\n\r\nexport const wait = (ms: number): Promise<TimerHandler> =>\r\n  new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nexport const gameWait = (\r\n  clock: Phaser.Time.Clock,\r\n  ms: number\r\n): Promise<Phaser.Time.TimerEvent> =>\r\n  new Promise(resolve => {\r\n    return clock.addEvent({\r\n      callback: resolve,\r\n      delay: ms,\r\n    })\r\n  })\r\n\r\nexport const randomRange = (min: number, max: number): number => {\r\n  return Math.random() * (max - min) + min\r\n}\r\n\r\nexport const promiseAnimation = (animation: TweenLite | gsap.Animation) => {\r\n  return new Promise(resolve =>\r\n    animation.eventCallback('onComplete', async () => {\r\n      resolve()\r\n    })\r\n  )\r\n}\r\n\r\nexport const shuffle = <T>(a: T[]): T[] => {\r\n  for (let i = a.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1))\r\n    ;[a[i], a[j]] = [a[j], a[i]]\r\n  }\r\n\r\n  return a\r\n}\r\n\r\nexport const gameBackgroundColorToCss = (\r\n  backgroundColor: GameBackgroundColor\r\n): string => {\r\n  if (typeof backgroundColor === 'object') {\r\n    const { r, g, b, a } = backgroundColor\r\n    return `rgba(${r},${g},${b},${a})`\r\n  }\r\n\r\n  return String(backgroundColor)\r\n}\r\n\r\nexport const randomString = (length: number) =>\r\n  Math.random()\r\n    .toString(36)\r\n    .substring(length)\r\n","import { ContainerConstructor } from '../../utils/interfaces'\nimport gameStore from '../../store/GameStore'\nimport { Emitter } from '../manager/GameManager'\nimport { GameEvents } from '../../utils/enums'\nimport { randomRange } from '../../utils/functions'\n\nexport default class Spam extends Phaser.GameObjects.Container {\n  private readonly spamContent?: Phaser.GameObjects.Sprite\n  private readonly closeIcon?: Phaser.GameObjects.Sprite\n  private readonly texture: string\n\n  get isAnimated() {\n    return !!(\n      this.spamContent &&\n      this.spamContent.anims &&\n      this.spamContent.anims.animationManager.get(this.texture)\n    )\n  }\n\n  constructor(params: ContainerConstructor & { texture: string }) {\n    super(params.scene, params.x, params.y, params.children)\n    this.texture = params.texture\n    this.spamContent = this.createSpamContent(params.texture)\n    this.add(this.spamContent)\n\n    this.closeIcon = this.createCloseIcon()\n    this.add(this.closeIcon)\n\n    // set X & Y of spam container (80 for UI -> have to be replace)\n    this.x = randomRange(\n      0,\n      window.innerWidth - this.spamContent.width / gameStore.ratioResolution\n    )\n    this.y = randomRange(\n      80,\n      window.innerHeight - this.spamContent.height / gameStore.ratioResolution\n    )\n\n    params.scene.add.existing(this)\n  }\n\n  public update(): void {\n    if (this.isAnimated) {\n      this.spamContent!.anims.play(this.texture, true)\n    }\n  }\n\n  private createSpamContent = (\n    spamTexture: string\n  ): Phaser.GameObjects.Sprite => {\n    const sprite = this.scene.add.sprite(0, 0, spamTexture).setOrigin(0, 0)\n\n    // defining the dimensions of the sprite\n    const spriteAnim = sprite.anims.animationManager.get(this.texture)\n    if (!!spriteAnim) {\n      const [width, height] = [\n        spriteAnim.frames[0].frame.width,\n        spriteAnim.frames[0].frame.height,\n      ]\n      sprite.width = width\n      sprite.height = height\n    }\n    sprite.setScale(\n      1 / gameStore.ratioResolution,\n      1 / gameStore.ratioResolution\n    )\n\n    sprite.setInteractive()\n    sprite.input.hitArea.setSize(sprite.width, sprite.height) // defining the dimensions of the input hit area\n    sprite.on('pointerdown', () => {\n      Emitter.emit(GameEvents.SpamClicked, this)\n      console.log('EMITED ' + GameEvents.SpamClicked)\n    })\n\n    return sprite\n  }\n\n  private createCloseIcon = (): Phaser.GameObjects.Sprite => {\n    const x = this.spamContent!.width / gameStore.ratioResolution\n    const close = this.scene.add\n      .sprite(x, 0, 'close')\n      .setOrigin(1, 0)\n      .setScale(1 / gameStore.ratioResolution, 1 / gameStore.ratioResolution)\n    close.setInteractive()\n    close.on('pointerdown', () => {\n      Emitter.emit(GameEvents.SpamDestroyed, this)\n      console.log('EMITED ' + GameEvents.SpamDestroyed)\n      this.destroy(true)\n    })\n    close.on('pointerover', () => {\n      close.setTexture('close_active')\n    })\n    close.on('pointerout', () => {\n      close.setTexture('close')\n    })\n    return close\n  }\n}\n","export class List<T> extends Array<T> {\n  constructor(items?: T[]) {\n    if (items && items.length > 0) {\n      super(...items)\n    } else {\n      super(0)\n    }\n  }\n\n  public random(): T {\n    return this[Math.floor(Math.random() * this.length)]\n  }\n\n  public has(searchedValue: T): boolean {\n    return this.find(item => item === searchedValue) !== undefined\n  }\n\n  public remove(searchedValue: T): number {\n    const indexToRemove = this.indexOf(searchedValue)\n    this.splice(indexToRemove, 1)\n\n    return this.length\n  }\n\n  public clear(): void {\n    this.length = 0\n  }\n\n  public first(): T {\n    return this[0]\n  }\n\n  public last(): T {\n    return this[this.length - 1]\n  }\n}\n","import BaseScene from './BaseScene'\r\nimport gameManager, { Emitter } from '../manager/GameManager'\r\nimport { GameEvents } from '../../utils/enums'\r\n\r\nexport default abstract class MinigameScene extends BaseScene {\r\n  protected onSuccess(): void {\r\n    console.log('you won')\r\n    gameManager.loadPostMinigame()\r\n  }\r\n\r\n  protected onFailure(): void {\r\n    console.log('you fail')\r\n    gameManager.looseLife()\r\n    gameManager.loadPostMinigame()\r\n  }\r\n\r\n  protected initListeners(): void {\r\n    super.initListeners()\r\n    Emitter.on(GameEvents.RemainingTimeOver, this.onFailure)\r\n  }\r\n}\r\n","import { scenesKeys } from '../../../utils/constants'\nimport Spam from '../../objects/Spam'\nimport { List } from '../../../utils/extensions'\nimport { randomRange } from '../../../utils/functions'\nimport { GameEvents } from '../../../utils/enums'\nimport gameManager, { Emitter } from '../../manager/GameManager'\nimport MinigameScene from '../MinigameScene'\n\nconst SOUND_SPAM_DESTROYED = 'explosion'\nconst SOUND_CLOSE_CLICK = 'beep'\n\nexport default class SpamGameScene extends MinigameScene {\n  public spams: List<Spam> = new List<Spam>()\n  constructor() {\n    super({\n      key: scenesKeys.SpamGame,\n    })\n  }\n\n  public create() {\n    super.create()\n    this.spams = new List<Spam>()\n    this.input.setGlobalTopOnly(true)\n\n    for (let nbrSpam = 0; nbrSpam < 10; nbrSpam++) {\n      this.spams.push(this.createSpam())\n    }\n  }\n\n  public update(time: number, delta: number): void {\n    this.spams.forEach(spam => spam.update())\n  }\n\n  protected initListeners(): void {\n    super.initListeners()\n    Emitter.on(GameEvents.SpamDestroyed, (spam: Spam) => {\n      gameManager.audio.playSfx(SOUND_SPAM_DESTROYED)\n      this.spams.remove(spam)\n      if (this.spams.length === 0) {\n        this.onSuccess()\n      }\n    })\n    Emitter.on(GameEvents.SpamClicked, (spam: Spam) => {\n      gameManager.audio.playSfx(SOUND_CLOSE_CLICK, {\n        detune: randomRange(-100, 100),\n      })\n      for (let i = 0; i < randomRange(1, 4); i++) {\n        this.spams.push(this.createSpam())\n      }\n    })\n  }\n\n  private createSpam(): Spam {\n    const availablesSpam = new List<string>([\n      'sexyAnimation',\n      'soldAnimation',\n      'pizzaAnimation',\n      'magicBottleAnimation',\n      'musclesAnimation',\n      'playAnimation',\n      'toothAnimation',\n      'hairAnimation',\n      'gamblingAnimation',\n      'yoAnimation',\n    ])\n\n    return new Spam({\n      scene: this,\n      x: 0,\n      y: 0,\n      texture: availablesSpam.random(),\n    })\n  }\n}\n","import { scenesKeys } from '../../../utils/constants'\nimport { GameEvents } from '../../../utils/enums'\nimport gameManager, { Emitter } from '../../manager/GameManager'\nimport MinigameScene from '../MinigameScene'\nimport gameStore from '../../../store/GameStore'\nimport { gameWait, randomRange } from '../../../utils/functions'\n\nconst SOUND_WALK = 'beep'\nconst SOUND_GET_SANDWICH = 'tada'\n\nexport default class SandwichGameScene extends MinigameScene {\n  private skies?: Phaser.GameObjects.Sprite[] = []\n  private buildings?: Phaser.GameObjects.Sprite[] = []\n  private landscapes?: Phaser.GameObjects.Sprite[] = []\n  private streetLights?: Phaser.GameObjects.Sprite[] = []\n  private grounds?: Phaser.GameObjects.Sprite[] = []\n  private lastKeyPressed?: 37 | 39\n  private playerTexture: string\n  private playerWinTexture: string\n  private sandwichTexture: string\n  private player?: Phaser.GameObjects.Sprite\n  private sandwich?: Phaser.GameObjects.Sprite\n  private currentFrame: integer = 0\n  private leftBtn?: Phaser.GameObjects.Sprite\n  private rightBtn?: Phaser.GameObjects.Sprite\n  private isControlsEnabled?: boolean = true\n\n  constructor() {\n    super({\n      key: scenesKeys.SandwichGame,\n    })\n\n    this.playerTexture = 'tokiRunAnimation'\n    this.playerWinTexture = 'tokiWinAnimation'\n    this.sandwichTexture = 'sandwichFlyingAnimation'\n  }\n\n  public create() {\n    super.create()\n    this.resetClassVariables()\n    this.initBackground()\n    this.createControls()\n  }\n\n  public update(time: number, delta: number): void {\n    this.skies!.forEach(sky => {\n      sky!.x -= 0.15\n    })\n\n    Array.from([\n      this.skies,\n      this.buildings,\n      this.landscapes,\n      this.streetLights,\n      this.grounds,\n    ]).forEach(element => {\n      // Loop through props sprites to determine if we have to clone a props to avoid blank\n      if (\n        element![element!.length - 1].x +\n          element![element!.length - 1].width / gameStore.ratioResolution <\n        this.game.config.width\n      ) {\n        if (element === this.skies) {\n          this.createCloneBackgroundElement(element!, 'sky')\n        } else if (element === this.buildings) {\n          this.createCloneBackgroundElement(element!, 'building')\n        } else if (element === this.landscapes) {\n          this.createCloneBackgroundElement(element!, 'landscape')\n        } else if (element === this.streetLights) {\n          this.createCloneBackgroundElement(element!, 'streetLights')\n        } else if (element === this.grounds) {\n          this.createCloneBackgroundElement(element!, 'ground')\n        }\n      }\n    })\n  }\n\n  protected initListeners(): void {\n    super.initListeners()\n    Emitter.on(GameEvents.SandwichPicked, () => {\n      gameManager.suspendMinigame()\n      this.playWinAnimation()\n      this.sandwich!.destroy()\n      this.disableMobileControls()\n      this.isControlsEnabled = false\n    })\n  }\n\n  private resetClassVariables(): void {\n    this.skies = []\n    this.buildings = []\n    this.landscapes = []\n    this.streetLights = []\n    this.grounds = []\n    this.isControlsEnabled = true\n  }\n\n  private createPlayer = (playerTexture: string): Phaser.GameObjects.Sprite => {\n    const sprite = this.add\n      .sprite(\n        50,\n        Number(this.game.config.height) -\n          this.grounds![0].height / gameStore.ratioResolution,\n        playerTexture\n      )\n      .setOrigin(0, 1)\n\n    const spriteAnim = sprite.anims.animationManager.get(this.playerTexture)\n\n    if (!!spriteAnim) {\n      const [width, height] = [\n        spriteAnim.frames[0].frame.width,\n        spriteAnim.frames[0].frame.height,\n      ]\n      sprite.width = width\n      sprite.height = height\n    }\n\n    sprite.setOrigin(0, 1).setScale(1 / gameStore.ratioResolution)\n\n    return sprite\n  }\n\n  private createSandwich = (\n    sandwichTexture: string\n  ): Phaser.GameObjects.Sprite => {\n    const offset = 200\n    const sprite = this.add\n      .sprite(\n        this.grounds![0].x +\n          this.grounds![0].width / gameStore.ratioResolution -\n          offset,\n        Number(this.game.config.height) -\n          this.grounds![0].height / gameStore.ratioResolution,\n        sandwichTexture\n      )\n      .setOrigin(1, 1)\n      .setScale(1 / gameStore.ratioResolution)\n\n    const spriteAnim = sprite.anims.animationManager.get(this.sandwichTexture)\n\n    if (!!spriteAnim) {\n      const [width, height] = [\n        spriteAnim.frames[0].frame.width,\n        spriteAnim.frames[0].frame.height,\n      ]\n      sprite.width = width\n      sprite.height = height\n    }\n\n    return sprite\n  }\n\n  private animateGame(): void {\n    gameManager.audio.playSfx(SOUND_WALK, {\n      detune: randomRange(-500, 500),\n    })\n    const speedFactor = 3\n\n    Array.from([\n      this.skies,\n      this.buildings,\n      this.landscapes,\n      this.streetLights,\n      this.grounds,\n    ]).forEach(element => {\n      let nativeSpeed = 1\n\n      if (element === this.skies) {\n        nativeSpeed = 2\n      } else if (element === this.buildings) {\n        nativeSpeed = 4\n      } else if (element === this.landscapes) {\n        nativeSpeed = 5\n      } else if (element === this.streetLights) {\n        nativeSpeed = 6\n      } else if (element === this.grounds) {\n        nativeSpeed = 7\n      }\n\n      element!.forEach(props => {\n        props.x -= nativeSpeed * speedFactor\n      })\n    })\n\n    this.sandwich!.x -= 7 * speedFactor\n\n    this.player!.anims.play(this.playerTexture, true, this.currentFrame)\n    this.player!.anims.stop()\n\n    this.currentFrame += 1\n\n    if (this.currentFrame >= 8) {\n      this.currentFrame = 0\n    }\n  }\n\n  private initBackground(): void {\n    this.createBackgroundElement(this.skies!, 'sky')\n    this.createBackgroundElement(this.grounds!, 'ground')\n    this.createBackgroundElement(this.buildings!, 'building')\n    this.createBackgroundElement(this.landscapes!, 'landscape')\n    this.createBackgroundElement(this.streetLights!, 'streetLights')\n\n    Array.from(['keydown_LEFT', 'keydown_RIGHT']).forEach(keyCode => {\n      this.scene.scene.input.keyboard.on(keyCode, (e: KeyboardEvent) => {\n        if (this.lastKeyPressed !== e.keyCode && this.isControlsEnabled) {\n          this.animateGame()\n          this.lastKeyPressed = e.keyCode as 37 | 39\n        }\n      })\n    })\n\n    this.player = this.createPlayer(this.playerTexture)\n    this.player!.anims.play(this.playerTexture, true, 3)\n    this.player!.anims.stop()\n\n    this.sandwich = this.createSandwich(this.sandwichTexture)\n    this.sandwich!.anims.play(this.sandwichTexture, true, 0)\n\n    Array.from([this.player, this.sandwich]).forEach(element => {\n      this.physics.world.enable(element)\n\n      element.setDisplaySize(\n        element.width / gameStore.ratioResolution - 1,\n        element.height / gameStore.ratioResolution - 1\n      )\n    })\n\n    const collider = this.physics.add.overlap(\n      this.player!,\n      this.sandwich,\n      () => {\n        Emitter.emit(GameEvents.SandwichPicked, this)\n        this.physics.world.removeCollider(collider)\n      }\n    )\n  }\n\n  private createBackgroundElement(\n    array: Phaser.GameObjects.Sprite[],\n    texture: string\n  ): void {\n    array![0] = this.add\n      .sprite(0, Number(this.game.config.height), texture)\n      .setOrigin(0, 1)\n      .setScale(1 / gameStore.ratioResolution)\n  }\n\n  private createCloneBackgroundElement(\n    array: Phaser.GameObjects.Sprite[],\n    texture: string\n  ): void {\n    array[array.length + 1] = this.add\n      .sprite(\n        array[0].width / gameStore.ratioResolution,\n        Number(this.game.config.height),\n        texture\n      )\n      .setOrigin(0, 1)\n      .setScale(1 / gameStore.ratioResolution)\n  }\n\n  private createControls(): void {\n    this.leftBtn = this.add\n      .sprite(\n        Number(this.game.config.width) / 2,\n        Number(this.game.config.height) - 50,\n        'btn_left_on'\n      )\n      .setDepth(1000)\n      .setOrigin(0.5, 1)\n      .setScale(1 / gameStore.ratioResolution)\n    this.leftBtn.x =\n      this.leftBtn.x - this.leftBtn.width / gameStore.ratioResolution\n\n    this.rightBtn = this.add\n      .sprite(\n        Number(this.game.config.width) / 2,\n        Number(this.game.config.height) - 50,\n        'btn_right_on'\n      )\n      .setDepth(1000)\n      .setOrigin(0.5, 1)\n      .setScale(1 / gameStore.ratioResolution)\n    this.rightBtn.x =\n      this.rightBtn.x + this.rightBtn.width / gameStore.ratioResolution\n\n    Array.from([this.leftBtn, this.rightBtn]).forEach(btn => {\n      btn.setInteractive()\n      btn.input.hitArea.setSize(btn.width, btn.height)\n\n      btn.on('pointerdown', () => {\n        if (this.isControlsEnabled) {\n          if (btn === this.leftBtn) {\n            this.leftBtn.setTexture('btn_left_off')\n            this.rightBtn!.setTexture('btn_right_on')\n          } else {\n            this.leftBtn!.setTexture('btn_left_on')\n            this.rightBtn!.setTexture('btn_right_off')\n          }\n          this.animateGame()\n        }\n      })\n    })\n  }\n\n  private playWinAnimation = async () => {\n    gameManager.audio.playSfx(SOUND_GET_SANDWICH, { volume: 0.2, delay: 0.3 })\n    return new Promise(resolve => {\n      const animation = this.player!.anims.play(this.playerWinTexture, true, 0)\n      animation.on('animationcomplete', async () => {\n        await gameWait(this.time, 500)\n        this.onSuccess()\n        resolve()\n      })\n    })\n  }\n\n  private disableMobileControls(): void {\n    this.leftBtn!.setTexture('btn_left_off')\n    this.rightBtn!.setTexture('btn_right_off')\n  }\n}\n","import { SpriteConstructor } from '../../../utils/interfaces'\r\nimport gameStore from '../../../store/GameStore'\r\nimport { Emitter } from '../../manager/GameManager'\r\nimport { GameEvents } from '../../../utils/enums'\r\nimport { Omit } from '../../../utils/types'\r\n\r\nexport type Code = '◻' | '▲' | '|||' | '☰' | 'O' | 'U'\r\n\r\nexport default class KeyboardPasswordButton extends Phaser.GameObjects.Sprite {\r\n  public code: Code\r\n\r\n  constructor(\r\n    params: Omit<SpriteConstructor, 'texture'> & {\r\n      code: Code\r\n      style?: 'keyboard' | 'symbol'\r\n    }\r\n  ) {\r\n    params.style = params.style || 'keyboard'\r\n    let texture = `mdp_${params.style}_1`\r\n    switch (params.code) {\r\n      case '◻':\r\n        texture = `mdp_${params.style}_1`\r\n        break\r\n      case '▲':\r\n        texture = `mdp_${params.style}_2`\r\n        break\r\n      case '|||':\r\n        texture = `mdp_${params.style}_3`\r\n        break\r\n      case '☰':\r\n        texture = `mdp_${params.style}_4`\r\n        break\r\n      case 'O':\r\n        texture = `mdp_${params.style}_5`\r\n        break\r\n      case 'U':\r\n        texture = `mdp_${params.style}_6`\r\n        break\r\n    }\r\n    super(params.scene, params.x, params.y, texture, params.frame)\r\n    this.code = params.code\r\n\r\n    this.setOrigin(0, 0).setScale(\r\n      1 / gameStore.ratioResolution,\r\n      1 / gameStore.ratioResolution\r\n    )\r\n\r\n    if (params.style === 'keyboard') {\r\n      this.setInteractive()\r\n      this.on('pointerover', () => {\r\n        this.setTexture(`${texture}_hover`)\r\n      })\r\n      this.on('pointerout', () => {\r\n        this.setTexture(`${texture}`)\r\n      })\r\n      this.on('pointerdown', () => {\r\n        Emitter.emit(GameEvents.KeyboardPasswordButtonClicked, this.code)\r\n      })\r\n    }\r\n\r\n    params.scene.add.existing(this)\r\n  }\r\n}\r\n","import { ContainerConstructor } from '../../../utils/interfaces'\r\nimport KeyboardPasswordButton, { Code } from './KeyboardPasswordButton'\r\nimport { List } from '../../../utils/extensions'\r\nimport gameStore from '../../../store/GameStore'\r\nimport { shuffle } from '../../../utils/functions'\r\n\r\nconst COLUMNS = 3\r\nconst ROWS = 2\r\n\r\nexport default class KeyboardContainer extends Phaser.GameObjects.Container {\r\n  private readonly buttons: List<KeyboardPasswordButton> = new List([])\r\n\r\n  constructor(params: ContainerConstructor) {\r\n    super(params.scene, params.x, params.y, params.children)\r\n\r\n    Array.from(shuffle(['◻', '▲', '|||', '☰', 'O', 'U'])).forEach(\r\n      (code, index) => {\r\n        this.buttons.push(\r\n          new KeyboardPasswordButton({\r\n            scene: params.scene,\r\n            code: code as Code,\r\n            x: ((index % COLUMNS) * 280) / gameStore.ratioResolution,\r\n            y: ((index % ROWS) * 260) / gameStore.ratioResolution,\r\n          })\r\n        )\r\n      }\r\n    )\r\n\r\n    this.add(this.buttons)\r\n    params.scene.add.existing(this)\r\n  }\r\n\r\n  public getButton = (code: Code): KeyboardPasswordButton | undefined =>\r\n    this.buttons.find(button => button.code === code)\r\n}\r\n","import { ContainerConstructor } from '../../../utils/interfaces'\r\nimport gameStore from '../../../store/GameStore'\r\nimport { Emitter } from '../../manager/GameManager'\r\nimport { GameEvents } from '../../../utils/enums'\r\nimport { List } from '../../../utils/extensions'\r\nimport { scenesKeys } from '../../../utils/constants'\r\nimport PasswordGameScene from '../../scenes/action/PasswordGameScene'\r\nimport { gameWait } from '../../../utils/functions'\r\n\r\nconst passwordCharMap = {\r\n  1: -100,\r\n  2: -60,\r\n  3: -20,\r\n  4: 20,\r\n  5: 60,\r\n}\r\n\r\nexport default class ComputerPasswordScreen extends Phaser.GameObjects\r\n  .Container {\r\n  public readonly screen: Phaser.GameObjects.Sprite\r\n  private stars: List<Phaser.GameObjects.Sprite> = new List()\r\n\r\n  constructor(params: ContainerConstructor) {\r\n    super(params.scene, params.x, params.y)\r\n    this.screen = this.createScreenSprite()\r\n    this.add(this.screen)\r\n    const passwordGame = this.scene.scene.get(\r\n      scenesKeys.PasswordGame\r\n    ) as PasswordGameScene\r\n\r\n    Emitter.once(GameEvents.KeyboardPasswordButtonClicked, () => {\r\n      this.screen.setTexture('mdp_screen_2')\r\n    })\r\n    Emitter.on(GameEvents.KeyboardPasswordButtonClicked, async () => {\r\n      if (passwordGame.typedPassword.length < passwordGame.password.length) {\r\n        this.addStarChar(passwordGame.typedPassword.length)\r\n      } else if (\r\n        passwordGame.typedPassword.length === passwordGame.password.length\r\n      ) {\r\n        this.addStarChar(passwordGame.typedPassword.length)\r\n        await gameWait(this.scene.time, 30)\r\n        this.remove(this.stars)\r\n      }\r\n    })\r\n    params.scene.add.existing(this)\r\n  }\r\n\r\n  private addStarChar = (passwordCount: number): void => {\r\n    this.stars.push(this.createStar(passwordCharMap[passwordCount]))\r\n    this.add(this.stars.last())\r\n  }\r\n\r\n  private createStar = (offset: number): Phaser.GameObjects.Sprite => {\r\n    const sprite = this.scene.add.sprite(offset, -150, 'mdp_star')\r\n    sprite\r\n      .setOrigin(0.5, 1)\r\n      .setScale(1 / gameStore.ratioResolution, 1 / gameStore.ratioResolution)\r\n\r\n    return sprite\r\n  }\r\n\r\n  private createScreenSprite = (): Phaser.GameObjects.Sprite => {\r\n    const sprite = this.scene.add.sprite(0, 0, 'mdp_screen_1')\r\n    sprite\r\n      .setOrigin(0.5, 1)\r\n      .setScale(1 / gameStore.ratioResolution, 1 / gameStore.ratioResolution)\r\n\r\n    return sprite\r\n  }\r\n}\r\n","import { scenesKeys } from '../../../utils/constants'\r\nimport gameManager, { Emitter } from '../../manager/GameManager'\r\nimport MinigameScene from '../MinigameScene'\r\nimport KeyboardContainer from '../../objects/password-game/KeyboardContainer'\r\nimport KeyboardPasswordButton, {\r\n  Code,\r\n} from '../../objects/password-game/KeyboardPasswordButton'\r\nimport { gameWait, shuffle } from '../../../utils/functions'\r\nimport { GameEvents } from '../../../utils/enums'\r\nimport ComputerPasswordScreen from '../../objects/password-game/ComputerPasswordScreen'\r\nimport gameStore from '../../../store/GameStore'\r\n\r\nconst PASSWORD_DISPLAY_TIME = 3000\r\nconst PAW_DISPLAY_TIME = 180\r\n\r\nconst EASY_PASSWORD_LENGTH = 3\r\nconst MEDIUM_PASSWORD_LENGTH = 4\r\nconst HARD_PASSWORD_LENGTH = 5\r\n\r\nconst SOUND_PASSWORD_INVALID = 'error'\r\nconst SOUND_KEYBOARD_BUTTON = 'beep'\r\n\r\nexport default class PasswordGameScene extends MinigameScene {\r\n  public password: Code[] = []\r\n  public typedPassword: Code[] = []\r\n  private keyboard?: KeyboardContainer\r\n  private computerScreen?: ComputerPasswordScreen\r\n\r\n  constructor() {\r\n    super({\r\n      key: scenesKeys.PasswordGame,\r\n    })\r\n  }\r\n\r\n  public create = async () => {\r\n    super.create()\r\n    gameManager.suspendMinigame()\r\n    this.typedPassword = []\r\n    this.password = this.createPassword()\r\n    await this.playIntroduction()\r\n    gameManager.resumeMinigame()\r\n    this.computerScreen = new ComputerPasswordScreen({\r\n      scene: this,\r\n      x: window.innerWidth / 2,\r\n      y: window.innerHeight - 200,\r\n    })\r\n    this.keyboard = new KeyboardContainer({\r\n      scene: this,\r\n      y: window.innerHeight - 220,\r\n      x: window.innerWidth / 2,\r\n    })\r\n    this.keyboard.x -= this.keyboard.getBounds().width / 2\r\n  }\r\n\r\n  public update = (time: number, delta: number): void => {}\r\n\r\n  protected initListeners(): void {\r\n    super.initListeners()\r\n    Emitter.on(GameEvents.KeyboardPasswordButtonClicked, async (code: Code) => {\r\n      if (this.typedPassword.length === this.password.length) {\r\n        return\r\n      }\r\n      gameManager.audio.playSfx(SOUND_KEYBOARD_BUTTON)\r\n      this.typedPassword.push(code)\r\n      if (this.typedPassword.length <= this.password.length) {\r\n        const button = this.keyboard!.getButton(code)\r\n        const texture = button!.texture\r\n        if (!this.game.device.os.desktop) {\r\n          button!.setTexture(`${texture.key}_hover`)\r\n        }\r\n        const paw = this.add\r\n          .sprite(button!.getBounds().x, button!.getBounds().y, 'mdp_paw')\r\n          .setScale(1 / gameStore.ratioResolution)\r\n          .setOrigin(-0.5, -0.25)\r\n        gameWait(this.time, PAW_DISPLAY_TIME).then(() => {\r\n          if (!this.game.device.os.desktop) {\r\n            button!.setTexture(`${texture.key}`)\r\n          }\r\n          paw.destroy()\r\n        })\r\n      }\r\n      if (\r\n        this.typedPassword.length === this.password.length &&\r\n        this.password.every(\r\n          (value, index) => this.typedPassword[index] === value\r\n        )\r\n      ) {\r\n        gameManager.suspendMinigame()\r\n        this.computerScreen!.screen.setDepth(1000).anims.play(\r\n          'mdp_valid_animation'\r\n        )\r\n        await gameWait(this.time, 2000)\r\n        this.onSuccess()\r\n      } else if (\r\n        this.typedPassword.length === this.password.length &&\r\n        !this.password.every(\r\n          (value, index) => this.typedPassword[index] === value\r\n        )\r\n      ) {\r\n        gameManager.suspendMinigame()\r\n        this.computerScreen!.screen.setDepth(1000).anims.play(\r\n          'mdp_nope_animation'\r\n        )\r\n        gameManager.audio.playSfx(SOUND_PASSWORD_INVALID, {\r\n          volume: 0.4,\r\n          delay: 0.1,\r\n        })\r\n        gameWait(this.time, 2000).then(() => {\r\n          this.onFailure()\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  private playIntroduction = async () => {\r\n    return new Promise(resolve => {\r\n      const buttons: KeyboardPasswordButton[] = []\r\n      const animation = this.scene.scene.add\r\n        .sprite(window.innerWidth / 2, window.innerHeight, 'mdp_paper')\r\n        .setScale(1 / gameStore.ratioResolution)\r\n        .setOrigin(0.5, 1)\r\n        .anims.play('mdp_paper_animation')\r\n\r\n      animation.on('animationcomplete', async () => {\r\n        this.password.forEach((code, index) => {\r\n          buttons.push(\r\n            new KeyboardPasswordButton({\r\n              scene: this,\r\n              style: 'symbol',\r\n              code: code as Code,\r\n              x:\r\n                window.innerWidth / 2 -\r\n                115 +\r\n                (index * 160) / gameStore.ratioResolution,\r\n              y: window.innerHeight - 240,\r\n            }).setOrigin(0.5, 1)\r\n          )\r\n        })\r\n\r\n        await gameWait(this.time, PASSWORD_DISPLAY_TIME)\r\n        animation.destroy()\r\n        buttons.forEach(button => button.destroy())\r\n        resolve()\r\n      })\r\n    })\r\n  }\r\n\r\n  private createPassword = (): Code[] => {\r\n    let password = shuffle(['◻', '▲', '|||', '☰', 'O', 'U'])\r\n    if (gameStore.difficulty <= 3) {\r\n      password = password.slice(0, EASY_PASSWORD_LENGTH)\r\n    } else if (gameStore.difficulty <= 6) {\r\n      password = password.slice(0, MEDIUM_PASSWORD_LENGTH)\r\n    } else {\r\n      password = password.slice(0, HARD_PASSWORD_LENGTH)\r\n    }\r\n    return Array.from(password).reduce(\r\n      (acc, value, index) => {\r\n        if (index <= 4) {\r\n          acc.push(value as Code)\r\n        }\r\n\r\n        return acc\r\n      },\r\n      [] as Code[]\r\n    )\r\n  }\r\n}\r\n","import { scenesKeys } from '../../utils/constants'\r\nimport BaseScene from './BaseScene'\r\nimport { gameWait } from '../../utils/functions'\r\nimport gameManager from '../manager/GameManager'\r\n\r\nconst SOUND_LOST = 'hit'\r\nconst SOUND_WIN = 'success'\r\nconst DISPLAY_TIME = 3000\r\n\r\nexport default class PostMinigameScene extends BaseScene {\r\n  constructor() {\r\n    super({\r\n      key: scenesKeys.PostMinigameScene,\r\n    })\r\n  }\r\n\r\n  public create = async () => {\r\n    super.create()\r\n    this.createFillerGraphics()\r\n    const { hasTokiJustLost, isTokiDead } = gameManager\r\n\r\n    if (hasTokiJustLost) {\r\n      gameManager.audio.playSfx(SOUND_LOST, { volume: 0.2, delay: 0.5 })\r\n    } else {\r\n      gameManager.audio.playSfx(SOUND_WIN, { volume: 0.2, delay: 0.3 })\r\n    }\r\n\r\n    await gameWait(this.time, DISPLAY_TIME)\r\n    gameManager.resetTokiStatus()\r\n\r\n    if (isTokiDead) {\r\n      gameManager.loadDeathscreen()\r\n    } else {\r\n      gameManager.loadNextMinigame()\r\n    }\r\n  }\r\n\r\n  private createFillerGraphics = (): void => {\r\n    const graphics = this.add.graphics()\r\n    graphics.fillStyle(0xff3300, 0)\r\n    graphics.fillRect(100, 200, 600, 300)\r\n    graphics.fillRect(100, 100, 100, 100)\r\n    this.add.text(-100, -100, this.scene.key)\r\n  }\r\n}\r\n","import { scenesKeys } from '../../utils/constants'\r\nimport BaseScene from './BaseScene'\r\n\r\nexport default class DeathscreenScene extends BaseScene {\r\n  constructor() {\r\n    super({\r\n      key: scenesKeys.Deathscreen,\r\n    })\r\n  }\r\n\r\n  public create(): void {\r\n    super.create()\r\n    const graphics = this.add.graphics()\r\n    graphics.fillStyle(0xff3300, 1)\r\n    graphics.fillRect(100, 200, 600, 300)\r\n    graphics.fillRect(100, 100, 100, 100)\r\n    this.add.text(120, 110, this.scene.key)\r\n  }\r\n}\r\n","export const yellow = '#fcdb73'\r\nexport const blue = '#1334ff'\r\nexport const pink = '#f99bf3'\r\nexport const green = '#6adeb8'\r\n\r\nexport const orange = '#ff6b35'\r\nexport const lightRed = '#ff5a5a'\r\nexport const red = '#dc103c'\r\n\r\nexport const white = '#ffffff'\r\nexport const lightGray = '#cecdd0'\r\nexport const mediumGray = '#948d9b'\r\nexport const darkGray = '#4d4851'\r\nexport const black = '#28252a'\r\n\r\nexport default [\r\n  yellow,\r\n  blue,\r\n  pink,\r\n  green,\r\n  orange,\r\n  lightRed,\r\n  red,\r\n  white,\r\n  lightGray,\r\n  mediumGray,\r\n  darkGray,\r\n  black,\r\n]\r\n","import {\n  SpamGameScene,\n  PasswordGameScene,\n  SandwichGameScene,\n  BootScene,\n  DeathscreenScene,\n  HomescreenScene,\n  PostMinigameScene,\n  SplashscreenScene,\n} from '../game/scenes'\nimport { GameBackgroundColor } from './types'\nimport { green } from './colors'\n\nexport interface HFLGameConfig {\n  dev: boolean\n  suspended: boolean\n  fade: boolean\n  minigameDuration: number\n  backgroundColor: GameBackgroundColor\n  fadeColor: string\n}\n\nexport const gameConfig: GameConfig = {\n  antialias: false,\n  backgroundColor: green,\n  input: {\n    gamepad: false,\n    keyboard: true,\n    mouse: true,\n    touch: true,\n  },\n  physics: {\n    arcade: {\n      debug: true,\n      gravity: { y: 0 },\n    },\n    default: 'arcade',\n  },\n  title: 'Harder, Faster, Looser',\n  version: '1.0',\n  width: window.innerWidth,\n  height: window.innerHeight,\n  zoom: 3,\n  parent: 'game',\n  scene: [\n    BootScene,\n    SplashscreenScene,\n    HomescreenScene,\n\n    SpamGameScene,\n    SandwichGameScene,\n    PasswordGameScene,\n\n    PostMinigameScene,\n    DeathscreenScene,\n  ],\n  type: Phaser.AUTO,\n  pixelArt: true,\n}\n","import { TweenLite } from 'gsap'\r\nimport { promiseAnimation } from './functions'\r\n\r\nexport const appear = (\r\n  $el: Element,\r\n  duration: number = 0.2,\r\n  delay: number = 0\r\n) => {\r\n  return promiseAnimation(\r\n    TweenLite.to($el, duration, {\r\n      opacity: 1,\r\n    }).delay(delay)\r\n  )\r\n}\r\n\r\nexport const disappear = (\r\n  $el: Element,\r\n  duration: number = 0.2,\r\n  delay: number = 0\r\n) => {\r\n  return promiseAnimation(\r\n    TweenLite.to($el, duration, {\r\n      opacity: 0,\r\n    }).delay(delay)\r\n  )\r\n}\r\n","import { GameCategory } from '../../utils/enums'\r\nimport { categoriesProbability, scenesKeys } from '../../utils/constants'\r\nimport { List } from '../../utils/extensions'\r\nimport gameManager from './GameManager'\r\n\r\ninterface IGames {\r\n  [category: string]: List<string>\r\n}\r\n\r\nclass MinigameManager {\r\n  public currentCategory: GameCategory = GameCategory.Action\r\n  private lastGame?: string\r\n\r\n  private games: IGames = {\r\n    [GameCategory.Action]: new List<string>([\r\n      scenesKeys.SpamGame,\r\n      scenesKeys.SandwichGame,\r\n      scenesKeys.PasswordGame,\r\n    ]),\r\n    [GameCategory.Waiting]: new List<string>([]),\r\n  }\r\n\r\n  private playedGames: IGames = {\r\n    [GameCategory.Action]: new List<string>(),\r\n    [GameCategory.Waiting]: new List<string>(),\r\n  }\r\n\r\n  public pickNextGameKey(): string {\r\n    let selectedCategory: GameCategory\r\n    selectedCategory = this.pickRandomCategory(Math.random())\r\n\r\n    if (\r\n      this.currentCategory === GameCategory.Waiting &&\r\n      selectedCategory === GameCategory.Waiting\r\n    ) {\r\n      while (selectedCategory === GameCategory.Waiting) {\r\n        selectedCategory = this.pickRandomCategory(Math.random())\r\n      }\r\n    }\r\n\r\n    this.currentCategory = selectedCategory\r\n    console.log(this.currentCategory)\r\n\r\n    return this.pickGameKey(selectedCategory)\r\n  }\r\n\r\n  public startGame = async (key: string) => {\r\n    console.log('picking ' + key)\r\n    let game: string | undefined\r\n    let category: string | undefined\r\n    for (const gameCategory in this.games) {\r\n      if (this.games.hasOwnProperty(gameCategory)) {\r\n        game = this.games[gameCategory].find(gameKey => gameKey === key)\r\n        if (game) {\r\n          category = gameCategory\r\n        }\r\n      }\r\n    }\r\n\r\n    if (category && key) {\r\n      if (this.playedGames[category].length === this.games[category].length) {\r\n        this.playedGames[category].clear()\r\n      }\r\n\r\n      if (!this.playedGames[category].has(key)) {\r\n        this.playedGames[category].push(key)\r\n      } else {\r\n        key = this.games[category].random()\r\n      }\r\n\r\n      if (this.lastGame && this.lastGame === key) {\r\n        while (key === this.lastGame) {\r\n          key = this.games[category].random()\r\n        }\r\n      }\r\n\r\n      this.lastGame = key\r\n\r\n      await gameManager.startScene(key)\r\n    }\r\n  }\r\n\r\n  public pickGameKey(category: GameCategory): string {\r\n    console.log('picking ' + category)\r\n    let game = this.games[category].random()\r\n\r\n    if (this.playedGames[category].length === this.games[category].length) {\r\n      this.playedGames[category].clear()\r\n    }\r\n\r\n    if (!this.playedGames[category].has(game)) {\r\n      this.playedGames[category].push(game)\r\n    } else {\r\n      game = this.games[category].random()\r\n    }\r\n\r\n    if (this.lastGame && this.lastGame === game) {\r\n      while (game === this.lastGame) {\r\n        game = this.games[category].random()\r\n      }\r\n    }\r\n\r\n    this.lastGame = game\r\n\r\n    return game\r\n  }\r\n\r\n  private pickRandomCategory(random: number): GameCategory {\r\n    if (\r\n      this.games[GameCategory.Waiting].length > 0 &&\r\n      random < categoriesProbability[GameCategory.Waiting]\r\n    ) {\r\n      return GameCategory.Waiting\r\n    } else if (\r\n      this.games[GameCategory.Action].length > 0 &&\r\n      random >= categoriesProbability[GameCategory.Waiting] &&\r\n      categoriesProbability[GameCategory.Action]\r\n    ) {\r\n      return GameCategory.Action\r\n    }\r\n\r\n    return GameCategory.Action\r\n  }\r\n}\r\n\r\nconst minigameManager = new MinigameManager()\r\n\r\nexport default minigameManager\r\n","import { GameManager } from './GameManager'\r\n\r\nconst BG_MUSIC = 'bg'\r\nconst BG_VOLUME = 0.1\r\nconst SFX_VOLUME = 0.05\r\n\r\ntype ExtraConfig = Partial<SoundConfig & SoundMarker>\r\n\r\nexport default class AudioManager {\r\n  private sound: Phaser.Sound.BaseSoundManager\r\n\r\n  constructor(private gm: GameManager) {\r\n    this.sound = gm.game.sound\r\n    this.sound.pauseOnBlur = false\r\n  }\r\n\r\n  public playSfx = (key: string, extra?: ExtraConfig): void => {\r\n    this.sound.play(key, {\r\n      ...extra,\r\n      volume: (extra && extra.volume) || SFX_VOLUME,\r\n    })\r\n  }\r\n\r\n  public playBg = (extra?: ExtraConfig): void => {\r\n    this.sound.play(BG_MUSIC, {\r\n      ...extra,\r\n      volume: (extra && extra.volume) || BG_VOLUME,\r\n      loop: true,\r\n    })\r\n  }\r\n}\r\n","import { gameConfig, HFLGameConfig } from '../../utils/game'\r\nimport gameStore from '../../store/GameStore'\r\nimport { BaseEvents, GameEvents, GameState } from '../../utils/enums'\r\nimport { minigameSuffix, scenesKeys } from '../../utils/constants'\r\nimport { EventEmitter } from 'events'\r\nimport { appear, disappear } from '../../utils/anims'\r\nimport { GameBackgroundColor } from '../../utils/types'\r\nimport { gameBackgroundColorToCss } from '../../utils/functions'\r\nimport minigameManager from './MinigameManager'\r\nimport AudioManager from './AudioManager'\r\nimport { BootScene } from '../scenes'\r\n\r\nexport const Emitter = new EventEmitter()\r\n\r\nexport class GameManager {\r\n  public game: Phaser.Game = new Phaser.Game(gameConfig)\r\n  public audio: AudioManager = new AudioManager(this)\r\n  public activeScene?: Phaser.Scene\r\n  public gameUI?: HTMLDivElement\r\n  public gameFader?: HTMLDivElement\r\n\r\n  constructor() {\r\n    Emitter.on(BaseEvents.SceneInit, (scene: Phaser.Scene) => {\r\n      this.activeScene = scene\r\n    })\r\n  }\r\n\r\n  public suspendMinigame = (): void => {\r\n    gameStore.changeConfig({\r\n      suspended: true,\r\n    })\r\n  }\r\n\r\n  public resumeMinigame = (): void => {\r\n    gameStore.changeConfig({\r\n      suspended: false,\r\n    })\r\n  }\r\n\r\n  public startGame = (): void => {\r\n    ;(this.game.scene.getScene(scenesKeys.Boot) as BootScene).startGame()\r\n  }\r\n\r\n  public resizeCamera = (width: number, height: number): void => {\r\n    this.activeScene!.cameras.resize(width, height)\r\n  }\r\n\r\n  public loadSplashscreen = async () => {\r\n    await this.startScene(scenesKeys.Splashscreen)\r\n    gameStore.changeState(GameState.Splashscreen)\r\n  }\r\n\r\n  public loadHomescreen = async () => {\r\n    await this.startScene(scenesKeys.Homescreen)\r\n    gameStore.changeState(GameState.Homescreen)\r\n  }\r\n\r\n  public loadMinigame = async (minigameKey: string) => {\r\n    gameManager.suspendMinigame()\r\n    await minigameManager.startGame(minigameKey)\r\n  }\r\n\r\n  public loadNextMinigame = async () => {\r\n    gameManager.suspendMinigame()\r\n    await this.startScene(minigameManager.pickNextGameKey())\r\n  }\r\n\r\n  public loadPostMinigame = async () => {\r\n    gameManager.suspendMinigame()\r\n    await this.startScene(scenesKeys.PostMinigameScene)\r\n  }\r\n\r\n  public loadDeathscreen = async () => {\r\n    await this.startScene(scenesKeys.Deathscreen)\r\n  }\r\n\r\n  public startScene = async (\r\n    key: string,\r\n    config: HFLGameConfig = gameStore.config,\r\n    optionnalData?: any\r\n  ) => {\r\n    Object.keys(GameEvents).forEach(event => {\r\n      Emitter.removeAllListeners(GameEvents[event])\r\n    })\r\n    console.log('STARTED ' + key)\r\n    if (this.gameFader && config.fade) {\r\n      gameStore.startTransitionning()\r\n      await appear(this.gameFader)\r\n      this.game.scene.scenes\r\n        .filter(scene => scene.scene.key !== key)\r\n        .forEach(scene => scene.scene.stop(scene.scene.key))\r\n      gameManager.resumeMinigame()\r\n      this.game.scene.start(key, optionnalData)\r\n      gameStore.changeState(\r\n        key.includes(minigameSuffix) ? GameState.Minigame : (key as GameState)\r\n      )\r\n      gameStore.regenerateUiKey()\r\n      gameStore.stopTransitionning()\r\n      await disappear(this.gameFader)\r\n      if (gameStore.paused) {\r\n        gameStore.resume()\r\n      }\r\n    } else {\r\n      this.game.scene.scenes\r\n        .filter(scene => scene.scene.key !== key)\r\n        .forEach(scene => scene.scene.stop(scene.scene.key))\r\n      gameStore.startTransitionning()\r\n      gameManager.resumeMinigame()\r\n      this.game.scene.start(key, optionnalData)\r\n      gameStore.stopTransitionning()\r\n      gameStore.changeState(\r\n        key.includes(minigameSuffix) ? GameState.Minigame : (key as GameState)\r\n      )\r\n      gameStore.regenerateUiKey()\r\n      if (gameStore.paused) {\r\n        gameStore.resume()\r\n      }\r\n    }\r\n  }\r\n\r\n  public pause = (): void => {\r\n    if (!this.activeScene) {\r\n      return\r\n    }\r\n    this.activeScene!.scene.pause()\r\n    gameStore.pause()\r\n  }\r\n\r\n  public resume = (): void => {\r\n    if (!this.activeScene) {\r\n      return\r\n    }\r\n    this.activeScene!.scene.resume()\r\n    gameStore.resume()\r\n  }\r\n\r\n  public changeBackgroundColor = (color: GameBackgroundColor): void => {\r\n    if (this.activeScene) {\r\n      this.activeScene.cameras.main.setBackgroundColor(\r\n        gameBackgroundColorToCss(color)\r\n      )\r\n    }\r\n  }\r\n\r\n  public restartActiveScene = async (\r\n    config: HFLGameConfig = gameStore.config,\r\n    data?: object\r\n  ) => {\r\n    if (this.activeScene) {\r\n      await this.startScene(this.activeScene.scene.key, config, data)\r\n    }\r\n  }\r\n\r\n  public togglePause = (): void => {\r\n    if (!this.activeScene) {\r\n      return\r\n    }\r\n    if (gameStore.paused) {\r\n      this.activeScene!.sound.setDetune(0)\r\n      this.activeScene!.scene.resume()\r\n      gameStore.resume()\r\n    } else {\r\n      this.activeScene!.sound.setDetune(-1200)\r\n      this.activeScene!.scene.pause()\r\n      gameStore.pause()\r\n    }\r\n\r\n    console.log('TOGGLE PAUSE')\r\n  }\r\n\r\n  get hasTokiJustLost(): boolean {\r\n    return (\r\n      gameStore.hasJustLoosedBrain ||\r\n      gameStore.hasJustLoosedHeart ||\r\n      gameStore.hasJustStress\r\n    )\r\n  }\r\n\r\n  public resetTokiStatus = (): void => {\r\n    gameStore.resetTokiStatus()\r\n  }\r\n\r\n  public looseLife = (): void => {\r\n    gameStore.looseLife()\r\n  }\r\n\r\n  get isTokiDead() {\r\n    return !gameStore.status.hasHeart\r\n  }\r\n}\r\n\r\nconst gameManager = new GameManager()\r\nexport default gameManager\r\n","import { action, observable } from 'mobx'\nimport { GameState } from '../utils/enums'\nimport { GameSettings } from '../utils/interfaces'\nimport { HFLGameConfig } from '../utils/game'\nimport gameManager from '../game/manager/GameManager'\nimport { green } from '../utils/colors'\n\ninterface TokiStatus {\n  hasStress: boolean\n  hasJustStress: boolean\n  hasBrain: boolean\n  hasJustBrain: boolean\n  hasHeart: boolean\n  hasJustHeart: boolean\n}\n\nclass GameStore {\n  @observable public state: GameState = GameState.Splashscreen\n  @observable public difficulty: number = 1\n  @observable public loading: boolean = true\n  @observable public started: boolean = false\n  @observable public status: TokiStatus = {\n    hasStress: false,\n    hasBrain: true,\n    hasHeart: true,\n    hasJustStress: false,\n    hasJustBrain: false,\n    hasJustHeart: false,\n  }\n\n  @observable public elapsed: number = 0\n  @observable public paused: boolean = false\n  @observable public settings: GameSettings = { volume: 1 }\n  @observable public config: HFLGameConfig = {\n    dev: process.env.NODE_ENV === 'development',\n    suspended: false,\n    fade: true,\n    fadeColor: green,\n    backgroundColor: green,\n    minigameDuration: 500,\n  }\n  @observable public ratioResolution: number = 3\n  @observable public transitionning: boolean = false\n  @observable\n  public uiKey: string = new Phaser.Math.RandomDataGenerator().uuid()\n\n  @action public increaseElapsed = (delta: number = 1): void => {\n    this.elapsed += delta\n  }\n\n  @action public startGame = (): void => {\n    this.started = true\n  }\n\n  @action public stopGame = (): void => {\n    this.started = false\n  }\n\n  @action public regenerateUiKey = (): void => {\n    this.uiKey = new Phaser.Math.RandomDataGenerator().uuid()\n  }\n\n  @action public changeConfig = (newConfig: Partial<HFLGameConfig>): void => {\n    this.config = { ...this.config, ...newConfig }\n    if (newConfig.backgroundColor) {\n      gameManager.changeBackgroundColor(this.config.backgroundColor)\n    }\n  }\n\n  @action public looseLife = (): void => {\n    if (!this.status.hasStress) {\n      this.status.hasStress = true\n      this.status.hasJustStress = true\n      this.status.hasJustBrain = false\n      this.status.hasJustHeart = false\n      this.status.hasJustStress = true\n    } else if (this.status.hasBrain) {\n      this.status.hasBrain = false\n      this.status.hasJustStress = false\n      this.status.hasJustBrain = true\n      this.status.hasJustHeart = false\n    } else if (this.status.hasHeart) {\n      this.status.hasHeart = false\n      this.status.hasJustStress = false\n      this.status.hasJustBrain = false\n      this.status.hasJustHeart = true\n    }\n  }\n\n  @action public startLoading = (): void => {\n    this.loading = true\n  }\n\n  @action public stopLoading = (): void => {\n    this.loading = false\n  }\n\n  @action public changeState = (newState: GameState): void => {\n    this.state = newState\n  }\n\n  @action public increaseDifficulty = (step: number = 0.5): void => {\n    this.difficulty += step\n  }\n\n  @action public changeRatioResolution = (innerWidth: number): void => {\n    this.ratioResolution = 2\n  }\n\n  @action public togglePause = (): void => {\n    if (this.transitionning) {\n      return\n    }\n    this.paused = !this.paused\n  }\n\n  @action public pause = (): void => {\n    if (this.transitionning) {\n      return\n    }\n    this.paused = true\n  }\n\n  @action public resume = (): void => {\n    if (this.transitionning) {\n      return\n    }\n    this.paused = false\n  }\n\n  @action public startTransitionning = (): void => {\n    this.transitionning = true\n  }\n\n  @action public stopTransitionning = (): void => {\n    this.transitionning = false\n  }\n\n  @action public toggleTransition = (): void => {\n    this.transitionning = !this.transitionning\n  }\n\n  @action public resetTokiStatus = (): void => {\n    this.status.hasJustStress = false\n    this.status.hasJustBrain = false\n    this.status.hasJustHeart = false\n  }\n\n  get hasStress() {\n    return this.status.hasStress\n  }\n\n  get hasLoosedBrain() {\n    return !this.status.hasBrain\n  }\n\n  get hasLoosedHeart() {\n    return !this.status.hasHeart\n  }\n\n  get hasJustStress() {\n    return this.status.hasJustStress\n  }\n\n  get hasJustLoosedBrain() {\n    return this.status.hasJustBrain\n  }\n\n  get hasJustLoosedHeart() {\n    return this.status.hasJustHeart\n  }\n\n  get secondsElapsed() {\n    return (this.elapsed / 1000) * 16\n  }\n\n  get timeElapsed() {\n    return new Date(this.secondsElapsed * 1000).toLocaleTimeString('fr', {\n      minute: '2-digit',\n      second: '2-digit',\n    })\n  }\n}\n\nconst gameStore = new GameStore()\nexport default gameStore\n","import React, { FunctionComponent } from 'react'\n\nconst HomescreenUI: FunctionComponent = () => {\n  return (\n    <div className=\"homescreen-ui\">\n      <h1>Je suis l'ui du homescreen</h1>\n    </div>\n  )\n}\n\nexport default HomescreenUI\n","import React, { FunctionComponent } from 'react'\n\nconst SplashscreenUI: FunctionComponent = () => {\n  return (\n    <div className=\"splashscreen-ui\">\n      <h1>Je suis l'ui du splashscreen</h1>\n    </div>\n  )\n}\n\nexport default SplashscreenUI\n","import React, { FunctionComponent, useEffect, useRef, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport gameManager, { Emitter } from '../../../game/manager/GameManager'\r\nimport { GameEvents } from '../../../utils/enums'\r\nimport gameStore from '../../../store/GameStore'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nconst ProgressOuter = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  background: white;\r\n`\r\n\r\nconst ProgressInner = styled.div`\r\n  height: 40px;\r\n  will-change: width;\r\n  background: red;\r\n`\r\n\r\nconst RemainingTime: FunctionComponent = () => {\r\n  const {\r\n    config: { minigameDuration, suspended },\r\n  } = gameStore\r\n  const [remaining, setRemaining] = useState(0)\r\n  const button = useRef<HTMLButtonElement>(null)\r\n  useEffect(() => {\r\n    gameManager.activeScene!.time.addEvent({\r\n      callback: () => {\r\n        if (button.current) {\r\n          button.current.click()\r\n        }\r\n      },\r\n      delay: 16,\r\n      repeat: -1,\r\n    })\r\n  }, [])\r\n\r\n  if (remaining >= minigameDuration!) {\r\n    gameManager.activeScene!.time.removeAllEvents()\r\n    Emitter.emit(GameEvents.RemainingTimeOver)\r\n    setRemaining(minigameDuration - 0.00001)\r\n  }\r\n\r\n  const onClick = () => {\r\n    if (!suspended) {\r\n      gameStore.increaseElapsed()\r\n      setRemaining(remaining + 1)\r\n    }\r\n  }\r\n\r\n  const progress = 100 - (remaining / minigameDuration) * 100\r\n\r\n  return (\r\n    <ProgressOuter className=\"progress remaining-time\">\r\n      <button\r\n        ref={button}\r\n        onClick={onClick}\r\n        style={{ pointerEvents: 'all', display: 'none' }}\r\n      />\r\n      <ProgressInner\r\n        style={{ width: `${progress}%` }}\r\n        className=\"progress inner\"\r\n      >\r\n        <span style={{ display: 'none' }} aria-hidden={true}>\r\n          {progress}%\r\n        </span>\r\n      </ProgressInner>\r\n    </ProgressOuter>\r\n  )\r\n}\r\n\r\nexport default observer(RemainingTime)\r\n","import React, { FunctionComponent } from 'react'\r\nimport styled from 'styled-components'\r\nimport RemainingTime from './RemainingTime'\r\nimport { minigameToolbarHeight } from '../../../utils/constants'\r\n\r\nconst Div = styled.div`\r\n  background: rgb(55, 63, 71);\r\n  height: ${minigameToolbarHeight}px;\r\n  top: 0;\r\n  position: absolute;\r\n  z-index: 0;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 20px;\r\n`\r\n\r\nconst MinigameToolbar: FunctionComponent = props => {\r\n  return (\r\n    <Div {...props} className=\"minigame-toolbar\">\r\n      <RemainingTime />\r\n    </Div>\r\n  )\r\n}\r\n\r\nexport default MinigameToolbar\r\n","import React, { FunctionComponent } from 'react'\nimport MinigameToolbar from './games/MinigameToolbar'\n\nconst MinigameUI: FunctionComponent = () => {\n  return (\n    <div className=\"minigame-ui\">\n      <MinigameToolbar />\n    </div>\n  )\n}\n\nexport default MinigameUI\n","import React, { Component } from 'react'\r\nimport { randomString } from '../../utils/functions'\r\n\r\ninterface Props {\r\n  className?: string\r\n  style?: any\r\n  image: string\r\n  widthFrame: number\r\n  heightFrame: number\r\n  repeat?: number\r\n  isResponsive?: boolean\r\n  steps: number\r\n  scale?: number\r\n  fps: number\r\n  direction?: string\r\n  timeout?: number\r\n  autoplay?: boolean\r\n  loop?: boolean\r\n  startAt?: number\r\n  endAt?: false | number\r\n  background?: string\r\n  backgroundSize?: string\r\n  backgroundRepeat?: string\r\n  backgroundPosition?: string\r\n  getInstance?: (args: any) => void\r\n  onClick?: (args: any) => void\r\n  onDoubleClick?: (args: any) => void\r\n  onMouseMove?: (args: any) => void\r\n  onMouseEnter?: (args: any) => void\r\n  onMouseLeave?: (args: any) => void\r\n  onMouseOver?: (args: any) => void\r\n  onMouseOut?: (args: any) => void\r\n  onMouseDown?: (args: any) => void\r\n  onMouseUp?: (args: any) => void\r\n  onInit?: (args: any) => void\r\n  onResize?: any\r\n  onPlay?: (args: any) => void\r\n  onPause?: (args: any) => void\r\n  onLoopComplete?: any\r\n  onEachFrame?: any\r\n  onEnterFrame?: false | []\r\n}\r\n\r\ntype Direction = 'forward' | 'rewind'\r\n\r\ntype ParamInfo =\r\n  | 'direction'\r\n  | 'frame'\r\n  | 'fps'\r\n  | 'steps'\r\n  | 'width'\r\n  | 'height'\r\n  | 'scale'\r\n  | 'isPlaying'\r\n  | 'isPaused'\r\n  | 'completeLoopCicles'\r\n\r\nclass Spritesheet extends Component<Props> {\r\n  public static defaultProps = {\r\n    className: '',\r\n    style: {},\r\n    isResponsive: true,\r\n    direction: 'forward',\r\n    timeout: 0,\r\n    scale: 1,\r\n    autoplay: true,\r\n    loop: true,\r\n    startAt: 0,\r\n    endAt: false,\r\n    background: '',\r\n    backgroundSize: 'cover',\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundPosition: '',\r\n    repeat: -1,\r\n    getInstance: () => {},\r\n    onClick: () => {},\r\n    onDoubleClick: () => {},\r\n    onMouseMove: () => {},\r\n    onMouseEnter: () => {},\r\n    onMouseLeave: () => {},\r\n    onMouseOver: () => {},\r\n    onMouseOut: () => {},\r\n    onMouseDown: () => {},\r\n    onMouseUp: () => {},\r\n    onInit: () => {},\r\n    onResize: false,\r\n    onPlay: () => {},\r\n    onPause: () => {},\r\n    onLoopComplete: false,\r\n    onEachFrame: false,\r\n    onEnterFrame: false,\r\n  }\r\n\r\n  private intervalSprite: number | boolean\r\n  private isResponsive: boolean\r\n  private startAt: number\r\n  private fps: number\r\n  private steps: number\r\n  private completeLoopCicles: number\r\n  private isPlaying: boolean\r\n  private endAt: number\r\n  private spriteScale: number\r\n  private spriteEl: Element | HTMLElement | number | null\r\n  private direction: Direction\r\n  private frame: number\r\n  private spriteElContainer: any\r\n  private spriteElMove: HTMLElement | Element | null\r\n  private imageSprite: HTMLImageElement | null\r\n  private cols: number | null\r\n  private rows: number | null\r\n  private id: string\r\n\r\n  constructor(props: Props) {\r\n    super(props)\r\n\r\n    const {\r\n      isResponsive,\r\n      startAt,\r\n      endAt,\r\n      fps,\r\n      steps,\r\n      direction,\r\n      scale,\r\n    } = this.props\r\n\r\n    this.id = `spritesheet--${randomString(8)}`\r\n    this.spriteEl = this.spriteElContainer = this.spriteElMove = this.imageSprite = this.cols = this.rows = null\r\n    this.intervalSprite = false\r\n    // @ts-ignore\r\n    this.isResponsive = isResponsive\r\n    // @ts-ignore\r\n    this.startAt = this.setStartAt(startAt)\r\n    // @ts-ignore\r\n    this.endAt = this.setEndAt(endAt)\r\n    this.fps = fps\r\n    this.steps = steps\r\n    this.completeLoopCicles = 0\r\n    this.isPlaying = false\r\n    this.spriteScale = scale!\r\n    this.direction = this.setDirection(direction as Direction)\r\n    this.frame = this.startAt\r\n      ? this.startAt\r\n      : this.direction === 'rewind'\r\n      ? this.steps - 1\r\n      : 0\r\n  }\r\n\r\n  public componentDidMount() {\r\n    this.init()\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    // @ts-ignore\r\n    window.removeEventListener('resize', this.resize)\r\n  }\r\n\r\n  public renderElements = () => {\r\n    const {\r\n      image,\r\n      className,\r\n      style,\r\n      widthFrame,\r\n      heightFrame,\r\n      background,\r\n      backgroundSize,\r\n      backgroundRepeat,\r\n      backgroundPosition,\r\n      onClick,\r\n      onDoubleClick,\r\n      onMouseMove,\r\n      onMouseEnter,\r\n      onMouseLeave,\r\n      onMouseOver,\r\n      onMouseOut,\r\n      onMouseDown,\r\n      onMouseUp,\r\n    } = this.props\r\n\r\n    const containerStyles = {\r\n      position: 'relative',\r\n      overflow: 'hidden',\r\n      width: `${widthFrame}px`,\r\n      height: `${heightFrame}px`,\r\n      transform: `scale(${this.spriteScale})`,\r\n      transformOrigin: '0 0',\r\n      backgroundImage: `url(${background})`,\r\n      backgroundSize,\r\n      backgroundRepeat,\r\n      backgroundPosition,\r\n    }\r\n\r\n    const moveStyles = {\r\n      overflow: 'hidden',\r\n      backgroundRepeat: 'no-repeat',\r\n      display: 'table-cell',\r\n      backgroundImage: `url(${image})`,\r\n      width: `${widthFrame}px`,\r\n      height: `${heightFrame}px`,\r\n      transformOrigin: '0 50%',\r\n    }\r\n\r\n    const elMove = React.createElement('div', {\r\n      className: 'react-responsive-spritesheet-container__move',\r\n      style: moveStyles,\r\n    })\r\n\r\n    const elContainer = React.createElement(\r\n      'div',\r\n      {\r\n        className: 'react-responsive-spritesheet-container',\r\n        style: containerStyles,\r\n      },\r\n      elMove\r\n    )\r\n    const elSprite = React.createElement(\r\n      'div',\r\n      {\r\n        className: `spritesheet ${this.id} ${className}`,\r\n        style,\r\n        // @ts-ignore\r\n        onClick: () => onClick(this.setInstance()),\r\n        // @ts-ignore\r\n        onDoubleClick: () => onDoubleClick(this.setInstance()),\r\n        // @ts-ignore\r\n        onMouseMove: () => onMouseMove(this.setInstance()),\r\n        // @ts-ignore\r\n        onMouseEnter: () => onMouseEnter(this.setInstance()),\r\n        // @ts-ignore\r\n        onMouseLeave: () => onMouseLeave(this.setInstance()),\r\n        // @ts-ignore\r\n        onMouseOver: () => onMouseOver(this.setInstance()),\r\n        // @ts-ignore\r\n        onMouseOut: () => onMouseOut(this.setInstance()),\r\n        // @ts-ignore\r\n        onMouseDown: () => onMouseDown(this.setInstance()),\r\n        // @ts-ignore\r\n        onMouseUp: () => onMouseUp(this.setInstance()),\r\n      },\r\n      elContainer\r\n    )\r\n\r\n    return elSprite\r\n  }\r\n\r\n  public init = () => {\r\n    const {\r\n      image,\r\n      widthFrame,\r\n      heightFrame,\r\n      autoplay,\r\n      getInstance,\r\n      onInit,\r\n    } = this.props\r\n\r\n    const imgLoadSprite = new Image()\r\n    imgLoadSprite.src = image\r\n    imgLoadSprite.onload = () => {\r\n      if (!(document && document.querySelector(`.${this.id}`))) {\r\n        return\r\n      }\r\n      this.imageSprite = imgLoadSprite\r\n      this.cols =\r\n        this.imageSprite.width === widthFrame\r\n          ? 1\r\n          : this.imageSprite.width / widthFrame\r\n      this.rows =\r\n        this.imageSprite.height === heightFrame\r\n          ? 1\r\n          : this.imageSprite.height / heightFrame\r\n      this.spriteEl = document.querySelector(`.${this.id}`)\r\n      this.spriteElContainer = this.spriteEl!.querySelector(\r\n        '.react-responsive-spritesheet-container'\r\n      )\r\n      this.spriteElMove = this.spriteElContainer.querySelector(\r\n        '.react-responsive-spritesheet-container__move'\r\n      )\r\n      this.resize(false)\r\n      // @ts-ignore\r\n      window.addEventListener('resize', this.resize)\r\n      this.moveImage(false)\r\n      setTimeout(() => {\r\n        this.resize(false)\r\n      }, 10)\r\n      if (autoplay) {\r\n        this.play(true)\r\n      }\r\n      const instance = this.setInstance()\r\n      // @ts-ignore\r\n      getInstance(instance)\r\n      // @ts-ignore\r\n      onInit(instance)\r\n    }\r\n\r\n    imgLoadSprite.onerror = () => {\r\n      throw new Error(`Failed to load image ${imgLoadSprite.src}`)\r\n    }\r\n  }\r\n\r\n  public resize = (callback = true) => {\r\n    const { widthFrame, onResize, scale } = this.props\r\n\r\n    if (this.isResponsive) {\r\n      this.spriteScale =\r\n        ((this.spriteEl! as HTMLElement).offsetWidth / widthFrame) * scale!\r\n      this.spriteElContainer.style.transform = `scale(${this.spriteScale})`\r\n      this.spriteElContainer.style.imageRendering = 'pixelated'\r\n      ;(this.spriteEl! as HTMLElement).style.height = `${this.getInfo(\r\n        'height'\r\n      )}px`\r\n      if (callback && onResize) {\r\n        onResize(this.setInstance())\r\n      }\r\n    }\r\n  }\r\n\r\n  public play = (withTimeout = false) => {\r\n    const { onPlay, timeout } = this.props\r\n\r\n    if (!this.isPlaying) {\r\n      setTimeout(\r\n        () => {\r\n          // @ts-ignore\r\n          onPlay(this.setInstance())\r\n          this.setIntervalPlayFunctions()\r\n          this.isPlaying = true\r\n        },\r\n        withTimeout ? timeout : 0\r\n      )\r\n    }\r\n  }\r\n\r\n  public setIntervalPlayFunctions = () => {\r\n    if (this.intervalSprite) {\r\n      // @ts-ignore\r\n      // @ts-ignore\r\n      clearInterval(this.intervalSprite)\r\n    }\r\n    // @ts-ignore\r\n    this.intervalSprite = setInterval(() => {\r\n      if (this.isPlaying) {\r\n        this.moveImage()\r\n      }\r\n    }, 1000 / this.fps)\r\n  }\r\n\r\n  public moveImage = (play = true) => {\r\n    const {\r\n      onEnterFrame,\r\n      onEachFrame,\r\n      loop,\r\n      onLoopComplete,\r\n      repeat,\r\n    } = this.props\r\n\r\n    const currentRow = Math.floor(this.frame / this.cols!)\r\n    const currentCol = this.frame - this.cols! * currentRow\r\n    ;(this.spriteElMove! as HTMLElement).style.backgroundPosition = `-${this\r\n      .props.widthFrame * currentCol}px -${this.props.heightFrame *\r\n      currentRow}px`\r\n\r\n    if (onEnterFrame) {\r\n      onEnterFrame.map((frameAction, i) => {\r\n        // @ts-ignore\r\n        if (frameAction.frame === this.frame && frameAction.callback) {\r\n          // @ts-ignore\r\n          frameAction.callback()\r\n        }\r\n      })\r\n    }\r\n\r\n    if (play) {\r\n      if (this.direction === 'rewind') {\r\n        this.frame -= 1\r\n      } else {\r\n        this.frame += 1\r\n      }\r\n      if (onEachFrame) {\r\n        onEachFrame(this.setInstance())\r\n      }\r\n    }\r\n\r\n    if (this.isPlaying) {\r\n      if (\r\n        (this.direction === 'forward' &&\r\n          (this.frame === this.steps || this.frame === this.endAt)) ||\r\n        (this.direction === 'rewind' &&\r\n          (this.frame === -1 || this.frame === this.endAt))\r\n      ) {\r\n        if (loop) {\r\n          if (onLoopComplete) {\r\n            onLoopComplete(this.setInstance())\r\n          }\r\n          if (repeat === -1) {\r\n            this.completeLoopCicles += 1\r\n            this.frame = this.startAt\r\n              ? this.startAt\r\n              : this.direction === 'rewind'\r\n              ? this.steps - 1\r\n              : 0\r\n          } else if (repeat === 0) {\r\n            this.pause()\r\n          } else {\r\n            this.completeLoopCicles += 1\r\n            this.frame = this.startAt\r\n              ? this.startAt\r\n              : this.direction === 'rewind'\r\n              ? this.steps - 1\r\n              : 0\r\n            if (this.completeLoopCicles === repeat!) {\r\n              this.pause()\r\n            }\r\n          }\r\n        } else {\r\n          this.pause()\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public pause = () => {\r\n    const { onPause } = this.props\r\n\r\n    this.isPlaying = false\r\n    // @ts-ignore\r\n    clearInterval(this.intervalSprite)\r\n    // @ts-ignore\r\n    onPause(this.setInstance())\r\n  }\r\n\r\n  public goToAndPlay = (frame: number): void => {\r\n    this.frame = frame ? frame : this.frame\r\n    this.play()\r\n  }\r\n\r\n  public goToAndPause = (frame: number): void => {\r\n    this.pause()\r\n    this.frame = frame ? frame : this.frame\r\n    this.moveImage()\r\n  }\r\n\r\n  public setStartAt = (frame: number): number => {\r\n    this.startAt = frame ? frame - 1 : 0\r\n    return this.startAt\r\n  }\r\n\r\n  public setEndAt = (frame: number): number => {\r\n    this.endAt = frame\r\n    return this.endAt\r\n  }\r\n\r\n  public setFps(fps: number) {\r\n    this.fps = fps\r\n    this.setIntervalPlayFunctions()\r\n  }\r\n\r\n  public setDirection = (direction: Direction): Direction => {\r\n    this.direction = direction === 'rewind' ? 'rewind' : 'forward'\r\n    return this.direction\r\n  }\r\n\r\n  public getInfo = (param: ParamInfo) => {\r\n    switch (param) {\r\n      case 'direction':\r\n        return this.direction\r\n      case 'frame':\r\n        return this.frame\r\n      case 'fps':\r\n        return this.fps\r\n      case 'steps':\r\n        return this.steps\r\n      case 'width':\r\n        return this.spriteElContainer.getBoundingClientRect().width\r\n      case 'height':\r\n        return this.spriteElContainer.getBoundingClientRect().height\r\n      case 'scale':\r\n        return this.spriteScale\r\n      case 'isPlaying':\r\n        return this.isPlaying\r\n      case 'isPaused':\r\n        return !this.isPlaying\r\n      case 'completeLoopCicles':\r\n        return this.completeLoopCicles\r\n      default:\r\n        throw new Error(\r\n          `Invalid param \\`${param}\\` requested by Spritesheet.getinfo(). See the documentation on https://github.com/danilosetra/react-responsive-spritesheet`\r\n        )\r\n    }\r\n  }\r\n\r\n  public setInstance() {\r\n    return {\r\n      play: this.play,\r\n      pause: this.pause,\r\n      goToAndPlay: this.goToAndPlay,\r\n      goToAndPause: this.goToAndPause,\r\n      setStartAt: this.setStartAt,\r\n      setEndAt: this.setEndAt,\r\n      setFps: this.setFps,\r\n      setDirection: this.setDirection,\r\n      getInfo: this.getInfo,\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return this.renderElements()\r\n  }\r\n}\r\n\r\nexport default Spritesheet\r\n","import React, { FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport gameStore from '../../../store/GameStore'\r\nimport styled from 'styled-components'\r\nimport stress from '../../../assets/sprites/post-minigame/life_1_285_270.png'\r\nimport brain from '../../../assets/sprites/post-minigame/life_2_285_270.png'\r\nimport heart from '../../../assets/sprites/post-minigame/life_3_285_270.png'\r\nimport Spritesheet from '../Spritesheet'\r\n\r\nconst FRAME_WIDTH = 285\r\nconst FRAME_HEIGHT = 270\r\nconst FPS = 8\r\n\r\nconst LivesListInner = styled.ul`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: ${FRAME_WIDTH / 3}px;\r\n  & li {\r\n    margin-bottom: 20px;\r\n  }\r\n`\r\n\r\nconst LivesList: FunctionComponent = () => {\r\n  const {\r\n    hasLoosedBrain,\r\n    hasLoosedHeart,\r\n    hasStress,\r\n    hasJustLoosedBrain,\r\n    hasJustLoosedHeart,\r\n    hasJustStress,\r\n  } = gameStore\r\n  return (\r\n    <LivesListInner>\r\n      <li>\r\n        <Spritesheet\r\n          image={stress}\r\n          widthFrame={FRAME_WIDTH}\r\n          heightFrame={FRAME_HEIGHT}\r\n          steps={8}\r\n          autoplay={hasJustStress}\r\n          startAt={hasStress && !hasJustStress ? 8 : 0}\r\n          fps={FPS}\r\n          repeat={0}\r\n        />\r\n      </li>\r\n      <li>\r\n        <Spritesheet\r\n          image={brain}\r\n          widthFrame={FRAME_WIDTH}\r\n          heightFrame={FRAME_HEIGHT}\r\n          steps={20}\r\n          autoplay={hasJustLoosedBrain}\r\n          startAt={hasLoosedBrain && !hasJustLoosedBrain ? 20 : 0}\r\n          fps={FPS}\r\n          repeat={0}\r\n        />\r\n      </li>\r\n      <li>\r\n        <Spritesheet\r\n          image={heart}\r\n          widthFrame={FRAME_WIDTH}\r\n          heightFrame={FRAME_HEIGHT}\r\n          steps={9}\r\n          autoplay={hasJustLoosedHeart}\r\n          startAt={hasLoosedHeart && !hasJustLoosedHeart ? 9 : 0}\r\n          fps={FPS}\r\n          repeat={0}\r\n        />\r\n      </li>\r\n    </LivesListInner>\r\n  )\r\n}\r\n\r\nexport default observer(LivesList)\r\n","import React, { FunctionComponent } from 'react'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport gameStore from '../../store/GameStore'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { gameBackgroundColorToCss } from '../../utils/functions'\r\nimport LivesContainer from './post-minigame/LivesList'\r\nimport { black } from '../../utils/colors'\r\n\r\ninterface StyledProps {\r\n  backgroundColor?: string\r\n}\r\n\r\nconst show = keyframes`\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n`\r\n\r\nconst PostMinigameUIInner = styled.div<StyledProps>`\r\n  background: ${(props: StyledProps) => props.backgroundColor};\r\n  position: fixed;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  animation: ${show} 0.8s;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst Score = styled.h2`\r\n  margin-bottom: 40px;\r\n  font-size: 36px;\r\n  color: ${black};\r\n`\r\n\r\nconst PostMinigameUI: FunctionComponent = () => {\r\n  const {\r\n    timeElapsed,\r\n    config: { backgroundColor },\r\n  } = gameStore\r\n  return (\r\n    <PostMinigameUIInner\r\n      backgroundColor={gameBackgroundColorToCss(backgroundColor)}\r\n    >\r\n      <Score>{timeElapsed}</Score>\r\n      <LivesContainer />\r\n    </PostMinigameUIInner>\r\n  )\r\n}\r\n\r\nexport default observer(PostMinigameUI)\r\n\r\n","import React, { FunctionComponent } from 'react'\n\nconst DeathscreenUI: FunctionComponent = () => {\n  return (\n    <div className=\"deathscreen-ui\">\n      <h1>Je suis l'ui du deathscreen</h1>\n    </div>\n  )\n}\n\nexport default DeathscreenUI\n","import React, { FunctionComponent, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { observer } from 'mobx-react-lite'\nimport gameManager from '../../game/manager/GameManager'\nimport gameStore from '../../store/GameStore'\n\nconst Div = styled.div`\n  position: absolute;\n  z-index: 10;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  opacity: 0;\n  &::after {\n    content: '';\n    transition: all 0.3s;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: ${props => props.color};\n  }\n`\n\ninterface Props {\n  color?: string\n}\n\nconst Transition: FunctionComponent<Props> = () => {\n  const fader = React.createRef<HTMLDivElement>()\n  const {\n    config: { fadeColor },\n  } = gameStore\n  useEffect(() => {\n    if (fader.current) {\n      gameManager.gameFader = fader.current\n    }\n  }, [])\n\n  return <Div color={fadeColor} ref={fader} className=\"transition-fade\" />\n}\n\nexport default observer(Transition)\n","import React, { FunctionComponent, useEffect, useRef } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport gameStore from '../../store/GameStore'\r\nimport { GameState } from '../../utils/enums'\r\nimport HomescreenUI from './HomescreenUI'\r\nimport SplashscreenUI from './SplashscreenUI'\r\nimport MinigameUI from './MinigameUI'\r\nimport PostMinigameUI from './PostMinigameUI'\r\nimport DeathscreenUI from './DeathscreenUI'\r\nimport Transition from './Transition'\r\nimport gameManager from '../../game/manager/GameManager'\r\n\r\nconst GameUI: FunctionComponent = () => {\r\n  const { state, uiKey, paused } = gameStore\r\n  const classNames = ['game-ui']\r\n  const gameUI = useRef<HTMLDivElement>(null)\r\n  useEffect(() => {\r\n    if (gameUI.current) {\r\n      gameManager.gameUI = gameUI.current\r\n    }\r\n  }, [])\r\n\r\n  let UIComponent = SplashscreenUI\r\n\r\n  switch (state) {\r\n    case GameState.Splashscreen:\r\n      UIComponent = SplashscreenUI\r\n      break\r\n    case GameState.Homescreen:\r\n      UIComponent = HomescreenUI\r\n      break\r\n    case GameState.Minigame:\r\n      UIComponent = MinigameUI\r\n      break\r\n    case GameState.PostMinigame:\r\n      UIComponent = PostMinigameUI\r\n      break\r\n    case GameState.Deathscreen:\r\n      UIComponent = DeathscreenUI\r\n      break\r\n  }\r\n\r\n  if (paused) {\r\n    classNames.push('paused')\r\n  }\r\n\r\n  return (\r\n    <div ref={gameUI} className={classNames.join(' ')}>\r\n      <Transition />\r\n      {gameManager.activeScene !== undefined && <UIComponent key={uiKey} />}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(GameUI)\r\n","import React, { FunctionComponent, ReactNode } from 'react'\r\nimport Draggable from 'react-draggable'\r\nimport { observer } from 'mobx-react-lite'\r\nimport {\r\n  ForceThemeProps,\r\n  HideableProps,\r\n  PositionneableProps,\r\n  TitledProps,\r\n} from '../../../utils/interfaces'\r\nimport { useClassTheme } from '../../../utils/hooks'\r\n\r\ninterface Props {\r\n  children?: ReactNode | string\r\n  disabled?: boolean\r\n  center?: boolean\r\n  rounded?: boolean\r\n}\r\n\r\nconst DebugContainer: FunctionComponent<\r\n  Props & ForceThemeProps & PositionneableProps & TitledProps & HideableProps\r\n> = props => {\r\n  const {\r\n    title,\r\n    children,\r\n    center,\r\n    rounded,\r\n    forceTheme,\r\n    x,\r\n    hide,\r\n    y,\r\n    zIndex,\r\n    draggable,\r\n    disabled,\r\n  } = props\r\n  const isDraggable =\r\n    draggable !== undefined ? draggable : DebugContainer.defaultProps!.draggable\r\n  const classNames = ['game-state-list', 'container']\r\n  const themeClass = useClassTheme(forceTheme)\r\n  if (themeClass) {\r\n    classNames.push(themeClass)\r\n  }\r\n\r\n  if (disabled) {\r\n    classNames.push('disabled')\r\n  }\r\n\r\n  if (title && title !== '') {\r\n    classNames.push('with-title')\r\n  }\r\n  if (center) {\r\n    classNames.push('is-center')\r\n  }\r\n  if (rounded) {\r\n    classNames.push('is-rounded')\r\n  }\r\n\r\n  const section = (\r\n    <section\r\n      className={classNames.join(' ')}\r\n      style={{\r\n        left: x,\r\n        top: y,\r\n        zIndex,\r\n        position: 'fixed',\r\n        display: hide ? 'none' : 'initial',\r\n      }}\r\n    >\r\n      {title && title !== '' && <h2 className=\"title\">{title}</h2>}\r\n      {children}\r\n    </section>\r\n  )\r\n\r\n  if (isDraggable) {\r\n    return <Draggable>{section}</Draggable>\r\n  }\r\n\r\n  return section\r\n}\r\n\r\nDebugContainer.defaultProps = {\r\n  center: false,\r\n  draggable: true,\r\n  hide: false,\r\n  disabled: false,\r\n  rounded: false,\r\n}\r\n\r\nexport default observer(DebugContainer)\r\n","import * as React from 'react'\r\nimport { ChangeEvent, FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport gameStore from '../../../store/GameStore'\r\nimport DebugContainer from './DebugContainer'\r\nimport gameManager from '../../../game/manager/GameManager'\r\nimport { minigameSuffix } from '../../../utils/constants'\r\nimport {\r\n  HideableProps,\r\n  PositionneableProps,\r\n  TitledProps,\r\n} from '../../../utils/interfaces'\r\n\r\nconst GameDebugMinigamePicker: FunctionComponent<\r\n  TitledProps & PositionneableProps & HideableProps\r\n> = props => {\r\n  const { transitionning } = gameStore\r\n\r\n  const minigames = gameManager.game.scene.scenes\r\n    .filter(scene => scene.scene.key.includes(minigameSuffix))\r\n    .map(scene => scene.scene.key)\r\n\r\n  const handleMinigameChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    gameManager.loadMinigame(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <DebugContainer disabled={transitionning} {...props}>\r\n        {minigames.map(minigame => {\r\n          return (\r\n            <label key={minigame} className=\"game-state-list--item\">\r\n              <input\r\n                id={minigame}\r\n                className=\"radio\"\r\n                type=\"radio\"\r\n                name=\"currentMinigame\"\r\n                value={minigame}\r\n                checked={\r\n                  gameManager.activeScene\r\n                    ? minigame === gameManager.activeScene.scene.key\r\n                    : false\r\n                }\r\n                onChange={handleMinigameChange}\r\n              />\r\n              <span>{minigame}</span>\r\n            </label>\r\n          )\r\n        })}\r\n      </DebugContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default observer(GameDebugMinigamePicker)\r\n","import * as React from 'react'\r\nimport { ChangeEvent, FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport gameStore from '../../../store/GameStore'\r\nimport { GameState } from '../../../utils/enums'\r\nimport DebugContainer from './DebugContainer'\r\nimport gameManager from '../../../game/manager/GameManager'\r\nimport { scenesKeys } from '../../../utils/constants'\r\nimport { PositionneableProps, TitledProps } from '../../../utils/interfaces'\r\nimport GameDebugMinigamePicker from './GameDebugMinigamePicker'\r\n\r\nconst GameDebugStateList: FunctionComponent<\r\n  TitledProps & PositionneableProps\r\n> = props => {\r\n  const { state, transitionning } = gameStore\r\n  const availableStates = Object.keys(GameState).map(\r\n    gameState => GameState[gameState]\r\n  )\r\n\r\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    switch (e.target.value as GameState) {\r\n      case GameState.Splashscreen:\r\n        gameManager.loadSplashscreen()\r\n        break\r\n      case GameState.Homescreen:\r\n        gameManager.loadHomescreen()\r\n        break\r\n      case GameState.Deathscreen:\r\n        gameManager.loadDeathscreen()\r\n        break\r\n      case GameState.Minigame:\r\n        gameManager.loadMinigame(scenesKeys.SpamGame)\r\n        break\r\n      default:\r\n        gameManager.startScene(e.target.value as GameState)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <DebugContainer disabled={transitionning} {...props}>\r\n        {availableStates.map(availableState => {\r\n          return (\r\n            <label key={availableState} className=\"game-state-list--item\">\r\n              <input\r\n                id={availableState}\r\n                className=\"radio\"\r\n                type=\"radio\"\r\n                name=\"currentState\"\r\n                value={availableState}\r\n                checked={availableState === state}\r\n                onChange={handleInputChange}\r\n              />\r\n              <span>{availableState}</span>\r\n            </label>\r\n          )\r\n        })}\r\n      </DebugContainer>\r\n      <GameDebugMinigamePicker\r\n        hide={state && state !== GameState.Minigame}\r\n        title=\"Minigame picker\"\r\n        x={630}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default observer(GameDebugStateList)\r\n","import * as React from 'react'\r\nimport { FunctionComponent } from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface Props {\r\n  size?: 'small' | 'medium' | 'large'\r\n}\r\n\r\nconst Div = styled.div`\r\n  ${(props: Props) => {\r\n    switch (props.size!) {\r\n      case 'small':\r\n        return 'margin: 1rem 0'\r\n      case 'medium':\r\n        return 'margin: 2rem 0'\r\n      case 'large':\r\n        return 'margin: 4rem 0'\r\n    }\r\n  }}\r\n`\r\n\r\nconst Spacer: FunctionComponent<Props> = props => {\r\n  return <Div {...props} />\r\n}\r\n\r\nSpacer.defaultProps = {\r\n  size: 'small',\r\n}\r\n\r\nexport default Spacer\r\n","import * as React from 'react'\r\nimport {\r\n  FunctionComponent,\r\n  KeyboardEventHandler,\r\n  KeyboardEvent,\r\n  useRef,\r\n} from 'react'\r\nimport { useCallback } from 'react'\r\nimport { Key } from 'ts-key-enum'\r\nimport { ReactNode } from 'react'\r\n\r\ninterface Props {\r\n  validationFeedbackDelay?: number\r\n  children?: ReactNode | string\r\n  onValidate?: (value: string) => void\r\n  onKeyDown?: KeyboardEventHandler<HTMLInputElement>\r\n  max?: number\r\n  min?: number\r\n  validationClassname?: string\r\n}\r\n\r\ntype HTMLInputProps = Partial<\r\n  Pick<\r\n    HTMLInputElement,\r\n    'type' | 'checked' | 'defaultValue' | 'value' | 'className'\r\n  >\r\n>\r\n\r\nconst ValidatableInput: FunctionComponent<Props & HTMLInputProps> = props => {\r\n  const {\r\n    validationClassname,\r\n    validationFeedbackDelay,\r\n    onValidate,\r\n    onKeyDown,\r\n    ...rest\r\n  } = props\r\n  const input = useRef<HTMLInputElement>(null)\r\n\r\n  let last: number\r\n  const handleOnKeyDown = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === Key.Enter) {\r\n      if (input.current && !input.current.classList.contains('is-success')) {\r\n        input.current.classList.add('is-success')\r\n      }\r\n      if (last) {\r\n        clearTimeout(last)\r\n      }\r\n      if (onValidate) {\r\n        onValidate((e.target as HTMLInputElement).value)\r\n      }\r\n      last = setTimeout(() => {\r\n        if (input.current && validationClassname) {\r\n          input.current.classList.remove(validationClassname)\r\n        }\r\n      }, validationFeedbackDelay)\r\n    }\r\n    if (onKeyDown) {\r\n      onKeyDown(e)\r\n    }\r\n  }, [])\r\n\r\n  return <input {...rest} onKeyDown={handleOnKeyDown} ref={input} />\r\n}\r\n\r\nValidatableInput.defaultProps = {\r\n  validationFeedbackDelay: 2000,\r\n  validationClassname: 'is-success',\r\n}\r\n\r\nexport default ValidatableInput\r\n","import * as React from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  KeyboardEvent,\r\n  FunctionComponent,\r\n  useCallback,\r\n  useState,\r\n  useRef,\r\n} from 'react'\r\nimport DebugContainer from './DebugContainer'\r\nimport {\r\n  HideableProps,\r\n  PositionneableProps,\r\n  TitledProps,\r\n} from '../../../utils/interfaces'\r\nimport gameStore from '../../../store/GameStore'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { CirclePicker, ColorResult } from 'react-color'\r\nimport Spacer from '../Spacer'\r\nimport ValidatableInput from '../ValidatableInput'\r\nimport colors from '../../../utils/colors'\r\n\r\nconst MinigameDurationCol = styled.span`\r\n  width: 100px;\r\n  display: inline-block;\r\n  transition: all 0.15s;\r\n`\r\n\r\nconst GameDebugConfigPanel: FunctionComponent<\r\n  PositionneableProps & TitledProps & HideableProps\r\n> = props => {\r\n  const {\r\n    config: { fade, minigameDuration },\r\n    changeConfig,\r\n  } = gameStore\r\n\r\n  const handleFadeChange = useCallback(\r\n    () => {\r\n      changeConfig({\r\n        fade: !fade,\r\n      })\r\n    },\r\n    [fade]\r\n  )\r\n\r\n  const handleFadeColorChange = useCallback((color: ColorResult) => {\r\n    changeConfig({\r\n      fadeColor: color.hex,\r\n    })\r\n  }, [])\r\n  const handleGameBackgroundColorChange = useCallback((color: ColorResult) => {\r\n    changeConfig({\r\n      backgroundColor: { ...color.rgb, a: 1 },\r\n    })\r\n  }, [])\r\n\r\n  const handleOnValidate = useCallback(\r\n    (duration: string) => {\r\n      changeConfig({\r\n        minigameDuration: Number(duration),\r\n      })\r\n    },\r\n    [minigameDuration]\r\n  )\r\n\r\n  return (\r\n    <DebugContainer {...props}>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          className=\"checkbox\"\r\n          checked={fade}\r\n          onChange={handleFadeChange}\r\n        />\r\n        <span>Fade?</span>\r\n      </label>\r\n      {fade && (\r\n        <>\r\n          <Spacer />\r\n          <p>Fade color</p>\r\n          <Spacer size=\"small\" />\r\n          <CirclePicker\r\n            colors={colors}\r\n            onChangeComplete={handleFadeColorChange}\r\n          />\r\n        </>\r\n      )}\r\n      <Spacer />\r\n      <p>Game background color</p>\r\n      <Spacer size=\"small\" />\r\n      <CirclePicker\r\n        colors={colors}\r\n        onChangeComplete={handleGameBackgroundColorChange}\r\n      />\r\n      <Spacer />\r\n      <p>\r\n        Minigame duration :\r\n        <MinigameDurationCol>\r\n          <ValidatableInput\r\n            defaultValue={String(minigameDuration)}\r\n            onValidate={handleOnValidate}\r\n            className=\"input\"\r\n            type=\"number\"\r\n            max={700}\r\n            min={200}\r\n          />\r\n        </MinigameDurationCol>\r\n      </p>\r\n    </DebugContainer>\r\n  )\r\n}\r\n\r\nexport default observer(GameDebugConfigPanel)\r\n","import * as React from 'react'\r\nimport GameDebugStateList from './ui/debug/GameDebugStateList'\r\nimport { FunctionComponent } from 'react'\r\nimport GameDebugConfigPanel from './ui/debug/GameDebugConfigPanel'\r\nimport { HideableProps } from '../utils/interfaces'\r\n\r\nconst GameDebug: FunctionComponent<HideableProps> = props => {\r\n  const { hide } = props\r\n\r\n  return (\r\n    <div\r\n      style={{ display: hide ? 'block' : 'none' }}\r\n      className=\"game-debug game-ui\"\r\n    >\r\n      <h1>Debug interface</h1>\r\n      <GameDebugConfigPanel title=\"Game config\" x={10} y={180} />\r\n      <GameDebugStateList title=\"Game state\" x={10} y={10} />\r\n    </div>\r\n  )\r\n}\r\n\r\nGameDebug.defaultProps = {\r\n  hide: false,\r\n}\r\n\r\nexport default GameDebug\r\n","import React, {FunctionComponent, MouseEventHandler, ReactNode} from 'react'\nimport {observer} from \"mobx-react-lite\";\nimport gameDebugStore from \"../../../store/GameDebugStore\";\nimport {ForceThemeProps, PositionneableProps} from \"../../../utils/interfaces\";\nimport {useClassTheme} from \"../../../utils/hooks\";\nimport Draggable from \"react-draggable\";\nimport {GameDebugTheme} from \"../../../utils/enums\";\n\ntype RenderProps = (theme: GameDebugTheme) => ReactNode\n\ninterface Props {\n  children?: RenderProps | ReactNode | string\n  className?: string\n  onClick?: MouseEventHandler<HTMLButtonElement>\n}\n\nconst DebugButton: FunctionComponent<\n  Props & ForceThemeProps & PositionneableProps\n> = props => {\n  const {\n    onClick,\n    children,\n    className,\n    forceTheme,\n    x,\n    y,\n    zIndex,\n    draggable,\n  } = props\n  const classNames = ['debug-button', 'game-debug-toggle-button']\n  const { theme } = gameDebugStore\n\n  if (className) {\n    classNames.push(...className.split(' '))\n  }\n\n  const themeClass = useClassTheme(forceTheme)\n  if (themeClass) {\n    classNames.push(themeClass)\n  }\n\n  const render = children\n    ? typeof children === 'function'\n      ? (children as RenderProps)(theme)\n      : children\n    : null\n\n  const button = (\n    <button\n      {...(onClick ? { onClick } : {})}\n      style={{\n        left: x,\n        top: y,\n        zIndex,\n        ...(x || y ? { position: 'fixed' } : {}),\n      }}\n      className={classNames.join(' ')}\n    >\n      {render}\n    </button>\n  )\n\n  if (draggable !== undefined && draggable) {\n    return <Draggable>{button}</Draggable>\n  }\n\n  return button\n}\n\nDebugButton.defaultProps = {\n  draggable: false,\n}\n\nexport default observer(DebugButton)\n","import * as React from 'react'\r\nimport { FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useKeyboardShortcuts } from '../../../utils/hooks'\r\nimport { Key } from 'ts-key-enum'\r\nimport gameDebugStore from '../../../store/GameDebugStore'\r\nimport DebugButton from './DebugButton'\r\nimport { GameDebugTheme } from '../../../utils/enums'\r\nimport styled from 'styled-components'\r\nimport debugIcon from '../../../assets/images/icons/debug.png'\r\n\r\nconst GameDebugToggleButtonIcon = styled.i`\r\n  background: url(${debugIcon}) no-repeat;\r\n  height: 50px;\r\n  width: 50px;\r\n`\r\n\r\nconst GameDebugToggleButton: FunctionComponent = () => {\r\n  const { debug, toggleDebug, hideDebug } = gameDebugStore\r\n  useKeyboardShortcuts([\r\n    {\r\n      keys: [Key.Escape],\r\n      action: hideDebug,\r\n    },\r\n    {\r\n      keys: ['D'],\r\n      action: toggleDebug,\r\n    },\r\n  ])\r\n\r\n  return (\r\n    <DebugButton onClick={toggleDebug} forceTheme={GameDebugTheme.Light}>\r\n      {debug ? <i className=\"icon close\" /> : <GameDebugToggleButtonIcon />}\r\n    </DebugButton>\r\n  )\r\n}\r\n\r\nexport default observer(GameDebugToggleButton)\r\n","import * as React from 'react'\nimport { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport gameDebugStore from '../../../store/GameDebugStore'\nimport DebugButton from './DebugButton'\n\nconst GameDebugToggleThemeButton: FunctionComponent = () => {\n  const { toggleTheme, otherThemeName } = gameDebugStore\n\n  return <DebugButton onClick={toggleTheme}>{otherThemeName[0]}</DebugButton>\n}\n\nexport default observer(GameDebugToggleThemeButton)\n","import React, {FunctionComponent} from 'react'\nimport styled from 'styled-components'\n\ninterface Props {\n  color?: string,\n  size?: \"small\" | \"medium\" | \"large\"\n}\n\nconst Div = styled.div`\n  display: flex;\n  -webkit-font-smoothing: antialiased;\n  justify-content: space-evenly;\n  width: 40px;\n  height: 40px;\n  transform: ${props => {\n    switch (props.size) {\n      case \"small\":\n        return 'scale(0.6)'\n      case \"medium\":\n        return 'scale(0.7)'\n      case \"large\":\n        return 'scale(0.8)'\n    }\n    return 'scale(0.8)'\n    }\n  };\n  & .bar {\n    position: relative;\n    width: ${(props: Props) => {\n      switch (props.size) {\n        case \"small\":\n          return '4px'\n        case \"medium\":\n          return '8px'\n        case \"large\":\n          return '12px'\n      }\n      \n      return '8px'\n}};\n    height: 100%;\n    background: ${props => props.color};\n    &:first-of-type {\n      margin-right: 0.6rem;\n    }\n  }\n`\n\nconst PauseIcon: FunctionComponent<Props> = (props) => {\n  const { color } = props\n\n  return (\n    <Div {...props} className=\"pause-icon\" style={{ color }}>\n      <div className=\"bar\"/>\n      <div className=\"bar\"/>\n    </Div>\n  )\n}\n\nPauseIcon.defaultProps = {\n  color: 'white',\n  size: \"large\"\n}\n\nexport default PauseIcon\n","import React, {FunctionComponent} from 'react'\nimport styled from 'styled-components'\n\ninterface Props {\n  color?: string,\n  size?: \"small\" | \"medium\" | \"large\"\n}\n\nconst Div = styled.div`\n  width: 40px;\n  height: 40px;\n  position: relative;\n  left: 6px;\n  border-style: solid;\n  border-width: 20px 0 20px 30px;\n  transform: ${(props: Props) => {\n    switch (props.size) {\n      case \"small\":\n        return 'scale(0.6)'\n      case \"medium\":\n        return 'scale(0.7)'\n      case \"large\":\n        return 'scale(0.8)'\n    }\n    return 'scale(1)'\n  }\n  };\n  border-color: transparent transparent transparent ${props => props.color};\n`\n\nconst PlayIcon: FunctionComponent<Props> = (props) => {\n  const { color } = props\n\n  return (\n    <Div {...props} className=\"play-icon\" style={{ color }}/>\n  )\n}\n\nPlayIcon.defaultProps = {\n  color: 'white',\n  size: \"large\"\n}\n\nexport default PlayIcon\n","import * as React from 'react';\nimport {FunctionComponent} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport DebugButton from \"./DebugButton\";\nimport PauseIcon from \"../icons/PauseIcon\";\nimport {GameDebugTheme} from \"../../../utils/enums\";\nimport gameStore from \"../../../store/GameStore\";\nimport PlayIcon from \"../icons/PlayIcon\";\nimport gameManager from \"../../../game/manager/GameManager\";\nimport {useKeyboardShortcuts} from \"../../../utils/hooks\";\n\nconst GameDebugTogglePauseButton: FunctionComponent = () => {\n  const { paused } = gameStore\n  const { togglePause } = gameManager\n\n  useKeyboardShortcuts([\n    {\n      keys: [\"P\"],\n      action: togglePause\n    }\n  ])\n\n  return (\n    <DebugButton onClick={togglePause}>\n      {theme =>\n        !paused && <PauseIcon color={theme === GameDebugTheme.Light ? \"black\" : \"white\"}/> ||\n        paused && <PlayIcon color={theme === GameDebugTheme.Light ? \"black\" : \"white\"}/>\n      }\n    </DebugButton>\n  )\n}\n\n\nexport default observer(\n  GameDebugTogglePauseButton\n)\n\n\n","import * as React from 'react'\r\nimport { FunctionComponent } from 'react'\r\nimport GameDebugToggleButton from './GameDebugToggleButton'\r\nimport GameDebugToggleThemeButton from './GameDebugToggleThemeButton'\r\nimport GameDebugTogglePauseButton from './GameDebugTogglePauseButton'\r\nimport { useKeyboardShortcuts } from '../../../utils/hooks'\r\nimport gameDebugStore from '../../../store/GameDebugStore'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nconst GameDebugButtonsToolbar: FunctionComponent = () => {\r\n  const { toggleDebugToolbar, debugToolbar } = gameDebugStore\r\n\r\n  useKeyboardShortcuts([\r\n    {\r\n      keys: ['K'],\r\n      action: toggleDebugToolbar,\r\n    },\r\n  ])\r\n\r\n  if (!debugToolbar) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-debug-buttons-toolbar\">\r\n      <GameDebugTogglePauseButton />\r\n      <GameDebugToggleThemeButton />\r\n      <GameDebugToggleButton />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(GameDebugButtonsToolbar)\r\n","import 'phaser'\r\nimport * as React from 'react'\r\nimport { useResize } from '../utils/hooks'\r\nimport GameUI from './ui/GameUI'\r\nimport GameDebug from './GameDebug'\r\nimport { FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport GameDebugButtonsToolbar from './ui/debug/GameDebugButtonsToolbar'\r\nimport gameDebugStore from '../store/GameDebugStore'\r\nimport gameManager from '../game/manager/GameManager'\r\nimport gameStore from '../store/GameStore'\r\n\r\nconst Game: FunctionComponent = () => {\r\n  const { width, height } = useResize()\r\n  const { debug } = gameDebugStore\r\n  const { paused, started } = gameStore\r\n\r\n  if (gameManager.game.canvas) {\r\n    gameManager.game.canvas.style.transition = 'all 0.15s'\r\n    gameManager.game.resize(width, height)\r\n    gameManager.resizeCamera(width, height)\r\n    gameManager.game.canvas.style.filter = paused\r\n      ? 'blur(20px) grayscale(80%)'\r\n      : null\r\n    gameManager.game.canvas.style.transform = paused ? 'scale(1.2)' : null\r\n  }\r\n\r\n  return (\r\n    <div id=\"game\" className=\"game\">\r\n      {started && <GameDebugButtonsToolbar />}\r\n      {started && <GameDebug hide={debug} />}\r\n      {started && <GameUI />}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(Game)\r\n","import * as React from 'react'\r\nimport { FunctionComponent } from 'react'\r\nimport styled from 'styled-components'\r\nimport { observer } from 'mobx-react-lite'\r\nimport gameStore from '../store/GameStore'\r\nimport { green, white } from '../utils/colors'\r\n\r\ninterface Props {\r\n  onLaunchGame: () => void\r\n}\r\n\r\nconst IntroductionInner = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  z-index: 1;\r\n  color: ${white};\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  background: ${green};\r\n`\r\n\r\nconst Introduction: FunctionComponent<Props> = props => {\r\n  const { loading } = gameStore\r\n  const { onLaunchGame } = props\r\n  return (\r\n    <IntroductionInner>\r\n      <h1>Harder, Faster, Looser</h1>\r\n      <button disabled={loading} onClick={onLaunchGame}>\r\n        Launch game\r\n      </button>\r\n    </IntroductionInner>\r\n  )\r\n}\r\n\r\nexport default observer(Introduction)\r\n","import * as React from 'react'\r\nimport { FunctionComponent, useCallback } from 'react'\r\nimport Game from './components/Game'\r\nimport { observer } from 'mobx-react-lite'\r\nimport gameStore from './store/GameStore'\r\nimport Introduction from './components/Introduction'\r\nimport gameManager from './game/manager/GameManager'\r\nimport { wait } from './utils/functions'\r\n\r\nconst App: FunctionComponent = () => {\r\n  const { started } = gameStore\r\n  const onLaunchGame = useCallback(async () => {\r\n    await document.body.requestFullscreen()\r\n    await wait(50)\r\n    gameManager.startGame()\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {!started && <Introduction onLaunchGame={onLaunchGame} />}\r\n      <Game />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(App)\r\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport App from './App'\nimport 'gsap/CSSPlugin'\nimport './assets/styles/app.scss'\nimport registerServiceWorker from './registerServiceWorker'\nimport './utils/extensions'\n\nReactDOM.render(<App />, document.getElementById('root') as HTMLElement)\n// registerServiceWorker()\n","module.exports = __webpack_public_path__ + \"static/media/life_1_285_270.4dfc78f2.png\";","module.exports = __webpack_public_path__ + \"static/media/life_2_285_270.26bad4f0.png\";","module.exports = __webpack_public_path__ + \"static/media/life_3_285_270.3365a732.png\";","module.exports = __webpack_public_path__ + \"static/media/debug.2896fca5.png\";"],"sourceRoot":""}