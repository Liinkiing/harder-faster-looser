{"version":3,"sources":["utils/enums.ts","store/GameDebugStore.ts","utils/hooks.ts","utils/constants.ts","game/manager/AnimationManager.ts","game/scenes/BaseScene.ts","game/scenes/BootScene.ts","game/scenes/SplashscreenScene.ts","game/scenes/HomescreenScene.ts","utils/functions.ts","game/objects/Spam.ts","utils/extensions.ts","game/scenes/MinigameScene.ts","game/scenes/action/SpamGameScene.ts","game/scenes/action/SandwichGameScene.ts","game/objects/password-game/KeyboardPasswordButton.ts","game/objects/password-game/KeyboardContainer.ts","game/objects/password-game/ComputerPasswordScreen.ts","game/scenes/action/PasswordGameScene.ts","game/scenes/PostMinigameScene.ts","game/scenes/DeathscreenScene.ts","utils/colors.ts","utils/game.ts","utils/anims.ts","game/manager/MinigameManager.ts","game/manager/AudioManager.ts","game/manager/GameManager.ts","store/GameStore.ts","components/ui/HomescreenUI.tsx","components/ui/SplashscreenUI.tsx","components/ui/games/RemainingTime.tsx","components/ui/games/MinigameToolbar.tsx","components/ui/MinigameUI.tsx","components/ui/Spritesheet.tsx","components/ui/post-minigame/LivesList.tsx","components/ui/PostMinigameUI.tsx","components/ui/DeathscreenUI.tsx","components/ui/Transition.tsx","components/ui/GameUI.tsx","components/ui/debug/DebugContainer.tsx","components/ui/debug/GameDebugMinigamePicker.tsx","components/ui/debug/GameDebugStateList.tsx","components/ui/Spacer.tsx","components/ui/ValidatableInput.tsx","components/ui/debug/GameDebugConfigPanel.tsx","components/GameDebug.tsx","components/ui/debug/DebugButton.tsx","components/ui/debug/GameDebugToggleButton.tsx","components/ui/debug/GameDebugToggleThemeButton.tsx","components/ui/icons/PauseIcon.tsx","components/ui/icons/PlayIcon.tsx","components/ui/debug/GameDebugTogglePauseButton.tsx","components/ui/debug/GameDebugButtonsToolbar.tsx","components/Game.tsx","App.tsx","registerServiceWorker.ts","index.tsx","assets/sprites/post-minigame/life_1_285_270.png","assets/sprites/post-minigame/life_2_285_270.png","assets/sprites/post-minigame/life_3_285_270.png"],"names":["GameCategory","GameState","BaseEvents","GameEvents","GameDebugTheme","gameDebugStore","this","theme","Dark","toUpperCase","Light","observable","action","_this","debugToolbar","showDebug","_this2","hideDebug","_this3","debug","_this4","_this5","_this6","newTheme","_this7","_this8","computed","useKeyboardShortcuts","shortcuts","listener","e","forEach","shortcut","keys","some","key","toLowerCase","useEffect","window","addEventListener","removeEventListener","useClassTheme","forceTheme","isDarkTheme","minigameSuffix","scenesKeys","Boot","Splashscreen","Homescreen","SandwichGame","SpamGame","PasswordGame","PostMinigameScene","Deathscreen","categoriesProbability","_categoriesProbabilit","Object","defineProperty","Action","Waiting","AnimationHelper","scene","data","classCallCheck","animationData","createGameAnimations","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","anims","Symbol","iterator","next","done","value","frames","framesArray","typeOfGeneration","generateFrameNames","prefix","start","end","suffix","zeroPad","generateFrameNumbers","first","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","i","frame","duration","visible","push","err","return","create","defaultTextureKey","frameRate","skipMissedFrames","delay","repeat","repeatDelay","yoyo","showOnStart","hideOnComplete","BaseScene","console","log","concat","game","dump","Emitter","emit","SceneInit","load","pack","on","animationHelper","cache","json","get","gameManager","changeBackgroundColor","gameStore","config","backgroundColor","SceneCreated","initListeners","time","delta","Phaser","Scene","BootScene","possibleConstructorReturn","getPrototypeOf","call","asyncToGenerator","regenerator_default","a","mark","_callee","initial","wrap","_context","prev","esm_get","prototype","assertThisInitialized","audio","playBg","fade","changeConfig","loadNextMinigame","stop","SplashscreenScene","graphics","add","fillStyle","fillRect","text","HomescreenScene","gameWait","clock","ms","Promise","resolve","addEvent","callback","randomRange","min","max","Math","random","promiseAnimation","animation","eventCallback","shuffle","length","j","floor","_ref2","gameBackgroundColorToCss","r","g","b","String","randomString","toString","substring","Spam","params","x","y","children","createSpamContent","spamTexture","sprite","setOrigin","spriteAnim","animationManager","texture","_ref","width","height","setScale","ratioResolution","setInteractive","input","hitArea","setSize","SpamClicked","createCloseIcon","spamContent","close","SpamDestroyed","destroy","setTexture","closeIcon","innerWidth","innerHeight","existing","isAnimated","play","GameObjects","Container","List","_Array","items","_getPrototypeOf2","apply","toConsumableArray","inherits","createClass","searchedValue","find","item","indexToRemove","indexOf","splice","wrapNativeSuper","Array","MinigameScene","loadPostMinigame","looseLife","RemainingTimeOver","onFailure","SpamGameScene","spams","image","setGlobalTopOnly","nbrSpam","createSpam","spam","update","playSfx","remove","onSuccess","detune","availablesSpam","SOUND_GET_SANDWICH","SandwichGameScene","skies","buildings","landscapes","streetLights","grounds","currentFrame","isControlsEnabled","createPlayer","playerTexture","Number","createSandwich","sandwichTexture","playWinAnimation","_callee2","_context2","volume","abrupt","player","playerWinTexture","resetClassVariables","initBackground","createControls","sky","from","element","createCloneBackgroundElement","SandwichPicked","suspendMinigame","sandwich","disableMobileControls","nativeSpeed","props","createBackgroundElement","keyCode","keyboard","lastKeyPressed","animateGame","physics","world","enable","setDisplaySize","collider","overlap","removeCollider","array","leftBtn","setDepth","rightBtn","btn","KeyboardPasswordButton","style","code","KeyboardPasswordButtonClicked","Sprite","COLUMNS","ROWS","KeyboardContainer","buttons","getButton","button","index","passwordCharMap","1","2","3","4","5","ComputerPasswordScreen","stars","addStarChar","passwordCount","createStar","last","offset","createScreenSprite","screen","passwordGame","once","typedPassword","password","PASSWORD_DISPLAY_TIME","EASY_PASSWORD_LENGTH","MEDIUM_PASSWORD_LENGTH","HARD_PASSWORD_LENGTH","PasswordGameScene","createPassword","playIntroduction","resumeMinigame","computerScreen","getBounds","_callee3","_context3","difficulty","slice","reduce","acc","_ref4","_callee4","paw","_context4","device","os","desktop","then","every","_x","arguments","SOUND_LOST","SOUND_WIN","DISPLAY_TIME","hasTokiJustLost","isTokiDead","createFillerGraphics","resetTokiStatus","loadDeathscreen","DeathscreenScene","colors","gameConfig","antialias","gamepad","mouse","touch","arcade","gravity","default","title","version","zoom","parent","type","AUTO","pixelArt","appear","$el","TweenLite","to","opacity","disappear","minigameManager","currentCategory","games","playedGames","startGame","category","gameCategory","hasOwnProperty","gameKey","clear","has","lastGame","startScene","selectedCategory","pickRandomCategory","pickGameKey","AudioManager","gm","extra","sound","objectSpread","loop","pauseOnBlur","EventEmitter","GameManager","Game","suspended","loadSplashscreen","changeState","loadHomescreen","loadMinigame","_ref3","minigameKey","pickNextGameKey","_callee5","_context5","_callee6","_context6","_ref7","_callee7","optionnalData","_args7","_context7","event","removeAllListeners","gameFader","startTransitionning","scenes","filter","includes","Minigame","regenerateUiKey","stopTransitionning","paused","resume","_x2","pause","activeScene","color","cameras","main","setBackgroundColor","restartActiveScene","_callee8","_args8","_context8","togglePause","setDetune","hasJustLoosedBrain","hasJustLoosedHeart","hasJustStress","status","hasHeart","hasStress","hasBrain","hasJustBrain","hasJustHeart","elapsed","Date","secondsElapsed","toLocaleTimeString","minute","second","fadeColor","minigameDuration","RandomDataGenerator","uuid","uiKey","newConfig","newState","state","step","transitionning","_this9","_this10","_this11","_this12","_this13","_this14","HomescreenUI","react_default","createElement","className","SplashscreenUI","ProgressOuter","styled","div","_templateObject","ProgressInner","_templateObject2","observer","_gameStore$config","_useState","useState","_useState2","slicedToArray","remaining","setRemaining","useRef","current","click","removeAllEvents","progress","ref","onClick","increaseElapsed","pointerEvents","display","aria-hidden","Div","MinigameToolbar_templateObject","MinigameToolbar","assign","games_RemainingTime","MinigameUI","games_MinigameToolbar","Spritesheet","renderElements","_this$props","widthFrame","heightFrame","background","backgroundSize","backgroundRepeat","backgroundPosition","onDoubleClick","onMouseMove","onMouseEnter","onMouseLeave","onMouseOver","onMouseOut","onMouseDown","onMouseUp","containerStyles","position","overflow","transform","spriteScale","transformOrigin","backgroundImage","moveStyles","elMove","React","elContainer","id","_onClick","setInstance","_onDoubleClick","_onMouseMove","_onMouseEnter","_onMouseLeave","_onMouseOver","_onMouseOut","_onMouseDown","_onMouseUp","init","_this$props2","autoplay","getInstance","onInit","imgLoadSprite","Image","src","onload","document","querySelector","imageSprite","cols","rows","spriteEl","spriteElContainer","spriteElMove","resize","moveImage","setTimeout","instance","onerror","Error","_this$props3","onResize","scale","isResponsive","offsetWidth","imageRendering","getInfo","withTimeout","_this$props4","onPlay","timeout","isPlaying","setIntervalPlayFunctions","intervalSprite","clearInterval","setInterval","fps","_this$props5","onEnterFrame","onEachFrame","onLoopComplete","currentRow","currentCol","map","frameAction","direction","steps","endAt","completeLoopCicles","startAt","onPause","goToAndPlay","goToAndPause","setStartAt","setEndAt","setDirection","param","getBoundingClientRect","_this$props6","setFps","Component","defaultProps","LivesListInner","ul","LivesList_templateObject","FRAME_WIDTH","hasLoosedBrain","hasLoosedHeart","ui_Spritesheet","stress","brain","heart","show","keyframes","PostMinigameUI_templateObject","PostMinigameUIInner","PostMinigameUI_templateObject2","Score","h2","_templateObject3","timeElapsed","post_minigame_LivesList","DeathscreenUI","Transition_templateObject","fader","createRef","Transition_Div","classNames","gameUI","UIComponent","PostMinigame","PostMinigameUI","join","ui_Transition","DebugContainer","center","rounded","hide","zIndex","draggable","disabled","isDraggable","themeClass","section","left","top","react_draggable_default","minigames","handleMinigameChange","target","react","debug_DebugContainer","minigame","name","checked","onChange","availableStates","gameState","handleInputChange","availableState","debug_GameDebugMinigamePicker","Spacer_templateObject","size","Spacer","Spacer_Div","ValidatableInput","validationClassname","validationFeedbackDelay","onValidate","onKeyDown","rest","objectWithoutProperties","handleOnKeyDown","useCallback","Key","Enter","classList","contains","clearTimeout","MinigameDurationCol","span","GameDebugConfigPanel_templateObject","handleFadeChange","handleFadeColorChange","hex","handleGameBackgroundColorChange","rgb","handleOnValidate","ui_Spacer","lib","onChangeComplete","ui_ValidatableInput","defaultValue","GameDebug","debug_GameDebugConfigPanel","debug_GameDebugStateList","DebugButton","split","render","toggleDebug","Escape","debug_DebugButton","toggleTheme","otherThemeName","PauseIcon_templateObject","PauseIcon","PauseIcon_Div","PlayIcon_templateObject","PlayIcon","PlayIcon_Div","icons_PauseIcon","icons_PlayIcon","toggleDebugToolbar","debug_GameDebugTogglePauseButton","debug_GameDebugToggleThemeButton","debug_GameDebugToggleButton","_useResize","useResize","canvas","transition","debug_GameDebugButtonsToolbar","components_GameDebug","ui_GameUI","App","components_Game","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","src_App","getElementById","URL","process","origin","fetch","response","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.ab1067a7.chunk.js","sourcesContent":["export enum GameCategory {\r\n  Action = 'ACTION',\r\n  Waiting = 'WAITING',\r\n}\r\n\r\nexport enum GameState {\r\n  Splashscreen = 'SPLASHSCREEN',\r\n  Homescreen = 'HOMESCREEN',\r\n  Minigame = 'MINIGAME',\r\n  PostMinigame = 'POSTMINIGAME',\r\n  Deathscreen = 'DEATHSCREEN',\r\n}\r\n\r\nexport enum BaseEvents {\r\n  SceneInit = 'SCENE_INIT',\r\n  SceneCreated = 'SCENE_CREATED',\r\n}\r\n\r\nexport enum GameEvents {\r\n  KeyboardPasswordButtonClicked = 'KEYBOARD_PASSWORD_BUTTON_CLICKED',\r\n  SpamDestroyed = 'SPAM_DESTROYED',\r\n  RemainingTimeOver = 'REMANING_TIME_OVER',\r\n  SpamClicked = 'SPAM_CLICKED',\r\n\r\n  SandwichPicked = 'SANDWICH_PICKED',\r\n}\r\n\r\nexport enum GameDebugTheme {\r\n  Light = 'LIGHT',\r\n  Dark = 'DARK',\r\n}\r\n","import { action, computed, observable } from 'mobx'\r\nimport { GameDebugTheme } from '../utils/enums'\r\n\r\nclass GameDebugStore {\r\n  @observable public debug: boolean = false\r\n  @observable public debugToolbar: boolean = true\r\n  @observable public theme: GameDebugTheme = GameDebugTheme.Light\r\n\r\n  @action public showDebugToolbar = (): void => {\r\n    this.debugToolbar = true\r\n    this.showDebug()\r\n  }\r\n\r\n  @action public hideDebugToolbar = (): void => {\r\n    this.debugToolbar = false\r\n    this.hideDebug()\r\n  }\r\n\r\n  @action public toggleDebugToolbar = (): void => {\r\n    this.debugToolbar = !this.debugToolbar\r\n    this.debug = this.debugToolbar\r\n  }\r\n\r\n  @action public toggleDebug = (): void => {\r\n    this.debug = !this.debug\r\n  }\r\n\r\n  @action public showDebug = (): void => {\r\n    this.debug = true\r\n  }\r\n\r\n  @action public hideDebug = (): void => {\r\n    this.debug = false\r\n  }\r\n\r\n  @action public setTheme = (newTheme: GameDebugTheme): void => {\r\n    this.theme = newTheme\r\n  }\r\n\r\n  @action public toggleTheme = (): void => {\r\n    this.theme =\r\n      this.theme === GameDebugTheme.Dark\r\n        ? GameDebugTheme.Light\r\n        : GameDebugTheme.Dark\r\n  }\r\n\r\n  @computed get isDarkTheme(): boolean {\r\n    return this.theme === GameDebugTheme.Dark\r\n  }\r\n\r\n  @computed get shortThemeName(): string {\r\n    return this.theme[0].toUpperCase()\r\n  }\r\n\r\n  @computed get otherThemeName(): string {\r\n    return this.theme === GameDebugTheme.Dark\r\n      ? GameDebugTheme.Light\r\n      : GameDebugTheme.Dark\r\n  }\r\n}\r\n\r\nconst gameDebugStore = new GameDebugStore()\r\nexport default gameDebugStore\r\n","import { ChangeEvent, useCallback, useEffect, useRef, useState } from 'react'\r\nimport gameDebugStore from '../store/GameDebugStore'\r\nimport { GameDebugTheme } from './enums'\r\nimport { KeyboardShortcut } from './interfaces'\r\n\r\nexport const useResize = (): { width: number; height: number } => {\r\n  const [size, setSize] = useState({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n  })\r\n\r\n  useEffect(\r\n    () => {\r\n      const listener = () =>\r\n        setSize({\r\n          width: window.innerWidth,\r\n          height: window.innerHeight,\r\n        })\r\n      window.addEventListener('resize', listener)\r\n\r\n      return () => {\r\n        window.removeEventListener('resize', listener)\r\n      }\r\n    },\r\n    [window.innerWidth, window.innerHeight]\r\n  )\r\n\r\n  return size\r\n}\r\n\r\nexport const useKeyboardInput = (listener: (e: KeyboardEvent) => void) => {\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', listener)\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', listener)\r\n    }\r\n  }, [])\r\n}\r\n\r\nexport const useKeyboardShortcuts = (shortcuts: KeyboardShortcut[]) => {\r\n  useKeyboardInput(e => {\r\n    shortcuts.forEach(shortcut => {\r\n      if (\r\n        shortcut.keys.some(key => key.toLowerCase() === e.key.toLowerCase())\r\n      ) {\r\n        shortcut.action()\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\nexport const usePrevious = (value: any) => {\r\n  const ref = useRef(null)\r\n  useEffect(() => {\r\n    ref.current = value\r\n  })\r\n\r\n  return ref.current!\r\n}\r\n\r\nexport const useInputValue = <T>(initialValue: T) => {\r\n  const [value, setValue] = useState<T>(initialValue)\r\n  const onChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    setValue((e.target.value as unknown) as T)\r\n  }, [])\r\n\r\n  return {\r\n    value,\r\n    onChange,\r\n  }\r\n}\r\n\r\nexport const useClassTheme = (forceTheme?: GameDebugTheme): string | null => {\r\n  const { isDarkTheme } = gameDebugStore\r\n\r\n  if (!forceTheme && isDarkTheme) {\r\n    return 'is-dark'\r\n  }\r\n\r\n  if (!isDarkTheme && forceTheme && forceTheme === GameDebugTheme.Dark) {\r\n    return 'is-dark'\r\n  } else if (isDarkTheme && forceTheme && forceTheme === GameDebugTheme.Dark) {\r\n    return 'is-dark'\r\n  } else if (forceTheme && forceTheme === GameDebugTheme.Light) {\r\n    return null\r\n  }\r\n\r\n  return null\r\n}\r\n","import { GameCategory } from './enums'\n\nexport const minigameSuffix = '_MINIGAME'\nexport const minigameToolbarHeight = 84\n\nexport const scenesKeys = {\n  Boot: 'BOOT',\n  Splashscreen: 'SPLASHSCREEN',\n  Homescreen: 'HOMESCREEN',\n\n  SandwichGame: 'SANDWICH' + minigameSuffix,\n  SpamGame: 'SPAM' + minigameSuffix,\n  PasswordGame: 'PASSWORD' + minigameSuffix,\n\n  PostMinigameScene: 'POSTMINIGAME',\n\n  Deathscreen: 'DEATHSCREEN',\n}\n\nexport const categoriesProbability = {\n  [GameCategory.Action]: 0.9,\n  [GameCategory.Waiting]: 0.1,\n}\n","/**\n * @author       Digitsensitive <digit.sensitivee@gmail.com>\n * @copyright    2018 Digitsensitive\n * @description  Animation Helper\n * @license      Digitsensitive\n */\n\n/**\n * Configs taken from official Phaser library code and edited\n *\n * AnimationConfig\n * {string}           [key] - The key that the animation will be associated with. i.e. sprite.animations.play(key)\n * {AnimationFrameConfig[]} [frames] - An object containing data used to generate the frames for the animation\n * {string}           [defaultTextureKey=null] - The key of the texture all frames of the animation will use. Can be overridden on a per frame basis.\n * {integer}          [frameRate] - The frame rate of playback in frames per second (default 24 if duration is null)\n * {integer}          [duration] - How long the animation should play for in milliseconds. If not given its derived from frameRate.\n * {boolean}          [skipMissedFrames=true] - Skip frames if the time lags, or always advanced anyway?\n * {integer}          [delay=0] - Delay before starting playback. Value given in milliseconds.\n * {integer}          [repeat=0] - Number of times to repeat the animation (-1 for infinity)\n * {integer}          [repeatDelay=0] - Delay before the animation repeats. Value given in milliseconds.\n * {boolean}          [yoyo=false] - Should the animation yoyo? (reverse back down to the start) before repeating?\n * {boolean}          [showOnStart=false] - Should sprite.visible = true when the animation starts to play?\n * {boolean}          [hideOnComplete=false] - Should sprite.visible = false when the animation finishes?\n *\n * AnimationFrameConfig\n * {string}           key - The key that the animation will be associated with. i.e. sprite.animations.play(key)\n * {(string|number)}  frame - [description]\n * {number}           [duration=0] - [description]\n * {boolean}          [visible] - [description]\n *\n * GenerateFrameNamesConfig\n * {string}           [prefix=''] - [description]\n * {integer}          [start=0] - [description]\n * {integer}          [end=0] - [description]\n * {string}           [suffix=''] - [description]\n * {integer}          [zeroPad=0] - [description]\n * {boolean}          [frames=false] - [description]\n *\n * GenerateFrameNumbersConfig\n * {integer}          [start=0] - [At which frame the animation starts]\n * {integer}          [end=-1] - [At which frame the animation stops]\n * {boolean}          [first=false] - [description]\n * {boolean}          [frames=false] - [description]\n */\n\n/**\n * This is a helper class for your game animations.\n *\n * There is a easier way to load animations from JSON:\n * https://labs.phaser.io/edit.html?src=src\\animation\\from%20json.js\n *\n * The only problem with that approach is, that you can not use\n * generateFrameNames and generateFrameNumbers and with that not load\n * your frames from your atlas.\n *\n * The class needs a scene from you game to be able to create the animations.\n * Since the Animation Manager is global, any scene from your game is okay.\n * The class also needs the animation data to be able to create the animations.\n * We load a JSON upfront and get the data from the global cache.\n * @param scene [Any scene from your game]\n * @param data  [Animation data from the cache, loaded from JSON]\n */\nexport default class AnimationHelper {\n  private scene: Phaser.Scene\n  private animationData: any\n\n  constructor(scene: Phaser.Scene, data: any) {\n    this.scene = scene\n    this.animationData = data\n    this.createGameAnimations()\n  }\n\n  private createGameAnimations(): void {\n    for (const data of this.animationData.anims) {\n      let frames\n      const framesArray = []\n      if (data.frames.typeOfGeneration === 'generateFrameNames') {\n        frames = this.scene.anims.generateFrameNames(data.frames.key, {\n          prefix: data.frames.prefix || '',\n          start: data.frames.start || 0,\n          end: data.frames.end || 0,\n          suffix: data.frames.suffix || '',\n          zeroPad: data.frames.zeroPad || 0,\n          frames: data.frames.frames || false,\n        })\n      } else if (data.frames.typeOfGeneration === 'generateFrameNumbers') {\n        frames = this.scene.anims.generateFrameNumbers(data.frames.key, {\n          start: data.frames.start || 0,\n          end: data.frames.end || -1,\n          first: data.frames.first || false,\n          frames: data.frames.frames || false,\n        })\n      } else {\n        for (const i of data.frames) {\n          const frame = {\n            key: i.key,\n            frame: i.frame,\n            duration: i.duration || 0,\n            visible: i.visible,\n          }\n          framesArray.push(frame)\n        }\n      }\n\n      this.scene.anims.create({\n        key: data.key,\n        frames: frames || framesArray,\n        defaultTextureKey: data.defaultTextureKey || null,\n        frameRate: data.frameRate || 24,\n        duration: data.duration,\n        skipMissedFrames: data.skipMissedFrames || true,\n        delay: data.delay || 0,\n        repeat: data.repeat || 0,\n        repeatDelay: data.repeatDelay || 0,\n        yoyo: data.yoyo || false,\n        showOnStart: data.showOnStart || false,\n        hideOnComplete: data.hideOnComplete || false,\n      })\n    }\n  }\n}\n","import gameManager, { Emitter } from '../manager/GameManager'\r\nimport { BaseEvents } from '../../utils/enums'\r\nimport AnimationHelper from '../manager/AnimationManager'\r\nimport gameStore from '../../store/GameStore'\r\n\r\nexport default class BaseScene extends Phaser.Scene {\r\n  protected animationHelper?: AnimationHelper\r\n\r\n  public init(): void {\r\n    console.log(`init (${this.scene.key})`)\r\n    this.game.scene.dump()\r\n    Emitter.emit(BaseEvents.SceneInit, this)\r\n  }\r\n\r\n  public preload(): void {\r\n    console.log(`preload (${this.scene.key})`)\r\n    this.load.pack('preload', '/static/assets/sprites/pack.json', 'preload')\r\n    this.load.on('complete', () => {\r\n      this.animationHelper = new AnimationHelper(\r\n        this,\r\n        this.cache.json.get('animations')\r\n      )\r\n    })\r\n  }\r\n\r\n  public create(): void {\r\n    console.log(`create (${this.scene.key})`)\r\n    // console.log(gameStore.config.backgroundColor)\r\n    gameManager.changeBackgroundColor(gameStore.config.backgroundColor)\r\n    Emitter.emit(BaseEvents.SceneCreated, this)\r\n    this.initListeners()\r\n  }\r\n\r\n  public update(time: number, delta: number): void {\r\n    console.log(`update (${this.scene.key})`)\r\n  }\r\n\r\n  protected initListeners(): void {}\r\n}\r\n","import { scenesKeys } from '../../utils/constants'\r\nimport gameManager from '../manager/GameManager'\r\nimport BaseScene from './BaseScene'\r\nimport gameStore from '../../store/GameStore'\r\n\r\nexport default class BootScene extends BaseScene {\r\n  constructor() {\r\n    super({\r\n      key: scenesKeys.Boot,\r\n    })\r\n  }\r\n\r\n  public create = async () => {\r\n    super.create()\r\n    gameManager.audio.playBg()\r\n    const initial = gameStore.config.fade\r\n    gameStore.changeConfig({ fade: false })\r\n    gameManager.loadNextMinigame()\r\n    gameStore.changeConfig({ fade: initial })\r\n    this.scene.stop(this.scene.key)\r\n  }\r\n}\r\n","import { scenesKeys } from '../../utils/constants'\nimport BaseScene from './BaseScene'\nimport { wait } from '../../utils/functions'\nimport gameManager from '../manager/GameManager'\n\nexport default class SplashscreenScene extends BaseScene {\n  constructor() {\n    super({\n      key: scenesKeys.Splashscreen,\n    })\n  }\n\n  public create(): void {\n    super.create()\n    const graphics = this.add.graphics()\n    graphics.fillStyle(0xff3300, 1)\n    graphics.fillRect(100, 200, 600, 300)\n    graphics.fillRect(100, 100, 100, 100)\n    this.add.text(120, 110, this.scene.key)\n  }\n\n  public update(time: number, delta: number): void {}\n}\n","import { scenesKeys } from '../../utils/constants'\nimport BaseScene from './BaseScene'\n\nexport default class HomescreenScene extends BaseScene {\n  constructor() {\n    super({\n      key: scenesKeys.Homescreen,\n    })\n  }\n\n  public create(): void {\n    super.create()\n    const graphics = this.add.graphics()\n    graphics.fillStyle(0xff9933, 1)\n    graphics.fillRect(100, 200, 600, 300)\n    graphics.fillRect(200, 100, 100, 100)\n    this.add.text(220, 110, this.scene.key)\n  }\n\n  public update(time: number, delta: number): void {}\n}\n","import { TweenLite } from 'gsap'\r\nimport { GameBackgroundColor } from './types'\r\n\r\nexport const wait = (ms: number): Promise<TimerHandler> =>\r\n  new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nexport const gameWait = (\r\n  clock: Phaser.Time.Clock,\r\n  ms: number\r\n): Promise<Phaser.Time.TimerEvent> =>\r\n  new Promise(resolve => {\r\n    return clock.addEvent({\r\n      callback: resolve,\r\n      delay: ms,\r\n    })\r\n  })\r\n\r\nexport const randomRange = (min: number, max: number): number => {\r\n  return Math.random() * (max - min) + min\r\n}\r\n\r\nexport const promiseAnimation = (animation: TweenLite | gsap.Animation) => {\r\n  return new Promise(resolve =>\r\n    animation.eventCallback('onComplete', async () => {\r\n      resolve()\r\n    })\r\n  )\r\n}\r\n\r\nexport const shuffle = <T>(a: T[]): T[] => {\r\n  for (let i = a.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1))\r\n    ;[a[i], a[j]] = [a[j], a[i]]\r\n  }\r\n\r\n  return a\r\n}\r\n\r\nexport const gameBackgroundColorToCss = (\r\n  backgroundColor: GameBackgroundColor\r\n): string => {\r\n  if (typeof backgroundColor === 'object') {\r\n    const { r, g, b, a } = backgroundColor\r\n    return `rgba(${r},${g},${b},${a})`\r\n  }\r\n\r\n  return String(backgroundColor)\r\n}\r\n\r\nexport const randomString = (length: number) =>\r\n  Math.random()\r\n    .toString(36)\r\n    .substring(length)\r\n","import { ContainerConstructor } from '../../utils/interfaces'\nimport gameStore from '../../store/GameStore'\nimport { Emitter } from '../manager/GameManager'\nimport { GameEvents } from '../../utils/enums'\nimport { randomRange } from '../../utils/functions'\n\nexport default class Spam extends Phaser.GameObjects.Container {\n  private readonly spamContent?: Phaser.GameObjects.Sprite\n  private readonly closeIcon?: Phaser.GameObjects.Sprite\n  private readonly texture: string\n\n  get isAnimated() {\n    return !!(\n      this.spamContent &&\n      this.spamContent.anims &&\n      this.spamContent.anims.animationManager.get(this.texture)\n    )\n  }\n\n  constructor(params: ContainerConstructor & { texture: string }) {\n    super(params.scene, params.x, params.y, params.children)\n    this.texture = params.texture\n    this.spamContent = this.createSpamContent(params.texture)\n    this.add(this.spamContent)\n\n    this.closeIcon = this.createCloseIcon()\n    this.add(this.closeIcon)\n\n    // set X & Y of spam container (80 for UI -> have to be replace)\n    this.x = randomRange(\n      0,\n      window.innerWidth - this.spamContent.width / gameStore.ratioResolution\n    )\n    this.y = randomRange(\n      80,\n      window.innerHeight - this.spamContent.height / gameStore.ratioResolution\n    )\n\n    params.scene.add.existing(this)\n  }\n\n  public update(): void {\n    if (this.isAnimated) {\n      this.spamContent!.anims.play(this.texture, true)\n    }\n  }\n\n  private createSpamContent = (\n    spamTexture: string\n  ): Phaser.GameObjects.Sprite => {\n    const sprite = this.scene.add.sprite(0, 0, spamTexture).setOrigin(0, 0)\n\n    // defining the dimensions of the sprite\n    const spriteAnim = sprite.anims.animationManager.get(this.texture)\n    if (!!spriteAnim) {\n      const [width, height] = [\n        spriteAnim.frames[0].frame.width,\n        spriteAnim.frames[0].frame.height,\n      ]\n      sprite.width = width\n      sprite.height = height\n    }\n    sprite.setScale(\n      1 / gameStore.ratioResolution,\n      1 / gameStore.ratioResolution\n    )\n\n    sprite.setInteractive()\n    sprite.input.hitArea.setSize(sprite.width, sprite.height) // defining the dimensions of the input hit area\n    sprite.on('pointerdown', () => {\n      Emitter.emit(GameEvents.SpamClicked, this)\n      console.log('EMITED ' + GameEvents.SpamClicked)\n    })\n\n    return sprite\n  }\n\n  private createCloseIcon = (): Phaser.GameObjects.Sprite => {\n    const x = this.spamContent!.width / gameStore.ratioResolution\n    const close = this.scene.add\n      .sprite(x, 0, 'close')\n      .setOrigin(1, 0)\n      .setScale(1 / gameStore.ratioResolution, 1 / gameStore.ratioResolution)\n    close.setInteractive()\n    close.on('pointerdown', () => {\n      Emitter.emit(GameEvents.SpamDestroyed, this)\n      console.log('EMITED ' + GameEvents.SpamDestroyed)\n      this.destroy(true)\n    })\n    close.on('pointerover', () => {\n      close.setTexture('close_active')\n    })\n    close.on('pointerout', () => {\n      close.setTexture('close')\n    })\n    return close\n  }\n}\n","export class List<T> extends Array<T> {\n  constructor(items?: T[]) {\n    if (items && items.length > 0) {\n      super(...items)\n    } else {\n      super(0)\n    }\n  }\n\n  public random(): T {\n    return this[Math.floor(Math.random() * this.length)]\n  }\n\n  public has(searchedValue: T): boolean {\n    return this.find(item => item === searchedValue) !== undefined\n  }\n\n  public remove(searchedValue: T): number {\n    const indexToRemove = this.indexOf(searchedValue)\n    this.splice(indexToRemove, 1)\n\n    return this.length\n  }\n\n  public clear(): void {\n    this.length = 0\n  }\n\n  public first(): T {\n    return this[0]\n  }\n\n  public last(): T {\n    return this[this.length - 1]\n  }\n}\n","import BaseScene from './BaseScene'\r\nimport gameManager, { Emitter } from '../manager/GameManager'\r\nimport { GameEvents } from '../../utils/enums'\r\n\r\nexport default abstract class MinigameScene extends BaseScene {\r\n  protected onSuccess(): void {\r\n    console.log('you won')\r\n    gameManager.loadPostMinigame()\r\n  }\r\n\r\n  protected onFailure(): void {\r\n    console.log('you fail')\r\n    gameManager.looseLife()\r\n    gameManager.loadPostMinigame()\r\n  }\r\n\r\n  protected initListeners(): void {\r\n    super.initListeners()\r\n    Emitter.on(GameEvents.RemainingTimeOver, this.onFailure)\r\n  }\r\n}\r\n","import { scenesKeys } from '../../../utils/constants'\r\nimport Spam from '../../objects/Spam'\r\nimport { List } from '../../../utils/extensions'\r\nimport { randomRange } from '../../../utils/functions'\r\nimport { GameEvents } from '../../../utils/enums'\r\nimport gameManager, { Emitter } from '../../manager/GameManager'\r\nimport MinigameScene from '../MinigameScene'\r\n\r\nconst SOUND_SPAM_DESTROYED = 'explosion'\r\nconst SOUND_CLOSE_CLICK = 'beep'\r\n\r\nexport default class SpamGameScene extends MinigameScene {\r\n  public spams: List<Spam> = new List<Spam>()\r\n  constructor() {\r\n    super({\r\n      key: scenesKeys.SpamGame,\r\n    })\r\n  }\r\n\r\n  public preload(): void {\r\n    super.preload()\r\n    this.load.image('close', '/static/assets/sprites/spam-game/CLOSE.png')\r\n    this.load.image(\r\n      'close_active',\r\n      '/static/assets/sprites/spam-game/CLOSE_active.png'\r\n    )\r\n  }\r\n\r\n  public create() {\r\n    super.create()\r\n    this.spams = new List<Spam>()\r\n    this.input.setGlobalTopOnly(true)\r\n\r\n    for (let nbrSpam = 0; nbrSpam < 10; nbrSpam++) {\r\n      this.spams.push(this.createSpam())\r\n    }\r\n  }\r\n\r\n  public update(time: number, delta: number): void {\r\n    this.spams.forEach(spam => spam.update())\r\n  }\r\n\r\n  protected initListeners(): void {\r\n    super.initListeners()\r\n    Emitter.on(GameEvents.SpamDestroyed, (spam: Spam) => {\r\n      gameManager.audio.playSfx(SOUND_SPAM_DESTROYED)\r\n      this.spams.remove(spam)\r\n      if (this.spams.length === 0) {\r\n        this.onSuccess()\r\n      }\r\n    })\r\n    Emitter.on(GameEvents.SpamClicked, (spam: Spam) => {\r\n      gameManager.audio.playSfx(SOUND_CLOSE_CLICK, {\r\n        detune: randomRange(-100, 100),\r\n      })\r\n      for (let i = 0; i < randomRange(1, 4); i++) {\r\n        this.spams.push(this.createSpam())\r\n      }\r\n    })\r\n  }\r\n\r\n  private createSpam(): Spam {\r\n    const availablesSpam = new List<string>([\r\n      'sexyAnimation',\r\n      'soldAnimation',\r\n      'pizzaAnimation',\r\n      'magicBottleAnimation',\r\n      'musclesAnimation',\r\n      'playAnimation',\r\n      'toothAnimation',\r\n      'hairAnimation',\r\n      'gamblingAnimation',\r\n      'yoAnimation',\r\n    ])\r\n\r\n    return new Spam({\r\n      scene: this,\r\n      x: 0,\r\n      y: 0,\r\n      texture: availablesSpam.random(),\r\n    })\r\n  }\r\n}\r\n","import { scenesKeys } from '../../../utils/constants'\r\nimport { GameEvents } from '../../../utils/enums'\r\nimport gameManager, { Emitter } from '../../manager/GameManager'\r\nimport MinigameScene from '../MinigameScene'\r\nimport gameStore from '../../../store/GameStore'\r\nimport { gameWait, randomRange } from '../../../utils/functions'\r\n\r\nconst SOUND_WALK = 'beep'\r\nconst SOUND_GET_SANDWICH = 'tada'\r\n\r\nexport default class SandwichGameScene extends MinigameScene {\r\n  private skies?: Phaser.GameObjects.Sprite[] = []\r\n  private buildings?: Phaser.GameObjects.Sprite[] = []\r\n  private landscapes?: Phaser.GameObjects.Sprite[] = []\r\n  private streetLights?: Phaser.GameObjects.Sprite[] = []\r\n  private grounds?: Phaser.GameObjects.Sprite[] = []\r\n  private lastKeyPressed?: 37 | 39\r\n  private playerTexture: string\r\n  private playerWinTexture: string\r\n  private sandwichTexture: string\r\n  private player?: Phaser.GameObjects.Sprite\r\n  private sandwich?: Phaser.GameObjects.Sprite\r\n  private currentFrame: integer = 0\r\n  private leftBtn?: Phaser.GameObjects.Sprite\r\n  private rightBtn?: Phaser.GameObjects.Sprite\r\n  private isControlsEnabled?: boolean = true\r\n\r\n  constructor() {\r\n    super({\r\n      key: scenesKeys.SandwichGame,\r\n    })\r\n\r\n    this.playerTexture = 'tokiRunAnimation'\r\n    this.playerWinTexture = 'tokiWinAnimation'\r\n    this.sandwichTexture = 'sandwichFlyingAnimation'\r\n  }\r\n\r\n  public preload(): void {\r\n    super.preload()\r\n    this.load.image(\r\n      'sky',\r\n      '/static/assets/sprites/sandwich-game/sandwich_plan_sky.png'\r\n    )\r\n    this.load.image(\r\n      'building',\r\n      '/static/assets/sprites/sandwich-game/sandwich_plan_building.png'\r\n    )\r\n    this.load.image(\r\n      'landscape',\r\n      '/static/assets/sprites/sandwich-game/sandwich_plan_landscape.png'\r\n    )\r\n    this.load.image(\r\n      'streetLights',\r\n      '/static/assets/sprites/sandwich-game/sandwich_plan_street-lights.png'\r\n    )\r\n    this.load.image(\r\n      'ground',\r\n      '/static/assets/sprites/sandwich-game/sandwich_plan_ground.png'\r\n    )\r\n    this.load.image(\r\n      'btn_left_on',\r\n      '/static/assets/sprites/sandwich-game/btn_left_on.png'\r\n    )\r\n  }\r\n\r\n  public create() {\r\n    super.create()\r\n    this.resetClassVariables()\r\n    this.initBackground()\r\n    this.createControls()\r\n  }\r\n\r\n  public update(time: number, delta: number): void {\r\n    this.skies!.forEach(sky => {\r\n      sky!.x -= 0.15\r\n    })\r\n\r\n    Array.from([\r\n      this.skies,\r\n      this.buildings,\r\n      this.landscapes,\r\n      this.streetLights,\r\n      this.grounds,\r\n    ]).forEach(element => {\r\n      // Loop through props sprites to determine if we have to clone a props to avoid blank\r\n      if (\r\n        element![element!.length - 1].x +\r\n          element![element!.length - 1].width / gameStore.ratioResolution <\r\n        this.game.config.width\r\n      ) {\r\n        if (element === this.skies) {\r\n          this.createCloneBackgroundElement(element!, 'sky')\r\n        } else if (element === this.buildings) {\r\n          this.createCloneBackgroundElement(element!, 'building')\r\n        } else if (element === this.landscapes) {\r\n          this.createCloneBackgroundElement(element!, 'landscape')\r\n        } else if (element === this.streetLights) {\r\n          this.createCloneBackgroundElement(element!, 'streetLights')\r\n        } else if (element === this.grounds) {\r\n          this.createCloneBackgroundElement(element!, 'ground')\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  protected initListeners(): void {\r\n    super.initListeners()\r\n    Emitter.on(GameEvents.SandwichPicked, () => {\r\n      gameManager.suspendMinigame()\r\n      this.playWinAnimation()\r\n      this.sandwich!.destroy()\r\n      this.disableMobileControls()\r\n      this.isControlsEnabled = false\r\n    })\r\n  }\r\n\r\n  private resetClassVariables(): void {\r\n    this.skies = []\r\n    this.buildings = []\r\n    this.landscapes = []\r\n    this.streetLights = []\r\n    this.grounds = []\r\n    this.isControlsEnabled = true\r\n  }\r\n\r\n  private createPlayer = (playerTexture: string): Phaser.GameObjects.Sprite => {\r\n    const sprite = this.add\r\n      .sprite(\r\n        50,\r\n        Number(this.game.config.height) -\r\n          this.grounds![0].height / gameStore.ratioResolution,\r\n        playerTexture\r\n      )\r\n      .setOrigin(0, 1)\r\n\r\n    const spriteAnim = sprite.anims.animationManager.get(this.playerTexture)\r\n\r\n    if (!!spriteAnim) {\r\n      const [width, height] = [\r\n        spriteAnim.frames[0].frame.width,\r\n        spriteAnim.frames[0].frame.height,\r\n      ]\r\n      sprite.width = width\r\n      sprite.height = height\r\n    }\r\n\r\n    sprite.setOrigin(0, 1).setScale(1 / gameStore.ratioResolution)\r\n\r\n    return sprite\r\n  }\r\n\r\n  private createSandwich = (\r\n    sandwichTexture: string\r\n  ): Phaser.GameObjects.Sprite => {\r\n    const offset = 200\r\n    const sprite = this.add\r\n      .sprite(\r\n        this.grounds![0].x +\r\n          this.grounds![0].width / gameStore.ratioResolution -\r\n          offset,\r\n        Number(this.game.config.height) -\r\n          this.grounds![0].height / gameStore.ratioResolution,\r\n        sandwichTexture\r\n      )\r\n      .setOrigin(1, 1)\r\n      .setScale(1 / gameStore.ratioResolution)\r\n\r\n    const spriteAnim = sprite.anims.animationManager.get(this.sandwichTexture)\r\n\r\n    if (!!spriteAnim) {\r\n      const [width, height] = [\r\n        spriteAnim.frames[0].frame.width,\r\n        spriteAnim.frames[0].frame.height,\r\n      ]\r\n      sprite.width = width\r\n      sprite.height = height\r\n    }\r\n\r\n    return sprite\r\n  }\r\n\r\n  private animateGame(): void {\r\n    gameManager.audio.playSfx(SOUND_WALK, {\r\n      detune: randomRange(-500, 500),\r\n    })\r\n    const speedFactor = 3\r\n\r\n    Array.from([\r\n      this.skies,\r\n      this.buildings,\r\n      this.landscapes,\r\n      this.streetLights,\r\n      this.grounds,\r\n    ]).forEach(element => {\r\n      let nativeSpeed = 1\r\n\r\n      if (element === this.skies) {\r\n        nativeSpeed = 2\r\n      } else if (element === this.buildings) {\r\n        nativeSpeed = 4\r\n      } else if (element === this.landscapes) {\r\n        nativeSpeed = 5\r\n      } else if (element === this.streetLights) {\r\n        nativeSpeed = 6\r\n      } else if (element === this.grounds) {\r\n        nativeSpeed = 7\r\n      }\r\n\r\n      element!.forEach(props => {\r\n        props.x -= nativeSpeed * speedFactor\r\n      })\r\n    })\r\n\r\n    this.sandwich!.x -= 7 * speedFactor\r\n\r\n    this.player!.anims.play(this.playerTexture, true, this.currentFrame)\r\n    this.player!.anims.stop()\r\n\r\n    this.currentFrame += 1\r\n\r\n    if (this.currentFrame >= 8) {\r\n      this.currentFrame = 0\r\n    }\r\n  }\r\n\r\n  private initBackground(): void {\r\n    this.createBackgroundElement(this.skies!, 'sky')\r\n    this.createBackgroundElement(this.grounds!, 'ground')\r\n    this.createBackgroundElement(this.buildings!, 'building')\r\n    this.createBackgroundElement(this.landscapes!, 'landscape')\r\n    this.createBackgroundElement(this.streetLights!, 'streetLights')\r\n\r\n    Array.from(['keydown_LEFT', 'keydown_RIGHT']).forEach(keyCode => {\r\n      this.scene.scene.input.keyboard.on(keyCode, (e: KeyboardEvent) => {\r\n        if (this.lastKeyPressed !== e.keyCode && this.isControlsEnabled) {\r\n          this.animateGame()\r\n          this.lastKeyPressed = e.keyCode as 37 | 39\r\n        }\r\n      })\r\n    })\r\n\r\n    this.player = this.createPlayer(this.playerTexture)\r\n    this.player!.anims.play(this.playerTexture, true, 3)\r\n    this.player!.anims.stop()\r\n\r\n    this.sandwich = this.createSandwich(this.sandwichTexture)\r\n    this.sandwich!.anims.play(this.sandwichTexture, true, 0)\r\n\r\n    Array.from([this.player, this.sandwich]).forEach(element => {\r\n      this.physics.world.enable(element)\r\n\r\n      element.setDisplaySize(\r\n        element.width / gameStore.ratioResolution - 1,\r\n        element.height / gameStore.ratioResolution - 1\r\n      )\r\n    })\r\n\r\n    const collider = this.physics.add.overlap(\r\n      this.player!,\r\n      this.sandwich,\r\n      () => {\r\n        Emitter.emit(GameEvents.SandwichPicked, this)\r\n        this.physics.world.removeCollider(collider)\r\n      }\r\n    )\r\n  }\r\n\r\n  private createBackgroundElement(\r\n    array: Phaser.GameObjects.Sprite[],\r\n    texture: string\r\n  ): void {\r\n    array![0] = this.add\r\n      .sprite(0, Number(this.game.config.height), texture)\r\n      .setOrigin(0, 1)\r\n      .setScale(1 / gameStore.ratioResolution)\r\n  }\r\n\r\n  private createCloneBackgroundElement(\r\n    array: Phaser.GameObjects.Sprite[],\r\n    texture: string\r\n  ): void {\r\n    array[array.length + 1] = this.add\r\n      .sprite(\r\n        array[0].width / gameStore.ratioResolution,\r\n        Number(this.game.config.height),\r\n        texture\r\n      )\r\n      .setOrigin(0, 1)\r\n      .setScale(1 / gameStore.ratioResolution)\r\n  }\r\n\r\n  private createControls(): void {\r\n    this.leftBtn = this.add\r\n      .sprite(\r\n        Number(this.game.config.width) / 2,\r\n        Number(this.game.config.height) - 50,\r\n        'btn_left_on'\r\n      )\r\n      .setDepth(1000)\r\n      .setOrigin(0.5, 1)\r\n      .setScale(1 / gameStore.ratioResolution)\r\n    this.leftBtn.x =\r\n      this.leftBtn.x - this.leftBtn.width / gameStore.ratioResolution\r\n\r\n    this.rightBtn = this.add\r\n      .sprite(\r\n        Number(this.game.config.width) / 2,\r\n        Number(this.game.config.height) - 50,\r\n        'btn_right_on'\r\n      )\r\n      .setDepth(1000)\r\n      .setOrigin(0.5, 1)\r\n      .setScale(1 / gameStore.ratioResolution)\r\n    this.rightBtn.x =\r\n      this.rightBtn.x + this.rightBtn.width / gameStore.ratioResolution\r\n\r\n    Array.from([this.leftBtn, this.rightBtn]).forEach(btn => {\r\n      btn.setInteractive()\r\n      btn.input.hitArea.setSize(btn.width, btn.height)\r\n\r\n      btn.on('pointerdown', () => {\r\n        if (this.isControlsEnabled) {\r\n          if (btn === this.leftBtn) {\r\n            this.leftBtn.setTexture('btn_left_off')\r\n            this.rightBtn!.setTexture('btn_right_on')\r\n          } else {\r\n            this.leftBtn!.setTexture('btn_left_on')\r\n            this.rightBtn!.setTexture('btn_right_off')\r\n          }\r\n          this.animateGame()\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  private playWinAnimation = async () => {\r\n    gameManager.audio.playSfx(SOUND_GET_SANDWICH, { volume: 0.2, delay: 0.3 })\r\n    return new Promise(resolve => {\r\n      const animation = this.player!.anims.play(this.playerWinTexture, true, 0)\r\n      animation.on('animationcomplete', async () => {\r\n        await gameWait(this.time, 500)\r\n        this.onSuccess()\r\n        resolve()\r\n      })\r\n    })\r\n  }\r\n\r\n  private disableMobileControls(): void {\r\n    this.leftBtn!.setTexture('btn_left_off')\r\n    this.rightBtn!.setTexture('btn_right_off')\r\n  }\r\n}\r\n","import { SpriteConstructor } from '../../../utils/interfaces'\r\nimport gameStore from '../../../store/GameStore'\r\nimport { Emitter } from '../../manager/GameManager'\r\nimport { GameEvents } from '../../../utils/enums'\r\nimport { Omit } from '../../../utils/types'\r\n\r\nexport type Code = '◻' | '▲' | '|||' | '☰' | 'O' | 'U'\r\n\r\nexport default class KeyboardPasswordButton extends Phaser.GameObjects.Sprite {\r\n  public code: Code\r\n\r\n  constructor(\r\n    params: Omit<SpriteConstructor, 'texture'> & {\r\n      code: Code\r\n      style?: 'keyboard' | 'symbol'\r\n    }\r\n  ) {\r\n    params.style = params.style || 'keyboard'\r\n    let texture = `mdp_${params.style}_1`\r\n    switch (params.code) {\r\n      case '◻':\r\n        texture = `mdp_${params.style}_1`\r\n        break\r\n      case '▲':\r\n        texture = `mdp_${params.style}_2`\r\n        break\r\n      case '|||':\r\n        texture = `mdp_${params.style}_3`\r\n        break\r\n      case '☰':\r\n        texture = `mdp_${params.style}_4`\r\n        break\r\n      case 'O':\r\n        texture = `mdp_${params.style}_5`\r\n        break\r\n      case 'U':\r\n        texture = `mdp_${params.style}_6`\r\n        break\r\n    }\r\n    super(params.scene, params.x, params.y, texture, params.frame)\r\n    this.code = params.code\r\n\r\n    this.setOrigin(0, 0).setScale(\r\n      1 / gameStore.ratioResolution,\r\n      1 / gameStore.ratioResolution\r\n    )\r\n\r\n    if (params.style === 'keyboard') {\r\n      this.setInteractive()\r\n      this.on('pointerover', () => {\r\n        this.setTexture(`${texture}_hover`)\r\n      })\r\n      this.on('pointerout', () => {\r\n        this.setTexture(`${texture}`)\r\n      })\r\n      this.on('pointerdown', () => {\r\n        Emitter.emit(GameEvents.KeyboardPasswordButtonClicked, this.code)\r\n      })\r\n    }\r\n\r\n    params.scene.add.existing(this)\r\n  }\r\n}\r\n","import { ContainerConstructor } from '../../../utils/interfaces'\r\nimport KeyboardPasswordButton, { Code } from './KeyboardPasswordButton'\r\nimport { List } from '../../../utils/extensions'\r\nimport gameStore from '../../../store/GameStore'\r\nimport { shuffle } from '../../../utils/functions'\r\n\r\nconst COLUMNS = 3\r\nconst ROWS = 2\r\n\r\nexport default class KeyboardContainer extends Phaser.GameObjects.Container {\r\n  private readonly buttons: List<KeyboardPasswordButton> = new List([])\r\n\r\n  constructor(params: ContainerConstructor) {\r\n    super(params.scene, params.x, params.y, params.children)\r\n\r\n    Array.from(shuffle(['◻', '▲', '|||', '☰', 'O', 'U'])).forEach(\r\n      (code, index) => {\r\n        this.buttons.push(\r\n          new KeyboardPasswordButton({\r\n            scene: params.scene,\r\n            code: code as Code,\r\n            x: ((index % COLUMNS) * 280) / gameStore.ratioResolution,\r\n            y: ((index % ROWS) * 260) / gameStore.ratioResolution,\r\n          })\r\n        )\r\n      }\r\n    )\r\n\r\n    this.add(this.buttons)\r\n    params.scene.add.existing(this)\r\n  }\r\n\r\n  public getButton = (code: Code): KeyboardPasswordButton | undefined =>\r\n    this.buttons.find(button => button.code === code)\r\n}\r\n","import { ContainerConstructor } from '../../../utils/interfaces'\r\nimport gameStore from '../../../store/GameStore'\r\nimport { Emitter } from '../../manager/GameManager'\r\nimport { GameEvents } from '../../../utils/enums'\r\nimport { List } from '../../../utils/extensions'\r\nimport { scenesKeys } from '../../../utils/constants'\r\nimport PasswordGameScene from '../../scenes/action/PasswordGameScene'\r\nimport { gameWait } from '../../../utils/functions'\r\n\r\nconst passwordCharMap = {\r\n  1: -100,\r\n  2: -60,\r\n  3: -20,\r\n  4: 20,\r\n  5: 60,\r\n}\r\n\r\nexport default class ComputerPasswordScreen extends Phaser.GameObjects\r\n  .Container {\r\n  public readonly screen: Phaser.GameObjects.Sprite\r\n  private stars: List<Phaser.GameObjects.Sprite> = new List()\r\n\r\n  constructor(params: ContainerConstructor) {\r\n    super(params.scene, params.x, params.y)\r\n    this.screen = this.createScreenSprite()\r\n    this.add(this.screen)\r\n    const passwordGame = this.scene.scene.get(\r\n      scenesKeys.PasswordGame\r\n    ) as PasswordGameScene\r\n\r\n    Emitter.once(GameEvents.KeyboardPasswordButtonClicked, () => {\r\n      this.screen.setTexture('mdp_screen_2')\r\n    })\r\n    Emitter.on(GameEvents.KeyboardPasswordButtonClicked, async () => {\r\n      if (passwordGame.typedPassword.length < passwordGame.password.length) {\r\n        this.addStarChar(passwordGame.typedPassword.length)\r\n      } else if (\r\n        passwordGame.typedPassword.length === passwordGame.password.length\r\n      ) {\r\n        this.addStarChar(passwordGame.typedPassword.length)\r\n        await gameWait(this.scene.time, 30)\r\n        this.remove(this.stars)\r\n      }\r\n    })\r\n    params.scene.add.existing(this)\r\n  }\r\n\r\n  private addStarChar = (passwordCount: number): void => {\r\n    this.stars.push(this.createStar(passwordCharMap[passwordCount]))\r\n    this.add(this.stars.last())\r\n  }\r\n\r\n  private createStar = (offset: number): Phaser.GameObjects.Sprite => {\r\n    const sprite = this.scene.add.sprite(offset, -150, 'mdp_star')\r\n    sprite\r\n      .setOrigin(0.5, 1)\r\n      .setScale(1 / gameStore.ratioResolution, 1 / gameStore.ratioResolution)\r\n\r\n    return sprite\r\n  }\r\n\r\n  private createScreenSprite = (): Phaser.GameObjects.Sprite => {\r\n    const sprite = this.scene.add.sprite(0, 0, 'mdp_screen_1')\r\n    sprite\r\n      .setOrigin(0.5, 1)\r\n      .setScale(1 / gameStore.ratioResolution, 1 / gameStore.ratioResolution)\r\n\r\n    return sprite\r\n  }\r\n}\r\n","import { scenesKeys } from '../../../utils/constants'\r\nimport gameManager, { Emitter } from '../../manager/GameManager'\r\nimport MinigameScene from '../MinigameScene'\r\nimport KeyboardContainer from '../../objects/password-game/KeyboardContainer'\r\nimport KeyboardPasswordButton, {\r\n  Code,\r\n} from '../../objects/password-game/KeyboardPasswordButton'\r\nimport { gameWait, shuffle } from '../../../utils/functions'\r\nimport { GameEvents } from '../../../utils/enums'\r\nimport ComputerPasswordScreen from '../../objects/password-game/ComputerPasswordScreen'\r\nimport gameStore from '../../../store/GameStore'\r\n\r\nconst PASSWORD_DISPLAY_TIME = 3000\r\nconst PAW_DISPLAY_TIME = 180\r\n\r\nconst EASY_PASSWORD_LENGTH = 3\r\nconst MEDIUM_PASSWORD_LENGTH = 4\r\nconst HARD_PASSWORD_LENGTH = 5\r\n\r\nconst SOUND_PASSWORD_INVALID = 'error'\r\nconst SOUND_KEYBOARD_BUTTON = 'beep'\r\n\r\nexport default class PasswordGameScene extends MinigameScene {\r\n  public password: Code[] = []\r\n  public typedPassword: Code[] = []\r\n  private keyboard?: KeyboardContainer\r\n  private computerScreen?: ComputerPasswordScreen\r\n\r\n  constructor() {\r\n    super({\r\n      key: scenesKeys.PasswordGame,\r\n    })\r\n  }\r\n\r\n  public create = async () => {\r\n    super.create()\r\n    gameManager.suspendMinigame()\r\n    this.typedPassword = []\r\n    this.password = this.createPassword()\r\n    await this.playIntroduction()\r\n    gameManager.resumeMinigame()\r\n    this.computerScreen = new ComputerPasswordScreen({\r\n      scene: this,\r\n      x: window.innerWidth / 2,\r\n      y: window.innerHeight - 200,\r\n    })\r\n    this.keyboard = new KeyboardContainer({\r\n      scene: this,\r\n      y: window.innerHeight - 220,\r\n      x: window.innerWidth / 2,\r\n    })\r\n    this.keyboard.x -= this.keyboard.getBounds().width / 2\r\n  }\r\n\r\n  public update = (time: number, delta: number): void => {}\r\n\r\n  protected initListeners(): void {\r\n    super.initListeners()\r\n    Emitter.on(GameEvents.KeyboardPasswordButtonClicked, async (code: Code) => {\r\n      if (this.typedPassword.length === this.password.length) {\r\n        return\r\n      }\r\n      gameManager.audio.playSfx(SOUND_KEYBOARD_BUTTON)\r\n      this.typedPassword.push(code)\r\n      if (this.typedPassword.length <= this.password.length) {\r\n        const button = this.keyboard!.getButton(code)\r\n        const texture = button!.texture\r\n        if (!this.game.device.os.desktop) {\r\n          button!.setTexture(`${texture.key}_hover`)\r\n        }\r\n        const paw = this.add\r\n          .sprite(button!.getBounds().x, button!.getBounds().y, 'mdp_paw')\r\n          .setScale(1 / gameStore.ratioResolution)\r\n          .setOrigin(-0.5, -0.25)\r\n        gameWait(this.time, PAW_DISPLAY_TIME).then(() => {\r\n          if (!this.game.device.os.desktop) {\r\n            button!.setTexture(`${texture.key}`)\r\n          }\r\n          paw.destroy()\r\n        })\r\n      }\r\n      if (\r\n        this.typedPassword.length === this.password.length &&\r\n        this.password.every(\r\n          (value, index) => this.typedPassword[index] === value\r\n        )\r\n      ) {\r\n        gameManager.suspendMinigame()\r\n        this.computerScreen!.screen.setDepth(1000).anims.play(\r\n          'mdp_valid_animation'\r\n        )\r\n        await gameWait(this.time, 2000)\r\n        this.onSuccess()\r\n      } else if (\r\n        this.typedPassword.length === this.password.length &&\r\n        !this.password.every(\r\n          (value, index) => this.typedPassword[index] === value\r\n        )\r\n      ) {\r\n        gameManager.suspendMinigame()\r\n        this.computerScreen!.screen.setDepth(1000).anims.play(\r\n          'mdp_nope_animation'\r\n        )\r\n        gameManager.audio.playSfx(SOUND_PASSWORD_INVALID, {\r\n          volume: 0.4,\r\n          delay: 0.1,\r\n        })\r\n        gameWait(this.time, 2000).then(() => {\r\n          this.onFailure()\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  private playIntroduction = async () => {\r\n    return new Promise(resolve => {\r\n      const buttons: KeyboardPasswordButton[] = []\r\n      const animation = this.scene.scene.add\r\n        .sprite(window.innerWidth / 2, window.innerHeight, 'mdp_paper')\r\n        .setScale(1 / gameStore.ratioResolution)\r\n        .setOrigin(0.5, 1)\r\n        .anims.play('mdp_paper_animation')\r\n\r\n      animation.on('animationcomplete', async () => {\r\n        this.password.forEach((code, index) => {\r\n          buttons.push(\r\n            new KeyboardPasswordButton({\r\n              scene: this,\r\n              style: 'symbol',\r\n              code: code as Code,\r\n              x:\r\n                window.innerWidth / 2 -\r\n                115 +\r\n                (index * 160) / gameStore.ratioResolution,\r\n              y: window.innerHeight - 240,\r\n            }).setOrigin(0.5, 1)\r\n          )\r\n        })\r\n\r\n        await gameWait(this.time, PASSWORD_DISPLAY_TIME)\r\n        animation.destroy()\r\n        buttons.forEach(button => button.destroy())\r\n        resolve()\r\n      })\r\n    })\r\n  }\r\n\r\n  private createPassword = (): Code[] => {\r\n    let password = shuffle(['◻', '▲', '|||', '☰', 'O', 'U'])\r\n    if (gameStore.difficulty <= 3) {\r\n      password = password.slice(0, EASY_PASSWORD_LENGTH)\r\n    } else if (gameStore.difficulty <= 6) {\r\n      password = password.slice(0, MEDIUM_PASSWORD_LENGTH)\r\n    } else {\r\n      password = password.slice(0, HARD_PASSWORD_LENGTH)\r\n    }\r\n    return Array.from(password).reduce(\r\n      (acc, value, index) => {\r\n        if (index <= 4) {\r\n          acc.push(value as Code)\r\n        }\r\n\r\n        return acc\r\n      },\r\n      [] as Code[]\r\n    )\r\n  }\r\n}\r\n","import { scenesKeys } from '../../utils/constants'\r\nimport BaseScene from './BaseScene'\r\nimport { gameWait } from '../../utils/functions'\r\nimport gameManager from '../manager/GameManager'\r\n\r\nconst SOUND_LOST = 'hit'\r\nconst SOUND_WIN = 'success'\r\nconst DISPLAY_TIME = 3000\r\n\r\nexport default class PostMinigameScene extends BaseScene {\r\n  constructor() {\r\n    super({\r\n      key: scenesKeys.PostMinigameScene,\r\n    })\r\n  }\r\n\r\n  public create = async () => {\r\n    super.create()\r\n    this.createFillerGraphics()\r\n    const { hasTokiJustLost, isTokiDead } = gameManager\r\n\r\n    if (hasTokiJustLost) {\r\n      gameManager.audio.playSfx(SOUND_LOST, { volume: 0.2, delay: 0.5 })\r\n    } else {\r\n      gameManager.audio.playSfx(SOUND_WIN, { volume: 0.2, delay: 0.3 })\r\n    }\r\n\r\n    await gameWait(this.time, DISPLAY_TIME)\r\n    gameManager.resetTokiStatus()\r\n\r\n    if (isTokiDead) {\r\n      gameManager.loadDeathscreen()\r\n    } else {\r\n      gameManager.loadNextMinigame()\r\n    }\r\n  }\r\n\r\n  private createFillerGraphics = (): void => {\r\n    const graphics = this.add.graphics()\r\n    graphics.fillStyle(0xff3300, 0)\r\n    graphics.fillRect(100, 200, 600, 300)\r\n    graphics.fillRect(100, 100, 100, 100)\r\n    this.add.text(-100, -100, this.scene.key)\r\n  }\r\n}\r\n","import { scenesKeys } from '../../utils/constants'\r\nimport BaseScene from './BaseScene'\r\n\r\nexport default class DeathscreenScene extends BaseScene {\r\n  constructor() {\r\n    super({\r\n      key: scenesKeys.Deathscreen,\r\n    })\r\n  }\r\n\r\n  public create(): void {\r\n    super.create()\r\n    const graphics = this.add.graphics()\r\n    graphics.fillStyle(0xff3300, 1)\r\n    graphics.fillRect(100, 200, 600, 300)\r\n    graphics.fillRect(100, 100, 100, 100)\r\n    this.add.text(120, 110, this.scene.key)\r\n  }\r\n}\r\n","export const yellow = '#fcdb73'\r\nexport const blue = '#1334ff'\r\nexport const pink = '#f99bf3'\r\nexport const green = '#6adeb8'\r\n\r\nexport const orange = '#ff6b35'\r\nexport const lightRed = '#ff5a5a'\r\nexport const red = '#dc103c'\r\n\r\nexport const white = '#ffffff'\r\nexport const lightGray = '#cecdd0'\r\nexport const mediumGray = '#948d9b'\r\nexport const darkGray = '#4d4851'\r\nexport const black = '#28252a'\r\n\r\nexport default [\r\n  yellow,\r\n  blue,\r\n  pink,\r\n  green,\r\n  orange,\r\n  lightRed,\r\n  red,\r\n  white,\r\n  lightGray,\r\n  mediumGray,\r\n  darkGray,\r\n  black,\r\n]\r\n","import {\r\n  SpamGameScene,\r\n  PasswordGameScene,\r\n  SandwichGameScene,\r\n  BootScene,\r\n  DeathscreenScene,\r\n  HomescreenScene,\r\n  PostMinigameScene,\r\n  SplashscreenScene,\r\n} from '../game/scenes'\r\nimport { GameBackgroundColor } from './types'\r\nimport { green } from './colors'\r\n\r\nexport interface HFLGameConfig {\r\n  suspended: boolean\r\n  fade: boolean\r\n  minigameDuration: number\r\n  backgroundColor: GameBackgroundColor\r\n  fadeColor: string\r\n}\r\n\r\nexport const gameConfig: GameConfig = {\r\n  antialias: false,\r\n  backgroundColor: green,\r\n  input: {\r\n    gamepad: false,\r\n    keyboard: true,\r\n    mouse: true,\r\n    touch: true,\r\n  },\r\n  physics: {\r\n    arcade: {\r\n      debug: true,\r\n      gravity: { y: 0 },\r\n    },\r\n    default: 'arcade',\r\n  },\r\n  title: 'Harder, Faster, Looser',\r\n  version: '1.0',\r\n  width: window.innerWidth,\r\n  height: window.innerHeight,\r\n  zoom: 3,\r\n  parent: 'game',\r\n  scene: [\r\n    BootScene,\r\n    SplashscreenScene,\r\n    HomescreenScene,\r\n\r\n    SpamGameScene,\r\n    SandwichGameScene,\r\n    PasswordGameScene,\r\n\r\n    PostMinigameScene,\r\n    DeathscreenScene,\r\n  ],\r\n  type: Phaser.AUTO,\r\n  pixelArt: true,\r\n}\r\n","import { TweenLite } from 'gsap'\r\nimport { promiseAnimation } from './functions'\r\n\r\nexport const appear = (\r\n  $el: Element,\r\n  duration: number = 0.2,\r\n  delay: number = 0\r\n) => {\r\n  return promiseAnimation(\r\n    TweenLite.to($el, duration, {\r\n      opacity: 1,\r\n    }).delay(delay)\r\n  )\r\n}\r\n\r\nexport const disappear = (\r\n  $el: Element,\r\n  duration: number = 0.2,\r\n  delay: number = 0\r\n) => {\r\n  return promiseAnimation(\r\n    TweenLite.to($el, duration, {\r\n      opacity: 0,\r\n    }).delay(delay)\r\n  )\r\n}\r\n","import { GameCategory } from '../../utils/enums'\r\nimport { categoriesProbability, scenesKeys } from '../../utils/constants'\r\nimport { List } from '../../utils/extensions'\r\nimport gameManager from './GameManager'\r\n\r\ninterface IGames {\r\n  [category: string]: List<string>\r\n}\r\n\r\nclass MinigameManager {\r\n  public currentCategory: GameCategory = GameCategory.Action\r\n  private lastGame?: string\r\n\r\n  private games: IGames = {\r\n    [GameCategory.Action]: new List<string>([\r\n      scenesKeys.SpamGame,\r\n      scenesKeys.SandwichGame,\r\n      scenesKeys.PasswordGame,\r\n    ]),\r\n    [GameCategory.Waiting]: new List<string>([]),\r\n  }\r\n\r\n  private playedGames: IGames = {\r\n    [GameCategory.Action]: new List<string>(),\r\n    [GameCategory.Waiting]: new List<string>(),\r\n  }\r\n\r\n  public pickNextGameKey(): string {\r\n    let selectedCategory: GameCategory\r\n    selectedCategory = this.pickRandomCategory(Math.random())\r\n\r\n    if (\r\n      this.currentCategory === GameCategory.Waiting &&\r\n      selectedCategory === GameCategory.Waiting\r\n    ) {\r\n      while (selectedCategory === GameCategory.Waiting) {\r\n        selectedCategory = this.pickRandomCategory(Math.random())\r\n      }\r\n    }\r\n\r\n    this.currentCategory = selectedCategory\r\n    console.log(this.currentCategory)\r\n\r\n    return this.pickGameKey(selectedCategory)\r\n  }\r\n\r\n  public startGame = async (key: string) => {\r\n    console.log('picking ' + key)\r\n    let game: string | undefined\r\n    let category: string | undefined\r\n    for (const gameCategory in this.games) {\r\n      if (this.games.hasOwnProperty(gameCategory)) {\r\n        game = this.games[gameCategory].find(gameKey => gameKey === key)\r\n        if (game) {\r\n          category = gameCategory\r\n        }\r\n      }\r\n    }\r\n\r\n    if (category && key) {\r\n      if (this.playedGames[category].length === this.games[category].length) {\r\n        this.playedGames[category].clear()\r\n      }\r\n\r\n      if (!this.playedGames[category].has(key)) {\r\n        this.playedGames[category].push(key)\r\n      } else {\r\n        key = this.games[category].random()\r\n      }\r\n\r\n      if (this.lastGame && this.lastGame === key) {\r\n        while (key === this.lastGame) {\r\n          key = this.games[category].random()\r\n        }\r\n      }\r\n\r\n      this.lastGame = key\r\n\r\n      await gameManager.startScene(key)\r\n    }\r\n  }\r\n\r\n  public pickGameKey(category: GameCategory): string {\r\n    console.log('picking ' + category)\r\n    let game = this.games[category].random()\r\n\r\n    if (this.playedGames[category].length === this.games[category].length) {\r\n      this.playedGames[category].clear()\r\n    }\r\n\r\n    if (!this.playedGames[category].has(game)) {\r\n      this.playedGames[category].push(game)\r\n    } else {\r\n      game = this.games[category].random()\r\n    }\r\n\r\n    if (this.lastGame && this.lastGame === game) {\r\n      while (game === this.lastGame) {\r\n        game = this.games[category].random()\r\n      }\r\n    }\r\n\r\n    this.lastGame = game\r\n\r\n    return game\r\n  }\r\n\r\n  private pickRandomCategory(random: number): GameCategory {\r\n    if (\r\n      this.games[GameCategory.Waiting].length > 0 &&\r\n      random < categoriesProbability[GameCategory.Waiting]\r\n    ) {\r\n      return GameCategory.Waiting\r\n    } else if (\r\n      this.games[GameCategory.Action].length > 0 &&\r\n      random >= categoriesProbability[GameCategory.Waiting] &&\r\n      categoriesProbability[GameCategory.Action]\r\n    ) {\r\n      return GameCategory.Action\r\n    }\r\n\r\n    return GameCategory.Action\r\n  }\r\n}\r\n\r\nconst minigameManager = new MinigameManager()\r\n\r\nexport default minigameManager\r\n","import { GameManager } from './GameManager'\r\n\r\nconst BG_MUSIC = 'bg'\r\nconst BG_VOLUME = 0.1\r\nconst SFX_VOLUME = 0.05\r\n\r\ntype ExtraConfig = Partial<SoundConfig & SoundMarker>\r\n\r\nexport default class AudioManager {\r\n  private sound: Phaser.Sound.BaseSoundManager\r\n\r\n  constructor(private gm: GameManager) {\r\n    this.sound = gm.game.sound\r\n    this.sound.pauseOnBlur = false\r\n  }\r\n\r\n  public playSfx = (key: string, extra?: ExtraConfig): void => {\r\n    this.sound.play(key, {\r\n      ...extra,\r\n      volume: (extra && extra.volume) || SFX_VOLUME,\r\n    })\r\n  }\r\n\r\n  public playBg = (extra?: ExtraConfig): void => {\r\n    this.sound.play(BG_MUSIC, {\r\n      ...extra,\r\n      volume: (extra && extra.volume) || BG_VOLUME,\r\n      loop: true,\r\n    })\r\n  }\r\n}\r\n","import { gameConfig, HFLGameConfig } from '../../utils/game'\r\nimport gameStore from '../../store/GameStore'\r\nimport { BaseEvents, GameEvents, GameState } from '../../utils/enums'\r\nimport { minigameSuffix, scenesKeys } from '../../utils/constants'\r\nimport { EventEmitter } from 'events'\r\nimport { appear, disappear } from '../../utils/anims'\r\nimport { GameBackgroundColor } from '../../utils/types'\r\nimport { gameBackgroundColorToCss } from '../../utils/functions'\r\nimport minigameManager from './MinigameManager'\r\nimport AudioManager from './AudioManager'\r\n\r\nexport const Emitter = new EventEmitter()\r\n\r\nexport class GameManager {\r\n  public game: Phaser.Game = new Phaser.Game(gameConfig)\r\n  public audio: AudioManager = new AudioManager(this)\r\n  public activeScene?: Phaser.Scene\r\n  public gameUI?: HTMLDivElement\r\n  public gameFader?: HTMLDivElement\r\n\r\n  constructor() {\r\n    Emitter.on(BaseEvents.SceneInit, (scene: Phaser.Scene) => {\r\n      this.activeScene = scene\r\n    })\r\n  }\r\n\r\n  public suspendMinigame = (): void => {\r\n    gameStore.changeConfig({\r\n      suspended: true,\r\n    })\r\n  }\r\n\r\n  public resumeMinigame = (): void => {\r\n    gameStore.changeConfig({\r\n      suspended: false,\r\n    })\r\n  }\r\n\r\n  public loadSplashscreen = async () => {\r\n    await this.startScene(scenesKeys.Splashscreen)\r\n    gameStore.changeState(GameState.Splashscreen)\r\n  }\r\n\r\n  public loadHomescreen = async () => {\r\n    await this.startScene(scenesKeys.Homescreen)\r\n    gameStore.changeState(GameState.Homescreen)\r\n  }\r\n\r\n  public loadMinigame = async (minigameKey: string) => {\r\n    gameManager.suspendMinigame()\r\n    await minigameManager.startGame(minigameKey)\r\n  }\r\n\r\n  public loadNextMinigame = async () => {\r\n    gameManager.suspendMinigame()\r\n    await this.startScene(minigameManager.pickNextGameKey())\r\n  }\r\n\r\n  public loadPostMinigame = async () => {\r\n    gameManager.suspendMinigame()\r\n    await this.startScene(scenesKeys.PostMinigameScene)\r\n  }\r\n\r\n  public loadDeathscreen = async () => {\r\n    await this.startScene(scenesKeys.Deathscreen)\r\n  }\r\n\r\n  public startScene = async (\r\n    key: string,\r\n    config: HFLGameConfig = gameStore.config,\r\n    optionnalData?: any\r\n  ) => {\r\n    Object.keys(GameEvents).forEach(event => {\r\n      Emitter.removeAllListeners(GameEvents[event])\r\n    })\r\n    console.log('STARTED ' + key)\r\n    if (this.gameFader && config.fade) {\r\n      gameStore.startTransitionning()\r\n      await appear(this.gameFader)\r\n      this.game.scene.scenes\r\n        .filter(scene => scene.scene.key !== key)\r\n        .forEach(scene => scene.scene.stop(scene.scene.key))\r\n      gameManager.resumeMinigame()\r\n      this.game.scene.start(key, optionnalData)\r\n      gameStore.changeState(\r\n        key.includes(minigameSuffix) ? GameState.Minigame : (key as GameState)\r\n      )\r\n      gameStore.regenerateUiKey()\r\n      gameStore.stopTransitionning()\r\n      await disappear(this.gameFader)\r\n      if (gameStore.paused) {\r\n        gameStore.resume()\r\n      }\r\n    } else {\r\n      this.game.scene.scenes\r\n        .filter(scene => scene.scene.key !== key)\r\n        .forEach(scene => scene.scene.stop(scene.scene.key))\r\n      gameStore.startTransitionning()\r\n      gameManager.resumeMinigame()\r\n      this.game.scene.start(key, optionnalData)\r\n      gameStore.stopTransitionning()\r\n      gameStore.changeState(\r\n        key.includes(minigameSuffix) ? GameState.Minigame : (key as GameState)\r\n      )\r\n      gameStore.regenerateUiKey()\r\n      if (gameStore.paused) {\r\n        gameStore.resume()\r\n      }\r\n    }\r\n  }\r\n\r\n  public pause = (): void => {\r\n    if (!this.activeScene) {\r\n      return\r\n    }\r\n    this.activeScene!.scene.pause()\r\n    gameStore.pause()\r\n  }\r\n\r\n  public resume = (): void => {\r\n    if (!this.activeScene) {\r\n      return\r\n    }\r\n    this.activeScene!.scene.resume()\r\n    gameStore.resume()\r\n  }\r\n\r\n  public changeBackgroundColor = (color: GameBackgroundColor): void => {\r\n    if (this.activeScene) {\r\n      this.activeScene.cameras.main.setBackgroundColor(\r\n        gameBackgroundColorToCss(color)\r\n      )\r\n    }\r\n  }\r\n\r\n  public restartActiveScene = async (\r\n    config: HFLGameConfig = gameStore.config,\r\n    data?: object\r\n  ) => {\r\n    if (this.activeScene) {\r\n      await this.startScene(this.activeScene.scene.key, config, data)\r\n    }\r\n  }\r\n\r\n  public togglePause = (): void => {\r\n    if (!this.activeScene) {\r\n      return\r\n    }\r\n    if (gameStore.paused) {\r\n      this.activeScene!.sound.setDetune(0)\r\n      this.activeScene!.scene.resume()\r\n      gameStore.resume()\r\n    } else {\r\n      this.activeScene!.sound.setDetune(-1200)\r\n      this.activeScene!.scene.pause()\r\n      gameStore.pause()\r\n    }\r\n\r\n    console.log('TOGGLE PAUSE')\r\n  }\r\n\r\n  get hasTokiJustLost(): boolean {\r\n    return (\r\n      gameStore.hasJustLoosedBrain ||\r\n      gameStore.hasJustLoosedHeart ||\r\n      gameStore.hasJustStress\r\n    )\r\n  }\r\n\r\n  public resetTokiStatus = (): void => {\r\n    gameStore.resetTokiStatus()\r\n  }\r\n\r\n  public looseLife = (): void => {\r\n    gameStore.looseLife()\r\n  }\r\n\r\n  get isTokiDead() {\r\n    return !gameStore.status.hasHeart\r\n  }\r\n}\r\n\r\nconst gameManager = new GameManager()\r\nexport default gameManager\r\n","import { action, observable } from 'mobx'\r\nimport { GameState } from '../utils/enums'\r\nimport { GameSettings } from '../utils/interfaces'\r\nimport { HFLGameConfig } from '../utils/game'\r\nimport gameManager from '../game/manager/GameManager'\r\nimport { green } from '../utils/colors'\r\n\r\ninterface TokiStatus {\r\n  hasStress: boolean\r\n  hasJustStress: boolean\r\n  hasBrain: boolean\r\n  hasJustBrain: boolean\r\n  hasHeart: boolean\r\n  hasJustHeart: boolean\r\n}\r\n\r\nclass GameStore {\r\n  @observable public state: GameState = GameState.Splashscreen\r\n  @observable public difficulty: number = 1\r\n  @observable public status: TokiStatus = {\r\n    hasStress: false,\r\n    hasBrain: true,\r\n    hasHeart: true,\r\n    hasJustStress: false,\r\n    hasJustBrain: false,\r\n    hasJustHeart: false,\r\n  }\r\n\r\n  @observable public elapsed: number = 0\r\n  @observable public paused: boolean = false\r\n  @observable public settings: GameSettings = { volume: 1 }\r\n  @observable public config: HFLGameConfig = {\r\n    suspended: false,\r\n    fade: true,\r\n    fadeColor: green,\r\n    backgroundColor: green,\r\n    minigameDuration: 500,\r\n  }\r\n  @observable public ratioResolution: number = 3\r\n  @observable public transitionning: boolean = false\r\n  @observable\r\n  public uiKey: string = new Phaser.Math.RandomDataGenerator().uuid()\r\n\r\n  @action public increaseElapsed = (delta: number = 1): void => {\r\n    this.elapsed += delta\r\n  }\r\n\r\n  @action public regenerateUiKey = (): void => {\r\n    this.uiKey = new Phaser.Math.RandomDataGenerator().uuid()\r\n  }\r\n\r\n  @action public changeConfig = (newConfig: Partial<HFLGameConfig>): void => {\r\n    this.config = { ...this.config, ...newConfig }\r\n    if (newConfig.backgroundColor) {\r\n      gameManager.changeBackgroundColor(this.config.backgroundColor)\r\n    }\r\n  }\r\n\r\n  @action public looseLife = (): void => {\r\n    if (!this.status.hasStress) {\r\n      this.status.hasStress = true\r\n      this.status.hasJustStress = true\r\n      this.status.hasJustBrain = false\r\n      this.status.hasJustHeart = false\r\n      this.status.hasJustStress = true\r\n    } else if (this.status.hasBrain) {\r\n      this.status.hasBrain = false\r\n      this.status.hasJustStress = false\r\n      this.status.hasJustBrain = true\r\n      this.status.hasJustHeart = false\r\n    } else if (this.status.hasHeart) {\r\n      this.status.hasHeart = false\r\n      this.status.hasJustStress = false\r\n      this.status.hasJustBrain = false\r\n      this.status.hasJustHeart = true\r\n    }\r\n  }\r\n\r\n  @action public changeState = (newState: GameState): void => {\r\n    this.state = newState\r\n  }\r\n\r\n  @action public increaseDifficulty = (step: number = 0.5): void => {\r\n    this.difficulty += step\r\n  }\r\n\r\n  @action public changeRatioResolution = (innerWidth: number): void => {\r\n    this.ratioResolution = 2\r\n  }\r\n\r\n  @action public togglePause = (): void => {\r\n    if (this.transitionning) {\r\n      return\r\n    }\r\n    this.paused = !this.paused\r\n  }\r\n\r\n  @action public pause = (): void => {\r\n    if (this.transitionning) {\r\n      return\r\n    }\r\n    this.paused = true\r\n  }\r\n\r\n  @action public resume = (): void => {\r\n    if (this.transitionning) {\r\n      return\r\n    }\r\n    this.paused = false\r\n  }\r\n\r\n  @action public startTransitionning = (): void => {\r\n    this.transitionning = true\r\n  }\r\n\r\n  @action public stopTransitionning = (): void => {\r\n    this.transitionning = false\r\n  }\r\n\r\n  @action public toggleTransition = (): void => {\r\n    this.transitionning = !this.transitionning\r\n  }\r\n\r\n  @action public resetTokiStatus = (): void => {\r\n    this.status.hasJustStress = false\r\n    this.status.hasJustBrain = false\r\n    this.status.hasJustHeart = false\r\n  }\r\n\r\n  get hasStress() {\r\n    return this.status.hasStress\r\n  }\r\n\r\n  get hasLoosedBrain() {\r\n    return !this.status.hasBrain\r\n  }\r\n\r\n  get hasLoosedHeart() {\r\n    return !this.status.hasHeart\r\n  }\r\n\r\n  get hasJustStress() {\r\n    return this.status.hasJustStress\r\n  }\r\n\r\n  get hasJustLoosedBrain() {\r\n    return this.status.hasJustBrain\r\n  }\r\n\r\n  get hasJustLoosedHeart() {\r\n    return this.status.hasJustHeart\r\n  }\r\n\r\n  get secondsElapsed() {\r\n    return (this.elapsed / 1000) * 16\r\n  }\r\n\r\n  get timeElapsed() {\r\n    return new Date(this.secondsElapsed * 1000).toLocaleTimeString('fr', {\r\n      minute: '2-digit',\r\n      second: '2-digit',\r\n    })\r\n  }\r\n}\r\n\r\nconst gameStore = new GameStore()\r\nexport default gameStore\r\n","import React, { FunctionComponent } from 'react'\n\nconst HomescreenUI: FunctionComponent = () => {\n  return (\n    <div className=\"homescreen-ui\">\n      <h1>Je suis l'ui du homescreen</h1>\n    </div>\n  )\n}\n\nexport default HomescreenUI\n","import React, { FunctionComponent } from 'react'\n\nconst SplashscreenUI: FunctionComponent = () => {\n  return (\n    <div className=\"splashscreen-ui\">\n      <h1>Je suis l'ui du splashscreen</h1>\n    </div>\n  )\n}\n\nexport default SplashscreenUI\n","import React, { FunctionComponent, useEffect, useRef, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport gameManager, { Emitter } from '../../../game/manager/GameManager'\r\nimport { GameEvents } from '../../../utils/enums'\r\nimport gameStore from '../../../store/GameStore'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nconst ProgressOuter = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  background: white;\r\n`\r\n\r\nconst ProgressInner = styled.div`\r\n  height: 40px;\r\n  will-change: width;\r\n  background: red;\r\n`\r\n\r\nconst RemainingTime: FunctionComponent = () => {\r\n  const {\r\n    config: { minigameDuration, suspended },\r\n  } = gameStore\r\n  const [remaining, setRemaining] = useState(0)\r\n  const button = useRef<HTMLButtonElement>(null)\r\n  useEffect(() => {\r\n    gameManager.activeScene!.time.addEvent({\r\n      callback: () => {\r\n        if (button.current) {\r\n          button.current.click()\r\n        }\r\n      },\r\n      delay: 16,\r\n      repeat: -1,\r\n    })\r\n  }, [])\r\n\r\n  if (remaining >= minigameDuration!) {\r\n    gameManager.activeScene!.time.removeAllEvents()\r\n    Emitter.emit(GameEvents.RemainingTimeOver)\r\n    setRemaining(minigameDuration - 0.00001)\r\n  }\r\n\r\n  const onClick = () => {\r\n    if (!suspended) {\r\n      gameStore.increaseElapsed()\r\n      setRemaining(remaining + 1)\r\n    }\r\n  }\r\n\r\n  const progress = 100 - (remaining / minigameDuration) * 100\r\n\r\n  return (\r\n    <ProgressOuter className=\"progress remaining-time\">\r\n      <button\r\n        ref={button}\r\n        onClick={onClick}\r\n        style={{ pointerEvents: 'all', display: 'none' }}\r\n      />\r\n      <ProgressInner\r\n        style={{ width: `${progress}%` }}\r\n        className=\"progress inner\"\r\n      >\r\n        <span style={{ display: 'none' }} aria-hidden={true}>\r\n          {progress}%\r\n        </span>\r\n      </ProgressInner>\r\n    </ProgressOuter>\r\n  )\r\n}\r\n\r\nexport default observer(RemainingTime)\r\n","import React, { FunctionComponent } from 'react'\r\nimport styled from 'styled-components'\r\nimport RemainingTime from './RemainingTime'\r\nimport { minigameToolbarHeight } from '../../../utils/constants'\r\n\r\nconst Div = styled.div`\r\n  background: rgb(55, 63, 71);\r\n  height: ${minigameToolbarHeight}px;\r\n  top: 0;\r\n  position: absolute;\r\n  z-index: 0;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 20px;\r\n`\r\n\r\nconst MinigameToolbar: FunctionComponent = props => {\r\n  return (\r\n    <Div {...props} className=\"minigame-toolbar\">\r\n      <RemainingTime />\r\n    </Div>\r\n  )\r\n}\r\n\r\nexport default MinigameToolbar\r\n","import React, { FunctionComponent } from 'react'\nimport MinigameToolbar from './games/MinigameToolbar'\n\nconst MinigameUI: FunctionComponent = () => {\n  return (\n    <div className=\"minigame-ui\">\n      <MinigameToolbar />\n    </div>\n  )\n}\n\nexport default MinigameUI\n","import React, { Component } from 'react'\r\nimport { randomString } from '../../utils/functions'\r\n\r\ninterface Props {\r\n  className?: string\r\n  style?: any\r\n  image: string\r\n  widthFrame: number\r\n  heightFrame: number\r\n  repeat?: number\r\n  isResponsive?: boolean\r\n  steps: number\r\n  scale?: number\r\n  fps: number\r\n  direction?: string\r\n  timeout?: number\r\n  autoplay?: boolean\r\n  loop?: boolean\r\n  startAt?: number\r\n  endAt?: false | number\r\n  background?: string\r\n  backgroundSize?: string\r\n  backgroundRepeat?: string\r\n  backgroundPosition?: string\r\n  getInstance?: (args: any) => void\r\n  onClick?: (args: any) => void\r\n  onDoubleClick?: (args: any) => void\r\n  onMouseMove?: (args: any) => void\r\n  onMouseEnter?: (args: any) => void\r\n  onMouseLeave?: (args: any) => void\r\n  onMouseOver?: (args: any) => void\r\n  onMouseOut?: (args: any) => void\r\n  onMouseDown?: (args: any) => void\r\n  onMouseUp?: (args: any) => void\r\n  onInit?: (args: any) => void\r\n  onResize?: any\r\n  onPlay?: (args: any) => void\r\n  onPause?: (args: any) => void\r\n  onLoopComplete?: any\r\n  onEachFrame?: any\r\n  onEnterFrame?: false | []\r\n}\r\n\r\ntype Direction = 'forward' | 'rewind'\r\n\r\ntype ParamInfo =\r\n  | 'direction'\r\n  | 'frame'\r\n  | 'fps'\r\n  | 'steps'\r\n  | 'width'\r\n  | 'height'\r\n  | 'scale'\r\n  | 'isPlaying'\r\n  | 'isPaused'\r\n  | 'completeLoopCicles'\r\n\r\nclass Spritesheet extends Component<Props> {\r\n  public static defaultProps = {\r\n    className: '',\r\n    style: {},\r\n    isResponsive: true,\r\n    direction: 'forward',\r\n    timeout: 0,\r\n    scale: 1,\r\n    autoplay: true,\r\n    loop: true,\r\n    startAt: 0,\r\n    endAt: false,\r\n    background: '',\r\n    backgroundSize: 'cover',\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundPosition: '',\r\n    repeat: -1,\r\n    getInstance: () => {},\r\n    onClick: () => {},\r\n    onDoubleClick: () => {},\r\n    onMouseMove: () => {},\r\n    onMouseEnter: () => {},\r\n    onMouseLeave: () => {},\r\n    onMouseOver: () => {},\r\n    onMouseOut: () => {},\r\n    onMouseDown: () => {},\r\n    onMouseUp: () => {},\r\n    onInit: () => {},\r\n    onResize: false,\r\n    onPlay: () => {},\r\n    onPause: () => {},\r\n    onLoopComplete: false,\r\n    onEachFrame: false,\r\n    onEnterFrame: false,\r\n  }\r\n\r\n  private intervalSprite: number | boolean\r\n  private isResponsive: boolean\r\n  private startAt: number\r\n  private fps: number\r\n  private steps: number\r\n  private completeLoopCicles: number\r\n  private isPlaying: boolean\r\n  private endAt: number\r\n  private spriteScale: number\r\n  private spriteEl: Element | HTMLElement | number | null\r\n  private direction: Direction\r\n  private frame: number\r\n  private spriteElContainer: any\r\n  private spriteElMove: HTMLElement | Element | null\r\n  private imageSprite: HTMLImageElement | null\r\n  private cols: number | null\r\n  private rows: number | null\r\n  private id: string\r\n\r\n  constructor(props: Props) {\r\n    super(props)\r\n\r\n    const {\r\n      isResponsive,\r\n      startAt,\r\n      endAt,\r\n      fps,\r\n      steps,\r\n      direction,\r\n      scale,\r\n    } = this.props\r\n\r\n    this.id = `spritesheet--${randomString(8)}`\r\n    this.spriteEl = this.spriteElContainer = this.spriteElMove = this.imageSprite = this.cols = this.rows = null\r\n    this.intervalSprite = false\r\n    // @ts-ignore\r\n    this.isResponsive = isResponsive\r\n    // @ts-ignore\r\n    this.startAt = this.setStartAt(startAt)\r\n    // @ts-ignore\r\n    this.endAt = this.setEndAt(endAt)\r\n    this.fps = fps\r\n    this.steps = steps\r\n    this.completeLoopCicles = 0\r\n    this.isPlaying = false\r\n    this.spriteScale = scale!\r\n    this.direction = this.setDirection(direction as Direction)\r\n    this.frame = this.startAt\r\n      ? this.startAt\r\n      : this.direction === 'rewind'\r\n      ? this.steps - 1\r\n      : 0\r\n  }\r\n\r\n  public componentDidMount() {\r\n    this.init()\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    // @ts-ignore\r\n    window.removeEventListener('resize', this.resize)\r\n  }\r\n\r\n  public renderElements = () => {\r\n    const {\r\n      image,\r\n      className,\r\n      style,\r\n      widthFrame,\r\n      heightFrame,\r\n      background,\r\n      backgroundSize,\r\n      backgroundRepeat,\r\n      backgroundPosition,\r\n      onClick,\r\n      onDoubleClick,\r\n      onMouseMove,\r\n      onMouseEnter,\r\n      onMouseLeave,\r\n      onMouseOver,\r\n      onMouseOut,\r\n      onMouseDown,\r\n      onMouseUp,\r\n    } = this.props\r\n\r\n    const containerStyles = {\r\n      position: 'relative',\r\n      overflow: 'hidden',\r\n      width: `${widthFrame}px`,\r\n      height: `${heightFrame}px`,\r\n      transform: `scale(${this.spriteScale})`,\r\n      transformOrigin: '0 0',\r\n      backgroundImage: `url(${background})`,\r\n      backgroundSize,\r\n      backgroundRepeat,\r\n      backgroundPosition,\r\n    }\r\n\r\n    const moveStyles = {\r\n      overflow: 'hidden',\r\n      backgroundRepeat: 'no-repeat',\r\n      display: 'table-cell',\r\n      backgroundImage: `url(${image})`,\r\n      width: `${widthFrame}px`,\r\n      height: `${heightFrame}px`,\r\n      transformOrigin: '0 50%',\r\n    }\r\n\r\n    const elMove = React.createElement('div', {\r\n      className: 'react-responsive-spritesheet-container__move',\r\n      style: moveStyles,\r\n    })\r\n\r\n    const elContainer = React.createElement(\r\n      'div',\r\n      {\r\n        className: 'react-responsive-spritesheet-container',\r\n        style: containerStyles,\r\n      },\r\n      elMove\r\n    )\r\n    const elSprite = React.createElement(\r\n      'div',\r\n      {\r\n        className: `spritesheet ${this.id} ${className}`,\r\n        style,\r\n        // @ts-ignore\r\n        onClick: () => onClick(this.setInstance()),\r\n        // @ts-ignore\r\n        onDoubleClick: () => onDoubleClick(this.setInstance()),\r\n        // @ts-ignore\r\n        onMouseMove: () => onMouseMove(this.setInstance()),\r\n        // @ts-ignore\r\n        onMouseEnter: () => onMouseEnter(this.setInstance()),\r\n        // @ts-ignore\r\n        onMouseLeave: () => onMouseLeave(this.setInstance()),\r\n        // @ts-ignore\r\n        onMouseOver: () => onMouseOver(this.setInstance()),\r\n        // @ts-ignore\r\n        onMouseOut: () => onMouseOut(this.setInstance()),\r\n        // @ts-ignore\r\n        onMouseDown: () => onMouseDown(this.setInstance()),\r\n        // @ts-ignore\r\n        onMouseUp: () => onMouseUp(this.setInstance()),\r\n      },\r\n      elContainer\r\n    )\r\n\r\n    return elSprite\r\n  }\r\n\r\n  public init = () => {\r\n    const {\r\n      image,\r\n      widthFrame,\r\n      heightFrame,\r\n      autoplay,\r\n      getInstance,\r\n      onInit,\r\n    } = this.props\r\n\r\n    const imgLoadSprite = new Image()\r\n    imgLoadSprite.src = image\r\n    imgLoadSprite.onload = () => {\r\n      if (!(document && document.querySelector(`.${this.id}`))) {\r\n        return\r\n      }\r\n      this.imageSprite = imgLoadSprite\r\n      this.cols =\r\n        this.imageSprite.width === widthFrame\r\n          ? 1\r\n          : this.imageSprite.width / widthFrame\r\n      this.rows =\r\n        this.imageSprite.height === heightFrame\r\n          ? 1\r\n          : this.imageSprite.height / heightFrame\r\n      this.spriteEl = document.querySelector(`.${this.id}`)\r\n      this.spriteElContainer = this.spriteEl!.querySelector(\r\n        '.react-responsive-spritesheet-container'\r\n      )\r\n      this.spriteElMove = this.spriteElContainer.querySelector(\r\n        '.react-responsive-spritesheet-container__move'\r\n      )\r\n      this.resize(false)\r\n      // @ts-ignore\r\n      window.addEventListener('resize', this.resize)\r\n      this.moveImage(false)\r\n      setTimeout(() => {\r\n        this.resize(false)\r\n      }, 10)\r\n      if (autoplay) {\r\n        this.play(true)\r\n      }\r\n      const instance = this.setInstance()\r\n      // @ts-ignore\r\n      getInstance(instance)\r\n      // @ts-ignore\r\n      onInit(instance)\r\n    }\r\n\r\n    imgLoadSprite.onerror = () => {\r\n      throw new Error(`Failed to load image ${imgLoadSprite.src}`)\r\n    }\r\n  }\r\n\r\n  public resize = (callback = true) => {\r\n    const { widthFrame, onResize, scale } = this.props\r\n\r\n    if (this.isResponsive) {\r\n      this.spriteScale =\r\n        ((this.spriteEl! as HTMLElement).offsetWidth / widthFrame) * scale!\r\n      this.spriteElContainer.style.transform = `scale(${this.spriteScale})`\r\n      this.spriteElContainer.style.imageRendering = 'pixelated'\r\n      ;(this.spriteEl! as HTMLElement).style.height = `${this.getInfo(\r\n        'height'\r\n      )}px`\r\n      if (callback && onResize) {\r\n        onResize(this.setInstance())\r\n      }\r\n    }\r\n  }\r\n\r\n  public play = (withTimeout = false) => {\r\n    const { onPlay, timeout } = this.props\r\n\r\n    if (!this.isPlaying) {\r\n      setTimeout(\r\n        () => {\r\n          // @ts-ignore\r\n          onPlay(this.setInstance())\r\n          this.setIntervalPlayFunctions()\r\n          this.isPlaying = true\r\n        },\r\n        withTimeout ? timeout : 0\r\n      )\r\n    }\r\n  }\r\n\r\n  public setIntervalPlayFunctions = () => {\r\n    if (this.intervalSprite) {\r\n      // @ts-ignore\r\n      // @ts-ignore\r\n      clearInterval(this.intervalSprite)\r\n    }\r\n    // @ts-ignore\r\n    this.intervalSprite = setInterval(() => {\r\n      if (this.isPlaying) {\r\n        this.moveImage()\r\n      }\r\n    }, 1000 / this.fps)\r\n  }\r\n\r\n  public moveImage = (play = true) => {\r\n    const {\r\n      onEnterFrame,\r\n      onEachFrame,\r\n      loop,\r\n      onLoopComplete,\r\n      repeat,\r\n    } = this.props\r\n\r\n    const currentRow = Math.floor(this.frame / this.cols!)\r\n    const currentCol = this.frame - this.cols! * currentRow\r\n    ;(this.spriteElMove! as HTMLElement).style.backgroundPosition = `-${this\r\n      .props.widthFrame * currentCol}px -${this.props.heightFrame *\r\n      currentRow}px`\r\n\r\n    if (onEnterFrame) {\r\n      onEnterFrame.map((frameAction, i) => {\r\n        // @ts-ignore\r\n        if (frameAction.frame === this.frame && frameAction.callback) {\r\n          // @ts-ignore\r\n          frameAction.callback()\r\n        }\r\n      })\r\n    }\r\n\r\n    if (play) {\r\n      if (this.direction === 'rewind') {\r\n        this.frame -= 1\r\n      } else {\r\n        this.frame += 1\r\n      }\r\n      if (onEachFrame) {\r\n        onEachFrame(this.setInstance())\r\n      }\r\n    }\r\n\r\n    if (this.isPlaying) {\r\n      if (\r\n        (this.direction === 'forward' &&\r\n          (this.frame === this.steps || this.frame === this.endAt)) ||\r\n        (this.direction === 'rewind' &&\r\n          (this.frame === -1 || this.frame === this.endAt))\r\n      ) {\r\n        if (loop) {\r\n          if (onLoopComplete) {\r\n            onLoopComplete(this.setInstance())\r\n          }\r\n          if (repeat === -1) {\r\n            this.completeLoopCicles += 1\r\n            this.frame = this.startAt\r\n              ? this.startAt\r\n              : this.direction === 'rewind'\r\n              ? this.steps - 1\r\n              : 0\r\n          } else if (repeat === 0) {\r\n            this.pause()\r\n          } else {\r\n            this.completeLoopCicles += 1\r\n            this.frame = this.startAt\r\n              ? this.startAt\r\n              : this.direction === 'rewind'\r\n              ? this.steps - 1\r\n              : 0\r\n            if (this.completeLoopCicles === repeat!) {\r\n              this.pause()\r\n            }\r\n          }\r\n        } else {\r\n          this.pause()\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public pause = () => {\r\n    const { onPause } = this.props\r\n\r\n    this.isPlaying = false\r\n    // @ts-ignore\r\n    clearInterval(this.intervalSprite)\r\n    // @ts-ignore\r\n    onPause(this.setInstance())\r\n  }\r\n\r\n  public goToAndPlay = (frame: number): void => {\r\n    this.frame = frame ? frame : this.frame\r\n    this.play()\r\n  }\r\n\r\n  public goToAndPause = (frame: number): void => {\r\n    this.pause()\r\n    this.frame = frame ? frame : this.frame\r\n    this.moveImage()\r\n  }\r\n\r\n  public setStartAt = (frame: number): number => {\r\n    this.startAt = frame ? frame - 1 : 0\r\n    return this.startAt\r\n  }\r\n\r\n  public setEndAt = (frame: number): number => {\r\n    this.endAt = frame\r\n    return this.endAt\r\n  }\r\n\r\n  public setFps(fps: number) {\r\n    this.fps = fps\r\n    this.setIntervalPlayFunctions()\r\n  }\r\n\r\n  public setDirection = (direction: Direction): Direction => {\r\n    this.direction = direction === 'rewind' ? 'rewind' : 'forward'\r\n    return this.direction\r\n  }\r\n\r\n  public getInfo = (param: ParamInfo) => {\r\n    switch (param) {\r\n      case 'direction':\r\n        return this.direction\r\n      case 'frame':\r\n        return this.frame\r\n      case 'fps':\r\n        return this.fps\r\n      case 'steps':\r\n        return this.steps\r\n      case 'width':\r\n        return this.spriteElContainer.getBoundingClientRect().width\r\n      case 'height':\r\n        return this.spriteElContainer.getBoundingClientRect().height\r\n      case 'scale':\r\n        return this.spriteScale\r\n      case 'isPlaying':\r\n        return this.isPlaying\r\n      case 'isPaused':\r\n        return !this.isPlaying\r\n      case 'completeLoopCicles':\r\n        return this.completeLoopCicles\r\n      default:\r\n        throw new Error(\r\n          `Invalid param \\`${param}\\` requested by Spritesheet.getinfo(). See the documentation on https://github.com/danilosetra/react-responsive-spritesheet`\r\n        )\r\n    }\r\n  }\r\n\r\n  public setInstance() {\r\n    return {\r\n      play: this.play,\r\n      pause: this.pause,\r\n      goToAndPlay: this.goToAndPlay,\r\n      goToAndPause: this.goToAndPause,\r\n      setStartAt: this.setStartAt,\r\n      setEndAt: this.setEndAt,\r\n      setFps: this.setFps,\r\n      setDirection: this.setDirection,\r\n      getInfo: this.getInfo,\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return this.renderElements()\r\n  }\r\n}\r\n\r\nexport default Spritesheet\r\n","import React, { FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport gameStore from '../../../store/GameStore'\r\nimport styled from 'styled-components'\r\nimport stress from '../../../assets/sprites/post-minigame/life_1_285_270.png'\r\nimport brain from '../../../assets/sprites/post-minigame/life_2_285_270.png'\r\nimport heart from '../../../assets/sprites/post-minigame/life_3_285_270.png'\r\nimport Spritesheet from '../Spritesheet'\r\n\r\nconst FRAME_WIDTH = 285\r\nconst FRAME_HEIGHT = 270\r\nconst FPS = 8\r\n\r\nconst LivesListInner = styled.ul`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: ${FRAME_WIDTH / 3}px;\r\n  & li {\r\n    margin-bottom: 20px;\r\n  }\r\n`\r\n\r\nconst LivesList: FunctionComponent = () => {\r\n  const {\r\n    hasLoosedBrain,\r\n    hasLoosedHeart,\r\n    hasStress,\r\n    hasJustLoosedBrain,\r\n    hasJustLoosedHeart,\r\n    hasJustStress,\r\n  } = gameStore\r\n  return (\r\n    <LivesListInner>\r\n      <li>\r\n        <Spritesheet\r\n          image={stress}\r\n          widthFrame={FRAME_WIDTH}\r\n          heightFrame={FRAME_HEIGHT}\r\n          steps={8}\r\n          autoplay={hasJustStress}\r\n          startAt={hasStress && !hasJustStress ? 8 : 0}\r\n          fps={FPS}\r\n          repeat={0}\r\n        />\r\n      </li>\r\n      <li>\r\n        <Spritesheet\r\n          image={brain}\r\n          widthFrame={FRAME_WIDTH}\r\n          heightFrame={FRAME_HEIGHT}\r\n          steps={20}\r\n          autoplay={hasJustLoosedBrain}\r\n          startAt={hasLoosedBrain && !hasJustLoosedBrain ? 20 : 0}\r\n          fps={FPS}\r\n          repeat={0}\r\n        />\r\n      </li>\r\n      <li>\r\n        <Spritesheet\r\n          image={heart}\r\n          widthFrame={FRAME_WIDTH}\r\n          heightFrame={FRAME_HEIGHT}\r\n          steps={9}\r\n          autoplay={hasJustLoosedHeart}\r\n          startAt={hasLoosedHeart && !hasJustLoosedHeart ? 9 : 0}\r\n          fps={FPS}\r\n          repeat={0}\r\n        />\r\n      </li>\r\n    </LivesListInner>\r\n  )\r\n}\r\n\r\nexport default observer(LivesList)\r\n","import React, { FunctionComponent } from 'react'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport gameStore from '../../store/GameStore'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { gameBackgroundColorToCss } from '../../utils/functions'\r\nimport LivesContainer from './post-minigame/LivesList'\r\nimport { black } from '../../utils/colors'\r\n\r\ninterface StyledProps {\r\n  backgroundColor?: string\r\n}\r\n\r\nconst show = keyframes`\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n`\r\n\r\nconst PostMinigameUIInner = styled.div<StyledProps>`\r\n  background: ${(props: StyledProps) => props.backgroundColor};\r\n  position: fixed;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  animation: ${show} 0.8s;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst Score = styled.h2`\r\n  margin-bottom: 40px;\r\n  font-size: 36px;\r\n  color: ${black};\r\n`\r\n\r\nconst PostMinigameUI: FunctionComponent = () => {\r\n  const {\r\n    timeElapsed,\r\n    config: { backgroundColor },\r\n  } = gameStore\r\n  return (\r\n    <PostMinigameUIInner\r\n      backgroundColor={gameBackgroundColorToCss(backgroundColor)}\r\n    >\r\n      <Score>{timeElapsed}</Score>\r\n      <LivesContainer />\r\n    </PostMinigameUIInner>\r\n  )\r\n}\r\n\r\nexport default observer(PostMinigameUI)\r\n\r\n","import React, { FunctionComponent } from 'react'\n\nconst DeathscreenUI: FunctionComponent = () => {\n  return (\n    <div className=\"deathscreen-ui\">\n      <h1>Je suis l'ui du deathscreen</h1>\n    </div>\n  )\n}\n\nexport default DeathscreenUI\n","import React, { FunctionComponent, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { observer } from 'mobx-react-lite'\nimport gameManager from '../../game/manager/GameManager'\nimport gameStore from '../../store/GameStore'\n\nconst Div = styled.div`\n  position: absolute;\n  z-index: 10;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  opacity: 0;\n  &::after {\n    content: '';\n    transition: all 0.3s;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: ${props => props.color};\n  }\n`\n\ninterface Props {\n  color?: string\n}\n\nconst Transition: FunctionComponent<Props> = () => {\n  const fader = React.createRef<HTMLDivElement>()\n  const {\n    config: { fadeColor },\n  } = gameStore\n  useEffect(() => {\n    if (fader.current) {\n      gameManager.gameFader = fader.current\n    }\n  }, [])\n\n  return <Div color={fadeColor} ref={fader} className=\"transition-fade\" />\n}\n\nexport default observer(Transition)\n","import React, { FunctionComponent, useEffect, useRef } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport gameStore from '../../store/GameStore'\r\nimport { GameState } from '../../utils/enums'\r\nimport HomescreenUI from './HomescreenUI'\r\nimport SplashscreenUI from './SplashscreenUI'\r\nimport MinigameUI from './MinigameUI'\r\nimport PostMinigameUI from './PostMinigameUI'\r\nimport DeathscreenUI from './DeathscreenUI'\r\nimport Transition from './Transition'\r\nimport gameManager from '../../game/manager/GameManager'\r\n\r\nconst GameUI: FunctionComponent = () => {\r\n  const { state, uiKey, paused } = gameStore\r\n  const classNames = ['game-ui']\r\n  const gameUI = useRef<HTMLDivElement>(null)\r\n  useEffect(() => {\r\n    if (gameUI.current) {\r\n      gameManager.gameUI = gameUI.current\r\n    }\r\n  }, [])\r\n\r\n  let UIComponent = SplashscreenUI\r\n\r\n  switch (state) {\r\n    case GameState.Splashscreen:\r\n      UIComponent = SplashscreenUI\r\n      break\r\n    case GameState.Homescreen:\r\n      UIComponent = HomescreenUI\r\n      break\r\n    case GameState.Minigame:\r\n      UIComponent = MinigameUI\r\n      break\r\n    case GameState.PostMinigame:\r\n      UIComponent = PostMinigameUI\r\n      break\r\n    case GameState.Deathscreen:\r\n      UIComponent = DeathscreenUI\r\n      break\r\n  }\r\n\r\n  if (paused) {\r\n    classNames.push('paused')\r\n  }\r\n\r\n  return (\r\n    <div ref={gameUI} className={classNames.join(' ')}>\r\n      <Transition />\r\n      {gameManager.activeScene !== undefined && <UIComponent key={uiKey} />}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(GameUI)\r\n","import React, { FunctionComponent, ReactNode } from 'react'\r\nimport Draggable from 'react-draggable'\r\nimport { observer } from 'mobx-react-lite'\r\nimport {\r\n  ForceThemeProps,\r\n  HideableProps,\r\n  PositionneableProps,\r\n  TitledProps,\r\n} from '../../../utils/interfaces'\r\nimport { useClassTheme } from '../../../utils/hooks'\r\n\r\ninterface Props {\r\n  children?: ReactNode | string\r\n  disabled?: boolean\r\n  center?: boolean\r\n  rounded?: boolean\r\n}\r\n\r\nconst DebugContainer: FunctionComponent<\r\n  Props & ForceThemeProps & PositionneableProps & TitledProps & HideableProps\r\n> = props => {\r\n  const {\r\n    title,\r\n    children,\r\n    center,\r\n    rounded,\r\n    forceTheme,\r\n    x,\r\n    hide,\r\n    y,\r\n    zIndex,\r\n    draggable,\r\n    disabled,\r\n  } = props\r\n  const isDraggable =\r\n    draggable !== undefined ? draggable : DebugContainer.defaultProps!.draggable\r\n  const classNames = ['game-state-list', 'container']\r\n  const themeClass = useClassTheme(forceTheme)\r\n  if (themeClass) {\r\n    classNames.push(themeClass)\r\n  }\r\n\r\n  if (disabled) {\r\n    classNames.push('disabled')\r\n  }\r\n\r\n  if (title && title !== '') {\r\n    classNames.push('with-title')\r\n  }\r\n  if (center) {\r\n    classNames.push('is-center')\r\n  }\r\n  if (rounded) {\r\n    classNames.push('is-rounded')\r\n  }\r\n\r\n  const section = (\r\n    <section\r\n      className={classNames.join(' ')}\r\n      style={{\r\n        left: x,\r\n        top: y,\r\n        zIndex,\r\n        position: 'fixed',\r\n        display: hide ? 'none' : 'initial',\r\n      }}\r\n    >\r\n      {title && title !== '' && <h2 className=\"title\">{title}</h2>}\r\n      {children}\r\n    </section>\r\n  )\r\n\r\n  if (isDraggable) {\r\n    return <Draggable>{section}</Draggable>\r\n  }\r\n\r\n  return section\r\n}\r\n\r\nDebugContainer.defaultProps = {\r\n  center: false,\r\n  draggable: true,\r\n  hide: false,\r\n  disabled: false,\r\n  rounded: false,\r\n}\r\n\r\nexport default observer(DebugContainer)\r\n","import * as React from 'react'\r\nimport { ChangeEvent, FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport gameStore from '../../../store/GameStore'\r\nimport DebugContainer from './DebugContainer'\r\nimport gameManager from '../../../game/manager/GameManager'\r\nimport { minigameSuffix } from '../../../utils/constants'\r\nimport {\r\n  HideableProps,\r\n  PositionneableProps,\r\n  TitledProps,\r\n} from '../../../utils/interfaces'\r\n\r\nconst GameDebugMinigamePicker: FunctionComponent<\r\n  TitledProps & PositionneableProps & HideableProps\r\n> = props => {\r\n  const { transitionning } = gameStore\r\n\r\n  const minigames = gameManager.game.scene.scenes\r\n    .filter(scene => scene.scene.key.includes(minigameSuffix))\r\n    .map(scene => scene.scene.key)\r\n\r\n  const handleMinigameChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    gameManager.loadMinigame(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <DebugContainer disabled={transitionning} {...props}>\r\n        {minigames.map(minigame => {\r\n          return (\r\n            <label key={minigame} className=\"game-state-list--item\">\r\n              <input\r\n                id={minigame}\r\n                className=\"radio\"\r\n                type=\"radio\"\r\n                name=\"currentMinigame\"\r\n                value={minigame}\r\n                checked={\r\n                  gameManager.activeScene\r\n                    ? minigame === gameManager.activeScene.scene.key\r\n                    : false\r\n                }\r\n                onChange={handleMinigameChange}\r\n              />\r\n              <span>{minigame}</span>\r\n            </label>\r\n          )\r\n        })}\r\n      </DebugContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default observer(GameDebugMinigamePicker)\r\n","import * as React from 'react'\r\nimport { ChangeEvent, FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport gameStore from '../../../store/GameStore'\r\nimport { GameState } from '../../../utils/enums'\r\nimport DebugContainer from './DebugContainer'\r\nimport gameManager from '../../../game/manager/GameManager'\r\nimport { scenesKeys } from '../../../utils/constants'\r\nimport { PositionneableProps, TitledProps } from '../../../utils/interfaces'\r\nimport GameDebugMinigamePicker from './GameDebugMinigamePicker'\r\n\r\nconst GameDebugStateList: FunctionComponent<\r\n  TitledProps & PositionneableProps\r\n> = props => {\r\n  const { state, transitionning } = gameStore\r\n  const availableStates = Object.keys(GameState).map(\r\n    gameState => GameState[gameState]\r\n  )\r\n\r\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    switch (e.target.value as GameState) {\r\n      case GameState.Splashscreen:\r\n        gameManager.loadSplashscreen()\r\n        break\r\n      case GameState.Homescreen:\r\n        gameManager.loadHomescreen()\r\n        break\r\n      case GameState.Deathscreen:\r\n        gameManager.loadDeathscreen()\r\n        break\r\n      case GameState.Minigame:\r\n        gameManager.loadMinigame(scenesKeys.SpamGame)\r\n        break\r\n      default:\r\n        gameManager.startScene(e.target.value as GameState)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <DebugContainer disabled={transitionning} {...props}>\r\n        {availableStates.map(availableState => {\r\n          return (\r\n            <label key={availableState} className=\"game-state-list--item\">\r\n              <input\r\n                id={availableState}\r\n                className=\"radio\"\r\n                type=\"radio\"\r\n                name=\"currentState\"\r\n                value={availableState}\r\n                checked={availableState === state}\r\n                onChange={handleInputChange}\r\n              />\r\n              <span>{availableState}</span>\r\n            </label>\r\n          )\r\n        })}\r\n      </DebugContainer>\r\n      <GameDebugMinigamePicker\r\n        hide={state && state !== GameState.Minigame}\r\n        title=\"Minigame picker\"\r\n        x={630}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default observer(GameDebugStateList)\r\n","import * as React from 'react'\r\nimport { FunctionComponent } from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface Props {\r\n  size?: 'small' | 'medium' | 'large'\r\n}\r\n\r\nconst Div = styled.div`\r\n  ${(props: Props) => {\r\n    switch (props.size!) {\r\n      case 'small':\r\n        return 'margin: 1rem 0'\r\n      case 'medium':\r\n        return 'margin: 2rem 0'\r\n      case 'large':\r\n        return 'margin: 4rem 0'\r\n    }\r\n  }}\r\n`\r\n\r\nconst Spacer: FunctionComponent<Props> = props => {\r\n  return <Div {...props} />\r\n}\r\n\r\nSpacer.defaultProps = {\r\n  size: 'small',\r\n}\r\n\r\nexport default Spacer\r\n","import * as React from 'react'\r\nimport {\r\n  FunctionComponent,\r\n  KeyboardEventHandler,\r\n  KeyboardEvent,\r\n  useRef,\r\n} from 'react'\r\nimport { useCallback } from 'react'\r\nimport { Key } from 'ts-key-enum'\r\nimport { ReactNode } from 'react'\r\n\r\ninterface Props {\r\n  validationFeedbackDelay?: number\r\n  children?: ReactNode | string\r\n  onValidate?: (value: string) => void\r\n  onKeyDown?: KeyboardEventHandler<HTMLInputElement>\r\n  max?: number\r\n  min?: number\r\n  validationClassname?: string\r\n}\r\n\r\ntype HTMLInputProps = Partial<\r\n  Pick<\r\n    HTMLInputElement,\r\n    'type' | 'checked' | 'defaultValue' | 'value' | 'className'\r\n  >\r\n>\r\n\r\nconst ValidatableInput: FunctionComponent<Props & HTMLInputProps> = props => {\r\n  const {\r\n    validationClassname,\r\n    validationFeedbackDelay,\r\n    onValidate,\r\n    onKeyDown,\r\n    ...rest\r\n  } = props\r\n  const input = useRef<HTMLInputElement>(null)\r\n\r\n  let last: number\r\n  const handleOnKeyDown = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === Key.Enter) {\r\n      if (input.current && !input.current.classList.contains('is-success')) {\r\n        input.current.classList.add('is-success')\r\n      }\r\n      if (last) {\r\n        clearTimeout(last)\r\n      }\r\n      if (onValidate) {\r\n        onValidate((e.target as HTMLInputElement).value)\r\n      }\r\n      last = setTimeout(() => {\r\n        if (input.current && validationClassname) {\r\n          input.current.classList.remove(validationClassname)\r\n        }\r\n      }, validationFeedbackDelay)\r\n    }\r\n    if (onKeyDown) {\r\n      onKeyDown(e)\r\n    }\r\n  }, [])\r\n\r\n  return <input {...rest} onKeyDown={handleOnKeyDown} ref={input} />\r\n}\r\n\r\nValidatableInput.defaultProps = {\r\n  validationFeedbackDelay: 2000,\r\n  validationClassname: 'is-success',\r\n}\r\n\r\nexport default ValidatableInput\r\n","import * as React from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  KeyboardEvent,\r\n  FunctionComponent,\r\n  useCallback,\r\n  useState,\r\n  useRef,\r\n} from 'react'\r\nimport DebugContainer from './DebugContainer'\r\nimport {\r\n  HideableProps,\r\n  PositionneableProps,\r\n  TitledProps,\r\n} from '../../../utils/interfaces'\r\nimport gameStore from '../../../store/GameStore'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { CirclePicker, ColorResult } from 'react-color'\r\nimport Spacer from '../Spacer'\r\nimport ValidatableInput from '../ValidatableInput'\r\nimport colors from '../../../utils/colors'\r\n\r\nconst MinigameDurationCol = styled.span`\r\n  width: 100px;\r\n  display: inline-block;\r\n  transition: all 0.15s;\r\n`\r\n\r\nconst GameDebugConfigPanel: FunctionComponent<\r\n  PositionneableProps & TitledProps & HideableProps\r\n> = props => {\r\n  const {\r\n    config: { fade, minigameDuration },\r\n    changeConfig,\r\n  } = gameStore\r\n\r\n  const handleFadeChange = useCallback(\r\n    () => {\r\n      changeConfig({\r\n        fade: !fade,\r\n      })\r\n    },\r\n    [fade]\r\n  )\r\n\r\n  const handleFadeColorChange = useCallback((color: ColorResult) => {\r\n    changeConfig({\r\n      fadeColor: color.hex,\r\n    })\r\n  }, [])\r\n  const handleGameBackgroundColorChange = useCallback((color: ColorResult) => {\r\n    changeConfig({\r\n      backgroundColor: { ...color.rgb, a: 1 },\r\n    })\r\n  }, [])\r\n\r\n  const handleOnValidate = useCallback(\r\n    (duration: string) => {\r\n      changeConfig({\r\n        minigameDuration: Number(duration),\r\n      })\r\n    },\r\n    [minigameDuration]\r\n  )\r\n\r\n  return (\r\n    <DebugContainer {...props}>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          className=\"checkbox\"\r\n          checked={fade}\r\n          onChange={handleFadeChange}\r\n        />\r\n        <span>Fade?</span>\r\n      </label>\r\n      {fade && (\r\n        <>\r\n          <Spacer />\r\n          <p>Fade color</p>\r\n          <Spacer size=\"small\" />\r\n          <CirclePicker\r\n            colors={colors}\r\n            onChangeComplete={handleFadeColorChange}\r\n          />\r\n        </>\r\n      )}\r\n      <Spacer />\r\n      <p>Game background color</p>\r\n      <Spacer size=\"small\" />\r\n      <CirclePicker\r\n        colors={colors}\r\n        onChangeComplete={handleGameBackgroundColorChange}\r\n      />\r\n      <Spacer />\r\n      <p>\r\n        Minigame duration :\r\n        <MinigameDurationCol>\r\n          <ValidatableInput\r\n            defaultValue={String(minigameDuration)}\r\n            onValidate={handleOnValidate}\r\n            className=\"input\"\r\n            type=\"number\"\r\n            max={700}\r\n            min={200}\r\n          />\r\n        </MinigameDurationCol>\r\n      </p>\r\n    </DebugContainer>\r\n  )\r\n}\r\n\r\nexport default observer(GameDebugConfigPanel)\r\n","import * as React from 'react'\r\nimport GameDebugStateList from './ui/debug/GameDebugStateList'\r\nimport { FunctionComponent } from 'react'\r\nimport GameDebugConfigPanel from './ui/debug/GameDebugConfigPanel'\r\nimport { HideableProps } from '../utils/interfaces'\r\n\r\nconst GameDebug: FunctionComponent<HideableProps> = props => {\r\n  const { hide } = props\r\n\r\n  return (\r\n    <div\r\n      style={{ display: hide ? 'block' : 'none' }}\r\n      className=\"game-debug game-ui\"\r\n    >\r\n      <h1>Debug interface</h1>\r\n      <GameDebugConfigPanel title=\"Game config\" x={10} y={180} />\r\n      <GameDebugStateList title=\"Game state\" x={10} y={10} />\r\n    </div>\r\n  )\r\n}\r\n\r\nGameDebug.defaultProps = {\r\n  hide: false,\r\n}\r\n\r\nexport default GameDebug\r\n","import React, {FunctionComponent, MouseEventHandler, ReactNode} from 'react'\nimport {observer} from \"mobx-react-lite\";\nimport gameDebugStore from \"../../../store/GameDebugStore\";\nimport {ForceThemeProps, PositionneableProps} from \"../../../utils/interfaces\";\nimport {useClassTheme} from \"../../../utils/hooks\";\nimport Draggable from \"react-draggable\";\nimport {GameDebugTheme} from \"../../../utils/enums\";\n\ntype RenderProps = (theme: GameDebugTheme) => ReactNode\n\ninterface Props {\n  children?: RenderProps | ReactNode | string\n  className?: string\n  onClick?: MouseEventHandler<HTMLButtonElement>\n}\n\nconst DebugButton: FunctionComponent<\n  Props & ForceThemeProps & PositionneableProps\n> = props => {\n  const {\n    onClick,\n    children,\n    className,\n    forceTheme,\n    x,\n    y,\n    zIndex,\n    draggable,\n  } = props\n  const classNames = ['debug-button', 'game-debug-toggle-button']\n  const { theme } = gameDebugStore\n\n  if (className) {\n    classNames.push(...className.split(' '))\n  }\n\n  const themeClass = useClassTheme(forceTheme)\n  if (themeClass) {\n    classNames.push(themeClass)\n  }\n\n  const render = children\n    ? typeof children === 'function'\n      ? (children as RenderProps)(theme)\n      : children\n    : null\n\n  const button = (\n    <button\n      {...(onClick ? { onClick } : {})}\n      style={{\n        left: x,\n        top: y,\n        zIndex,\n        ...(x || y ? { position: 'fixed' } : {}),\n      }}\n      className={classNames.join(' ')}\n    >\n      {render}\n    </button>\n  )\n\n  if (draggable !== undefined && draggable) {\n    return <Draggable>{button}</Draggable>\n  }\n\n  return button\n}\n\nDebugButton.defaultProps = {\n  draggable: false,\n}\n\nexport default observer(DebugButton)\n","import * as React from 'react'\nimport { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport { useKeyboardShortcuts } from '../../../utils/hooks'\nimport { Key } from 'ts-key-enum'\nimport gameDebugStore from '../../../store/GameDebugStore'\nimport DebugButton from './DebugButton'\nimport { GameDebugTheme } from '../../../utils/enums'\n\nconst GameDebugToggleButton: FunctionComponent = () => {\n  const { debug, toggleDebug, hideDebug } = gameDebugStore\n\n  useKeyboardShortcuts([\n    {\n      keys: [Key.Escape],\n      action: hideDebug,\n    },\n    {\n      keys: ['D'],\n      action: toggleDebug,\n    },\n  ])\n\n  return (\n    <DebugButton onClick={toggleDebug} forceTheme={GameDebugTheme.Light}>\n      {debug ? <i className=\"icon close\" /> : <i className=\"icon debug\" />}\n    </DebugButton>\n  )\n}\n\nexport default observer(GameDebugToggleButton)\n","import * as React from 'react'\nimport { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport gameDebugStore from '../../../store/GameDebugStore'\nimport DebugButton from './DebugButton'\n\nconst GameDebugToggleThemeButton: FunctionComponent = () => {\n  const { toggleTheme, otherThemeName } = gameDebugStore\n\n  return <DebugButton onClick={toggleTheme}>{otherThemeName[0]}</DebugButton>\n}\n\nexport default observer(GameDebugToggleThemeButton)\n","import React, {FunctionComponent} from 'react'\nimport styled from 'styled-components'\n\ninterface Props {\n  color?: string,\n  size?: \"small\" | \"medium\" | \"large\"\n}\n\nconst Div = styled.div`\n  display: flex;\n  -webkit-font-smoothing: antialiased;\n  justify-content: space-evenly;\n  width: 40px;\n  height: 40px;\n  transform: ${props => {\n    switch (props.size) {\n      case \"small\":\n        return 'scale(0.6)'\n      case \"medium\":\n        return 'scale(0.7)'\n      case \"large\":\n        return 'scale(0.8)'\n    }\n    return 'scale(0.8)'\n    }\n  };\n  & .bar {\n    position: relative;\n    width: ${(props: Props) => {\n      switch (props.size) {\n        case \"small\":\n          return '4px'\n        case \"medium\":\n          return '8px'\n        case \"large\":\n          return '12px'\n      }\n      \n      return '8px'\n}};\n    height: 100%;\n    background: ${props => props.color};\n    &:first-of-type {\n      margin-right: 0.6rem;\n    }\n  }\n`\n\nconst PauseIcon: FunctionComponent<Props> = (props) => {\n  const { color } = props\n\n  return (\n    <Div {...props} className=\"pause-icon\" style={{ color }}>\n      <div className=\"bar\"/>\n      <div className=\"bar\"/>\n    </Div>\n  )\n}\n\nPauseIcon.defaultProps = {\n  color: 'white',\n  size: \"large\"\n}\n\nexport default PauseIcon\n","import React, {FunctionComponent} from 'react'\nimport styled from 'styled-components'\n\ninterface Props {\n  color?: string,\n  size?: \"small\" | \"medium\" | \"large\"\n}\n\nconst Div = styled.div`\n  width: 40px;\n  height: 40px;\n  position: relative;\n  left: 6px;\n  border-style: solid;\n  border-width: 20px 0 20px 30px;\n  transform: ${(props: Props) => {\n    switch (props.size) {\n      case \"small\":\n        return 'scale(0.6)'\n      case \"medium\":\n        return 'scale(0.7)'\n      case \"large\":\n        return 'scale(0.8)'\n    }\n    return 'scale(1)'\n  }\n  };\n  border-color: transparent transparent transparent ${props => props.color};\n`\n\nconst PlayIcon: FunctionComponent<Props> = (props) => {\n  const { color } = props\n\n  return (\n    <Div {...props} className=\"play-icon\" style={{ color }}/>\n  )\n}\n\nPlayIcon.defaultProps = {\n  color: 'white',\n  size: \"large\"\n}\n\nexport default PlayIcon\n","import * as React from 'react';\nimport {FunctionComponent} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport DebugButton from \"./DebugButton\";\nimport PauseIcon from \"../icons/PauseIcon\";\nimport {GameDebugTheme} from \"../../../utils/enums\";\nimport gameStore from \"../../../store/GameStore\";\nimport PlayIcon from \"../icons/PlayIcon\";\nimport gameManager from \"../../../game/manager/GameManager\";\nimport {useKeyboardShortcuts} from \"../../../utils/hooks\";\n\nconst GameDebugTogglePauseButton: FunctionComponent = () => {\n  const { paused } = gameStore\n  const { togglePause } = gameManager\n\n  useKeyboardShortcuts([\n    {\n      keys: [\"P\"],\n      action: togglePause\n    }\n  ])\n\n  return (\n    <DebugButton onClick={togglePause}>\n      {theme =>\n        !paused && <PauseIcon color={theme === GameDebugTheme.Light ? \"black\" : \"white\"}/> ||\n        paused && <PlayIcon color={theme === GameDebugTheme.Light ? \"black\" : \"white\"}/>\n      }\n    </DebugButton>\n  )\n}\n\n\nexport default observer(\n  GameDebugTogglePauseButton\n)\n\n\n","import * as React from 'react'\r\nimport { FunctionComponent } from 'react'\r\nimport GameDebugToggleButton from './GameDebugToggleButton'\r\nimport GameDebugToggleThemeButton from './GameDebugToggleThemeButton'\r\nimport GameDebugTogglePauseButton from './GameDebugTogglePauseButton'\r\nimport { useKeyboardShortcuts } from '../../../utils/hooks'\r\nimport gameDebugStore from '../../../store/GameDebugStore'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nconst GameDebugButtonsToolbar: FunctionComponent = () => {\r\n  const { toggleDebugToolbar, debugToolbar } = gameDebugStore\r\n\r\n  useKeyboardShortcuts([\r\n    {\r\n      keys: ['K'],\r\n      action: toggleDebugToolbar,\r\n    },\r\n  ])\r\n\r\n  if (!debugToolbar) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-debug-buttons-toolbar\">\r\n      <GameDebugTogglePauseButton />\r\n      <GameDebugToggleThemeButton />\r\n      <GameDebugToggleButton />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(GameDebugButtonsToolbar)\r\n","import 'phaser'\r\nimport * as React from 'react'\r\nimport { useResize } from '../utils/hooks'\r\nimport GameUI from './ui/GameUI'\r\nimport GameDebug from './GameDebug'\r\nimport { FunctionComponent } from 'react'\r\nimport { observer } from 'mobx-react-lite'\r\nimport GameDebugButtonsToolbar from './ui/debug/GameDebugButtonsToolbar'\r\nimport gameDebugStore from '../store/GameDebugStore'\r\nimport gameManager from '../game/manager/GameManager'\r\nimport gameStore from '../store/GameStore'\r\n\r\nconst Game: FunctionComponent = () => {\r\n  const { width, height } = useResize()\r\n  const { debug } = gameDebugStore\r\n  const { paused } = gameStore\r\n\r\n  if (gameManager.game.canvas) {\r\n    gameManager.game.canvas.style.transition = 'all 0.15s'\r\n    gameManager.game.resize(width, height)\r\n    gameManager.game.canvas.style.filter = paused\r\n      ? 'blur(20px) grayscale(80%)'\r\n      : null\r\n    gameManager.game.canvas.style.transform = paused ? 'scale(1.2)' : null\r\n  }\r\n\r\n  return (\r\n    <div id=\"game\" className=\"game\">\r\n      <GameDebugButtonsToolbar />\r\n      <GameDebug hide={debug} />\r\n      <GameUI />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(Game)\r\n","import * as React from 'react'\nimport { FunctionComponent } from 'react'\nimport Game from './components/Game'\n\nconst App: FunctionComponent = () => {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  )\n}\n\nexport default App\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.')\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.')\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport App from './App'\nimport 'gsap/CSSPlugin'\nimport './assets/styles/app.scss'\nimport registerServiceWorker from './registerServiceWorker'\nimport './utils/extensions'\n\nReactDOM.render(<App />, document.getElementById('root') as HTMLElement)\nregisterServiceWorker()\n","module.exports = __webpack_public_path__ + \"static/media/life_1_285_270.4dfc78f2.png\";","module.exports = __webpack_public_path__ + \"static/media/life_2_285_270.26bad4f0.png\";","module.exports = __webpack_public_path__ + \"static/media/life_3_285_270.3365a732.png\";"],"sourceRoot":""}