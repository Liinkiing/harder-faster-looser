{"version":3,"sources":["utils/enums.ts","store/GameDebugStore.ts","utils/hooks.ts","store/GameStore.ts","components/ui/HomescreenUI.tsx","components/ui/SplashscreenUI.tsx","components/ui/MinigameUI.tsx","components/ui/PostMinigameUI.tsx","components/ui/DeathscreenUI.tsx","utils/constants.ts","game/scenes/BaseScene.ts","game/scenes/BootScene.ts","game/scenes/SplashscreenScene.ts","game/scenes/HomescreenScene.ts","game/objects/Spam.ts","utils/extensions.ts","utils/functions.ts","game/scenes/action/SpamGameScene.ts","game/scenes/action/ActionSecondGameScene.ts","game/scenes/action/ActionThirdGameScene.ts","game/scenes/waiting/ElevatorFirstGameScene.ts","game/scenes/waiting/ElevatorSecondGameScene.ts","game/scenes/PostMinigameScene.ts","game/scenes/DeathscreenScene.ts","utils/game.ts","utils/anims.ts","game/manager/GameManager.ts","components/ui/Transition.tsx","components/ui/GameUI.tsx","components/ui/debug/DebugContainer.tsx","components/ui/debug/GameDebugStateList.tsx","components/GameDebug.tsx","components/ui/debug/DebugButton.tsx","components/ui/debug/GameDebugToggleButton.tsx","components/ui/debug/GameDebugToggleThemeButton.tsx","components/ui/icons/PauseIcon.tsx","components/ui/icons/PlayIcon.tsx","components/ui/debug/GameDebugTogglePauseButton.tsx","components/ui/debug/GameDebugButtonsToolbar.tsx","components/Game.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["GameCategory","GameState","BaseEvents","GameEvents","GameDebugTheme","gameDebugStore","this","theme","Dark","toUpperCase","Light","observable","action","_this","debug","_this2","newTheme","_this3","_this4","computed","useKeyboardShortcuts","shortcuts","listener","e","forEach","shortcut","keys","some","key","toLowerCase","useEffect","window","addEventListener","removeEventListener","useClassTheme","forceTheme","isDarkTheme","gameStore","Splashscreen","volume","newState","state","difficulity","innerWidth","ratioResolution","transitionning","paused","_this5","_this6","_this7","_this8","_this9","HomescreenUI","react_default","a","createElement","className","SplashscreenUI","MinigameUI","PostMinigameUI","DeathscreenUI","scenesKeys","Boot","Homescreen","SpamGame","ActionSecondGame","ActionThirdGame","ElevatorFirstGame","ElevatorSecondGame","PostMinigameScene","Deathscreen","BaseScene","_categoriesProbabilit","Object","defineProperty","Action","Waiting","console","log","concat","scene","game","dump","Emitter","emit","SceneCreated","time","delta","Phaser","Scene","BootScene","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","esm_get","prototype","gameManager","loadMinigame","SplashscreenScene","graphics","add","fillStyle","fillRect","text","HomescreenScene","Spam","params","x","y","children","createSpamContent","spamTexture","sprite","setOrigin","setScale","setInteractive","createCloseIcon","spamContent","width","close","on","SpamDestroyed","assertThisInitialized","destroy","setTexture","innerHeight","height","closeIcon","existing","GameObjects","Container","List","_Array","items","_getPrototypeOf2","length","apply","toConsumableArray","inherits","createClass","value","Math","floor","random","searchedValue","undefined","find","item","indexToRemove","indexOf","splice","wrapNativeSuper","Array","randomRange","min","max","promiseAnimation","animation","Promise","resolve","eventCallback","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","stop","SpamGameScene","spams","load","pack","image","spam","remove","input","setGlobalTopOnly","availablesSpam","addEvent","delay","loop","callback","push","ActionSecondGameScene","ActionThirdGameScene","ElevatorFirstGameScene","ElevatorSecondGameScene","DeathscreenScene","gameConfig","antialias","backgroundColor","gamepad","keyboard","mouse","touch","physics","arcade","gravity","default","title","version","zoom","parent","type","AUTO","pixelArt","appear","$el","duration","arguments","TweenLite","to","opacity","disappear","EventEmitter","GameManager","Game","loadSplashscreen","startScene","changeState","loadHomescreen","_callee2","_context2","_ref3","_callee3","minigameKey","_context3","Minigame","_x","loadDeathscreen","_callee4","_context4","_ref5","_callee5","optionnalData","_context5","event","removeAllListeners","gameFader","startTransitionning","scenes","filter","start","stopTransitionning","resume","_x2","_x3","pause","activeScene","togglePause","Div","styled","div","_templateObject","props","color","Transition","fader","React","createRef","defaultProps","current","ref","observer","gameUI","useRef","UIComponent","ui_SplashscreenUI","ui_HomescreenUI","ui_MinigameUI","PostMinigame","ui_PostMinigameUI","ui_DeathscreenUI","ui_Transition","DebugContainer","center","rounded","zIndex","draggable","disabled","isDraggable","classNames","themeClass","section","join","style","left","top","position","react_draggable_default","availableStates","map","gameState","handleInputChange","target","react","debug_DebugContainer","availableState","id","name","checked","onChange","GameDebug","visible","display","debug_GameDebugStateList","DebugButton","onClick","split","render","button","assign","objectSpread","showDebug","hideDebug","Key","Escape","debug_DebugButton","toggleTheme","otherThemeName","PauseIcon_templateObject","size","PauseIcon","PauseIcon_Div","PlayIcon_templateObject","PlayIcon","PlayIcon_Div","icons_PauseIcon","icons_PlayIcon","GameDebugButtonsToolbar","debug_GameDebugTogglePauseButton","debug_GameDebugToggleThemeButton","debug_GameDebugToggleButton","_useResize","_useState","useState","_useState2","slicedToArray","setSize","useResize","canvas","transition","transform","debug_GameDebugButtonsToolbar","components_GameDebug","ui_GameUI","App","components_Game","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","src_App","document","getElementById","URL","process","toString","origin","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.fe92c8e4.chunk.js","sourcesContent":["export enum GameCategory {\n  Action = 'ACTION',\n  Waiting = 'WAITING',\n}\n\nexport enum GameState {\n  Splashscreen = 'SPLASHSCREEN',\n  Homescreen = 'HOMESCREEN',\n  Minigame = 'MINIGAME',\n  PostMinigame = 'POSTMINIGAME',\n  Deathscreen = 'DEATHSCREEN',\n}\n\nexport enum BaseEvents {\n  SceneCreated = 'SCENE_CREATED'\n}\n\nexport enum GameEvents {\n  SpamDestroyed = 'SPAM_DESTROYED'\n}\n\nexport enum GameDebugTheme {\n  Light = \"LIGHT\",\n  Dark = \"DARK\"\n}\n","import {action, computed, observable} from \"mobx\";\nimport {GameDebugTheme} from \"../utils/enums\";\n\nclass GameDebugStore {\n  @observable public debug: boolean = false\n  @observable public theme: GameDebugTheme = GameDebugTheme.Dark\n\n  @action public showDebug = (): void => {\n    this.debug = true\n  }\n\n  @action public hideDebug = (): void => {\n    this.debug = false\n  }\n\n  @action public setTheme = (newTheme: GameDebugTheme): void => {\n    this.theme = newTheme\n  }\n\n  @action public toggleTheme = (): void => {\n    this.theme =\n      this.theme === GameDebugTheme.Dark\n        ? GameDebugTheme.Light\n        : GameDebugTheme.Dark\n  }\n\n  @computed get isDarkTheme(): boolean {\n    return this.theme === GameDebugTheme.Dark\n  }\n\n  @computed get shortThemeName(): string {\n    return this.theme[0].toUpperCase()\n  }\n\n  @computed get otherThemeName(): string {\n    return this.theme === GameDebugTheme.Dark\n      ? GameDebugTheme.Light\n      : GameDebugTheme.Dark\n  }\n}\n\nconst gameDebugStore = new GameDebugStore()\nexport default gameDebugStore\n","import {useEffect, useState} from 'react'\nimport gameDebugStore from \"../store/GameDebugStore\";\nimport {GameDebugTheme} from \"./enums\";\nimport {KeyboardShortcut} from \"./interfaces\";\n\nexport const useResize = (): { width: number; height: number } => {\n  const [size, setSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  })\n\n  useEffect(\n    () => {\n      const listener = () =>\n        setSize({\n          width: window.innerWidth,\n          height: window.innerHeight,\n        })\n      window.addEventListener('resize', listener)\n\n      return () => {\n        window.removeEventListener('resize', listener)\n      }\n    },\n    [window.innerWidth, window.innerHeight]\n  )\n\n  return size\n}\n\nexport const useKeyboardInput = (listener: (e: KeyboardEvent) => void) => {\n  useEffect(() => {\n    window.addEventListener('keydown', listener)\n\n    return () => {\n      window.removeEventListener('keydown', listener)\n    }\n  }, [])\n}\n\nexport const useKeyboardShortcuts = (shortcuts: KeyboardShortcut[]) => {\n  useKeyboardInput(e => {\n    shortcuts.forEach(shortcut => {\n      if(shortcut.keys.some(key => key.toLowerCase() === e.key.toLowerCase())) {\n        shortcut.action()\n      }\n    })\n  })\n}\n\nexport const useClassTheme = (forceTheme?: GameDebugTheme): string | null => {\n  const { isDarkTheme } = gameDebugStore\n\n  if (!forceTheme && isDarkTheme) {\n    return 'is-dark'\n  }\n\n  if (!isDarkTheme && forceTheme && forceTheme === GameDebugTheme.Dark) {\n    return 'is-dark'\n  } else if (isDarkTheme && forceTheme && forceTheme === GameDebugTheme.Dark) {\n    return 'is-dark'\n  } else if (forceTheme && forceTheme === GameDebugTheme.Light) {\n    return null\n  }\n\n  return null\n}\n","import { action, observable } from 'mobx'\nimport { GameState } from '../utils/enums'\nimport { GameSettings } from '../utils/interfaces'\n\nclass GameStore {\n  @observable public state: GameState = GameState.Splashscreen\n  @observable public difficulity: number = 1\n  @observable public paused: boolean = false\n  @observable public settings: GameSettings = { volume: 1 }\n  @observable public ratioResolution: number = 3\n  @observable public transitionning: boolean = false\n\n  @action public changeState = (newState: GameState): void => {\n    this.state = newState\n  }\n\n  @action public increaseDifficulty = (): void => {\n    this.difficulity++\n  }\n\n  @action public changeRatioResolution = (innerWidth: number): void => {\n    this.ratioResolution = 2\n  }\n\n  @action public togglePause = (): void => {\n    if (this.transitionning) {\n      return;\n    }\n    this.paused = !this.paused\n  }\n\n  @action public pause = (): void => {\n    if (this.transitionning) {\n      return;\n    }\n    this.paused = true\n  }\n\n  @action public resume = (): void => {\n    if (this.transitionning) {\n      return;\n    }\n    this.paused = false\n  }\n\n  @action public startTransitionning = (): void => {\n    this.transitionning = true\n  }\n\n  @action public stopTransitionning = (): void => {\n    this.transitionning = false\n  }\n\n  @action public toggleTransition = (): void => {\n    this.transitionning = !this.transitionning\n  }\n\n\n}\n\nconst gameStore = new GameStore()\nexport default gameStore\n","import React, { FunctionComponent } from 'react'\n\nconst HomescreenUI: FunctionComponent = () => {\n  return (\n    <div className=\"homescreen-ui\">\n      <h1>Je suis l'ui du homescreen</h1>\n    </div>\n  )\n}\n\nexport default HomescreenUI\n","import React, { FunctionComponent } from 'react'\n\nconst SplashscreenUI: FunctionComponent = () => {\n  return (\n    <div className=\"splashscreen-ui\">\n      <h1>Je suis l'ui du splashscreen</h1>\n    </div>\n  )\n}\n\nexport default SplashscreenUI\n","import React, { FunctionComponent } from 'react'\n\nconst MinigameUI: FunctionComponent = () => {\n  return (\n    <div className=\"minigame-ui\">\n      <h1>Je suis l'ui du mini jeu</h1>\n    </div>\n  )\n}\n\nexport default MinigameUI\n","import React, { FunctionComponent } from 'react'\n\nconst PostMinigameUI: FunctionComponent = () => {\n  return (\n    <div className=\"post-minigame-ui\">\n      <h1>Je suis l'ui du postmini game</h1>\n    </div>\n  )\n}\n\nexport default PostMinigameUI\n","import React, { FunctionComponent } from 'react'\n\nconst DeathscreenUI: FunctionComponent = () => {\n  return (\n    <div className=\"deathscreen-ui\">\n      <h1>Je suis l'ui du deathscreen</h1>\n    </div>\n  )\n}\n\nexport default DeathscreenUI\n","import { GameCategory } from './enums'\n\nexport const scenesKeys = {\n  Boot: 'BOOT_SCENE',\n  Splashscreen: 'SPLASHSCREEN_SCENE',\n  Homescreen: 'HOMESCREEN_SCENE',\n\n  SpamGame: 'SPAM_GAME_SCENE',\n  ActionSecondGame: 'ACTION_SECOND_GAME_SCENE',\n  ActionThirdGame: 'ACTION_THIRD_GAME_SCENE',\n\n  ElevatorFirstGame: 'ELEVATOR_FIRST_GAME',\n  ElevatorSecondGame: 'ELEVATOR_SECOND_GAME_SCENE',\n\n  PostMinigameScene: 'POST_MINIGAME_SCENE',\n\n  Deathscreen: 'DEATHSCREEN_SCENE',\n}\n\nexport const categoriesProbability = {\n  [GameCategory.Action]: 0.9,\n  [GameCategory.Waiting]: 0.1,\n}\n","import {Emitter} from \"../manager/GameManager\";\nimport {BaseEvents} from \"../../utils/enums\";\n\nexport default class BaseScene extends Phaser.Scene {\n  public init(): void {\n    console.log(`init (${this.scene.key})`)\n    this.game.scene.dump()\n  }\n\n  public preload(): void {\n    console.log(`preload (${this.scene.key})`)\n  }\n\n  public create(): void {\n    console.log(`create (${this.scene.key})`)\n    Emitter.emit(BaseEvents.SceneCreated, this)\n  }\n\n  public update(time: number, delta: number): void {\n    console.log(`update (${this.scene.key})`)\n  }\n}\n","import { scenesKeys } from '../../utils/constants'\nimport gameManager from '../manager/GameManager'\nimport BaseScene from './BaseScene'\n\nexport default class BootScene extends BaseScene {\n  constructor() {\n    super({\n      key: scenesKeys.Boot,\n    })\n  }\n\n  public create(): void {\n    super.create()\n    gameManager.loadMinigame(scenesKeys.SpamGame)\n  }\n}\n","import {scenesKeys} from \"../../utils/constants\";\nimport BaseScene from \"./BaseScene\";\nimport {wait} from \"../../utils/functions\";\nimport gameManager from \"../manager/GameManager\";\n\nexport default class SplashscreenScene extends BaseScene {\n\n  constructor() {\n    super({\n      key: scenesKeys.Splashscreen\n    });\n  }\n\n  public create(): void {\n    super.create()\n    console.log(`create (${this.scene.key})`)\n    const graphics = this.add.graphics()\n    graphics.fillStyle(0xff3300, 1)\n    graphics.fillRect(100,200,600,300)\n    graphics.fillRect(100,100,100,100)\n    this.add.text(120,110,this.scene.key)\n  }\n\n  public update(time: number, delta: number): void {\n  }\n\n}\n","import { scenesKeys } from '../../utils/constants'\nimport BaseScene from './BaseScene'\n\nexport default class HomescreenScene extends BaseScene {\n  constructor() {\n    super({\n      key: scenesKeys.Homescreen,\n    })\n  }\n\n  public create(): void {\n    super.create()\n    const graphics = this.add.graphics()\n    graphics.fillStyle(0xff9933, 1)\n    graphics.fillRect(100, 200, 600, 300)\n    graphics.fillRect(200, 100, 100, 100)\n    this.add.text(220, 110, this.scene.key)\n  }\n\n  public update(time: number, delta: number): void {}\n}\n","import {ContainerConstructor} from \"../../utils/interfaces\";\nimport gameStore from '../../store/GameStore';\nimport {Emitter} from \"../manager/GameManager\";\nimport {GameEvents} from \"../../utils/enums\";\n\nexport default class Spam extends Phaser.GameObjects.Container  {\n\n  private readonly spamContent?: Phaser.GameObjects.Sprite\n  private readonly closeIcon?: Phaser.GameObjects.Sprite\n\n  constructor(params: ContainerConstructor) {\n    super(params.scene, params.x, params.y, params.children)\n\n    if (this.x > (window.innerWidth - this.width/gameStore.ratioResolution)) {\n      this.x = this.x - this.width/gameStore.ratioResolution\n    }\n\n    if (this.y > (window.innerHeight - this.height/gameStore.ratioResolution)) {\n      this.y = this.y - this.height/gameStore.ratioResolution\n    }\n\n    this.spamContent = this.createSpamContent(params.spamTexture)\n    this.add(this.spamContent)\n\n    this.closeIcon = this.createCloseIcon()\n    this.add(this.closeIcon)\n\n    params.scene.add.existing(this);\n  }\n\n  private createSpamContent = (spamTexture: string): Phaser.GameObjects.Sprite => {\n    const sprite = this.scene.add.sprite(0,0, spamTexture).setOrigin(0,0)\n\n    sprite.setScale(1/gameStore.ratioResolution, 1/gameStore.ratioResolution)\n\n    sprite.setInteractive()\n\n    return sprite\n  }\n\n  private createCloseIcon = (): Phaser.GameObjects.Sprite => {\n    const x = this.spamContent!.width / gameStore.ratioResolution;\n    const close = this.scene.add.sprite(x , 0, 'close').setOrigin(1,0).setScale(1/gameStore.ratioResolution, 1/gameStore.ratioResolution)\n    close.setInteractive()\n    close.on('pointerdown', () => {\n      Emitter.emit(GameEvents.SpamDestroyed, this)\n      console.log('EMITED ' + GameEvents.SpamDestroyed)\n      this.destroy(true)\n    })\n    close.on('pointerover', () => {\n      close.setTexture('close_active')\n    })\n    close.on('pointerout', () => {\n      close.setTexture('close')\n    })\n    return close\n  }\n\n}\n","export class List<T> extends Array<T> {\n  constructor(items?: T[]) {\n    if (items && items.length > 0) {\n      super(...items)\n    } else {\n      super(0)\n    }\n  }\n\n  public random(): T {\n    return this[Math.floor(Math.random() * this.length)]\n  }\n\n  public has(searchedValue: T): boolean {\n    return this.find(item => item === searchedValue) !== undefined\n  }\n\n  public remove(searchedValue: T): number {\n    const indexToRemove = this.indexOf(searchedValue)\n    this.splice(indexToRemove, 1)\n\n    return this.length\n  }\n\n  public clear(): void {\n    this.length = 0\n  }\n\n  public first(): T {\n    return this[0]\n  }\n\n  public last(): T {\n    return this[this.length - 1]\n  }\n}\n","import {TweenLite} from \"gsap\";\n\nexport const wait = (ms: number): Promise<TimerHandler> =>\n  new Promise(resolve => setTimeout(resolve, ms))\n\nexport const randomRange = (min: number, max: number): number => {\n  return Math.random() * (max - min) + min\n}\n\nexport const promiseAnimation = (animation: TweenLite | gsap.Animation) => {\n  return new Promise(resolve =>\n    animation\n      .eventCallback('onComplete', async () => {\n        resolve()\n      })\n  )\n}\n","import {scenesKeys} from \"../../../utils/constants\";\nimport BaseScene from \"../BaseScene\";\nimport Spam from \"../../objects/Spam\";\nimport {List} from \"../../../utils/extensions\";\nimport {randomRange} from \"../../../utils/functions\";\nimport {GameEvents} from \"../../../utils/enums\";\nimport {Emitter} from \"../../manager/GameManager\";\n\nexport default class SpamGameScene extends BaseScene {\n\n  public spams: List<Spam> = new List<Spam>()\n\n  constructor() {\n    super({\n      key: scenesKeys.SpamGame\n    });\n  }\n\n  public preload(): void {\n    this.load.pack(\n      'preload',\n      '/assets/sprites/spam-game/pack.json',\n      'preload'\n    )\n    this.load.image('close', '/assets/sprites/spam-game/CLOSE.png')\n    this.load.image('close_active', '/assets/sprites/spam-game/CLOSE_active.png')\n  }\n\n  public create() {\n    super.create()\n    this.spams = new List<Spam>()\n    Emitter.on(GameEvents.SpamDestroyed, (spam: Spam) => {\n      this.spams.remove(spam)\n    })\n    this.input.setGlobalTopOnly(true)\n    const availablesSpam = new List<string>([\"sp_1\", \"sp_2\", \"sp_3\", \"sp_4_1\", \"sp_5_1\", \"sp_6_1\"])\n    this.scene.scene.time.addEvent({\n      delay: 1000,\n      loop: true,\n      callback: () => {\n        this.spams.push(\n          new Spam({\n            scene: this,\n            x: randomRange(0, window.innerWidth),\n            y: randomRange(0, window.innerHeight),\n            spamTexture: availablesSpam.random()\n          })\n        )\n      }\n    })\n  }\n\n  public update(time: number, delta: number): void {\n  }\n\n\n}\n","import { scenesKeys } from '../../../utils/constants'\nimport BaseScene from '../BaseScene'\n\nexport default class ActionSecondGameScene extends BaseScene {\n  constructor() {\n    super({\n      key: scenesKeys.ActionSecondGame,\n    })\n  }\n}\n","import { scenesKeys } from '../../../utils/constants'\nimport BaseScene from '../BaseScene'\n\nexport default class ActionThirdGameScene extends BaseScene {\n  constructor() {\n    super({\n      key: scenesKeys.ActionThirdGame,\n    })\n  }\n}\n","import { scenesKeys } from '../../../utils/constants'\nimport BaseScene from '../BaseScene'\n\nexport default class ElevatorFirstGameScene extends BaseScene {\n  constructor() {\n    super({\n      key: scenesKeys.ElevatorFirstGame,\n    })\n  }\n}\n","import { scenesKeys } from '../../../utils/constants'\nimport BaseScene from '../BaseScene'\n\nexport default class ElevatorSecondGameScene extends BaseScene {\n  constructor() {\n    super({\n      key: scenesKeys.ElevatorSecondGame,\n    })\n  }\n}\n","import { scenesKeys } from '../../utils/constants'\nimport BaseScene from './BaseScene'\n\nexport default class PostMinigameScene extends BaseScene {\n  constructor() {\n    super({\n      key: scenesKeys.PostMinigameScene,\n    })\n  }\n}\n","import { scenesKeys } from '../../utils/constants'\nimport BaseScene from './BaseScene'\n\nexport default class DeathscreenScene extends BaseScene {\n  constructor() {\n    super({\n      key: scenesKeys.Deathscreen,\n    })\n  }\n}\n","import {\n  SpamGameScene,\n  ActionSecondGameScene,\n  ActionThirdGameScene,\n  BootScene,\n  DeathscreenScene,\n  ElevatorFirstGameScene,\n  ElevatorSecondGameScene,\n  HomescreenScene,\n  PostMinigameScene,\n  SplashscreenScene,\n} from '../game/scenes'\n\nexport const gameConfig: GameConfig = {\n  antialias: false,\n  backgroundColor: '#000000',\n  input: {\n    gamepad: false,\n    keyboard: true,\n    mouse: true,\n    touch: true,\n  },\n  physics: {\n    arcade: {\n      debug: true,\n      gravity: { y: 300 },\n    },\n    default: 'arcade',\n  },\n  title: 'Harder, Faster, Looser',\n  version: '1.0',\n  width: window.innerWidth,\n  height: window.innerHeight,\n  zoom: 3,\n  parent: 'game',\n  scene: [\n    BootScene,\n    SplashscreenScene,\n    HomescreenScene,\n\n    SpamGameScene,\n    ActionSecondGameScene,\n    ActionThirdGameScene,\n\n    ElevatorFirstGameScene,\n    ElevatorSecondGameScene,\n\n    PostMinigameScene,\n    DeathscreenScene,\n  ],\n  type: Phaser.AUTO,\n  pixelArt: true,\n}\n","import {TweenLite} from 'gsap'\nimport {promiseAnimation} from \"./functions\";\n\nexport const appear = ($el: Element, duration: number = 1, delay: number = 0) => {\n  return promiseAnimation(\n    TweenLite\n      .to($el, duration, {\n        opacity: 1,\n      })\n      .delay(delay)\n  )\n}\n\nexport const disappear = ($el: Element, duration: number = 1, delay: number = 0) => {\n  return promiseAnimation(\n    TweenLite\n      .to($el, duration, {\n        opacity: 0,\n      })\n      .delay(delay)\n  )\n}\n\n","import { gameConfig } from '../../utils/game'\nimport gameStore from '../../store/GameStore'\nimport { BaseEvents, GameEvents, GameState } from '../../utils/enums'\nimport { scenesKeys } from '../../utils/constants'\nimport { EventEmitter } from 'events'\nimport { appear, disappear } from '../../utils/anims'\n\nexport const Emitter = new EventEmitter()\n\nclass GameManager {\n  public game: Phaser.Game = new Phaser.Game(gameConfig)\n  public activeScene?: Phaser.Scene\n  public gameUI?: HTMLDivElement\n  public gameFader?: HTMLDivElement\n\n  constructor() {\n    Emitter.on(BaseEvents.SceneCreated, (scene: Phaser.Scene) => {\n      this.activeScene = scene\n    })\n  }\n\n  public loadSplashscreen = async () => {\n    await this.startScene(scenesKeys.Splashscreen)\n    gameStore.changeState(GameState.Splashscreen)\n  }\n\n  public loadHomescreen = async () => {\n    await this.startScene(scenesKeys.Homescreen)\n    gameStore.changeState(GameState.Homescreen)\n  }\n\n  public loadMinigame = async (minigameKey: string) => {\n    await this.startScene(minigameKey)\n    gameStore.changeState(GameState.Minigame)\n  }\n\n  public loadDeathscreen = async () => {\n    await this.startScene(scenesKeys.Deathscreen)\n    gameStore.changeState(GameState.Deathscreen)\n  }\n\n  public startScene = async (key: string, optionnalData?: any) => {\n    Object.keys(GameEvents).forEach(event => {\n      Emitter.removeAllListeners(GameEvents[event])\n    })\n    console.log('STARTED ' + key)\n    if (this.gameFader) {\n      gameStore.startTransitionning()\n      await appear(this.gameFader)\n      this.game.scene.scenes\n        .filter(scene => scene.scene.key !== key)\n        .forEach(scene => scene.scene.stop(scene.scene.key))\n      this.game.scene.start(key, optionnalData)\n      gameStore.changeState(key as GameState)\n      await disappear(this.gameFader)\n      gameStore.stopTransitionning()\n      gameStore.resume()\n    } else {\n      this.game.scene.start(key, optionnalData)\n      gameStore.resume()\n      gameStore.changeState(key as GameState)\n    }\n  }\n\n  public pause = (): void => {\n    this.activeScene!.scene.pause()\n    gameStore.pause()\n  }\n\n  public resume = (): void => {\n    this.activeScene!.scene.resume()\n    gameStore.resume()\n  }\n\n  public togglePause = (): void => {\n    if (gameStore.paused) {\n      this.activeScene!.scene.resume()\n    } else {\n      this.activeScene!.scene.pause()\n    }\n\n    console.log('TOGGLE PAUSE')\n    gameStore.togglePause()\n  }\n}\n\nconst gameManager = new GameManager()\nexport default gameManager\n","import React, {FunctionComponent, useEffect} from 'react'\nimport styled from 'styled-components'\nimport {observer} from \"mobx-react-lite\";\nimport gameManager from \"../../game/manager/GameManager\";\n\ninterface Props {\n  color?: string\n}\n\nconst Div = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  opacity: 0;\n  &::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: ${props => props.color};\n  }  \n`\n\nconst Transition: FunctionComponent<Props> = (props) => {\n  const fader = React.createRef<HTMLDivElement>()\n  const color = props.color !== undefined ? props.color : Transition.defaultProps!.color\n  useEffect(() => {\n    if (fader.current) {\n      gameManager.gameFader = fader.current\n    }\n  }, [])\n\n  return (\n      <Div color={color} ref={fader} className=\"transition-fade\"/>\n  )\n}\n\nTransition.defaultProps = {\n  color: \"black\"\n}\n\nexport default observer(\n  Transition\n)\n","import React, {FunctionComponent, useEffect, useRef} from 'react'\nimport {observer} from \"mobx-react-lite\";\nimport gameStore from \"../../store/GameStore\";\nimport {GameState} from \"../../utils/enums\";\nimport HomescreenUI from \"./HomescreenUI\";\nimport SplashscreenUI from \"./SplashscreenUI\";\nimport MinigameUI from \"./MinigameUI\";\nimport PostMinigameUI from \"./PostMinigameUI\";\nimport DeathscreenUI from \"./DeathscreenUI\";\nimport Transition from \"./Transition\";\nimport gameManager from \"../../game/manager/GameManager\";\n\nconst GameUI: FunctionComponent = () => {\n  const {state} = gameStore\n  const gameUI = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    if(gameUI.current) {\n      gameManager.gameUI = gameUI.current\n    }\n  }, [])\n\n  let UIComponent = <SplashscreenUI />\n\n  switch (state) {\n    case GameState.Splashscreen:\n      UIComponent = <SplashscreenUI />\n      break\n    case GameState.Homescreen:\n      UIComponent = <HomescreenUI />\n      break\n    case GameState.Minigame:\n      UIComponent = <MinigameUI />\n      break\n    case GameState.PostMinigame:\n      UIComponent = <PostMinigameUI />\n      break\n    case GameState.Deathscreen:\n      UIComponent = <DeathscreenUI />\n      break\n  }\n\n  return <div ref={gameUI} className=\"game-ui\">\n      <Transition/>\n      {UIComponent}\n    </div>\n\n}\n\nexport default observer(GameUI)\n","import React, { FunctionComponent, ReactNode } from 'react'\nimport Draggable from 'react-draggable'\nimport { observer } from 'mobx-react-lite'\nimport { ForceThemeProps, PositionneableProps } from '../../../utils/interfaces'\nimport { useClassTheme } from '../../../utils/hooks'\n\ninterface Props {\n  children?: ReactNode | string\n  disabled?: boolean,\n  center?: boolean\n  rounded?: boolean\n  title?: string\n}\n\nconst DebugContainer: FunctionComponent<Props & ForceThemeProps & PositionneableProps> = (props) => {\n  const {title, children, center, rounded, forceTheme, x, y, zIndex, draggable, disabled} = props\n  const isDraggable = draggable !== undefined ? draggable : DebugContainer.defaultProps!.draggable\n  const classNames = ['game-state-list', 'container']\n  const themeClass = useClassTheme(forceTheme)\n  if (themeClass) {\n    classNames.push(themeClass)\n  }\n\n  if(disabled) {\n    classNames.push('disabled')\n  }\n\n  if (title && title !== '') {\n    classNames.push('with-title')\n  }\n  if (center) {\n    classNames.push('is-center')\n  }\n  if (rounded) {\n    classNames.push('is-rounded')\n  }\n\n  const section = (\n    <section\n      className={classNames.join(' ')}\n      style={{ left: x, top: y, zIndex , position: 'fixed'}}\n    >\n      {title && title !== '' && <h2 className=\"title\">{title}</h2>}\n      {children}\n    </section>\n  )\n\n  if (isDraggable) {\n    return <Draggable>{section}</Draggable>\n  }\n\n  return section\n}\n\nDebugContainer.defaultProps = {\n  center: false,\n  draggable: true,\n  disabled: false,\n  rounded: false,\n}\n\nexport default observer(DebugContainer)\n","import * as React from 'react';\nimport {ChangeEvent, FunctionComponent} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport gameStore from \"../../../store/GameStore\";\nimport {GameState} from \"../../../utils/enums\";\nimport DebugContainer from \"./DebugContainer\";\nimport gameManager from \"../../../game/manager/GameManager\";\nimport {scenesKeys} from \"../../../utils/constants\";\n\nconst GameDebugStateList: FunctionComponent = () => {\n  const {state, transitionning} = gameStore\n  const availableStates = Object.keys(GameState).map(gameState => GameState[gameState])\n\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    switch (e.target.value as GameState) {\n      case GameState.Splashscreen:\n        gameManager.loadSplashscreen()\n        break;\n      case GameState.Homescreen:\n        gameManager.loadHomescreen()\n        break;\n      case GameState.Deathscreen:\n        gameManager.loadDeathscreen()\n        break;\n      case GameState.Minigame:\n        gameManager.loadMinigame(scenesKeys.SpamGame)\n        break;\n      default:\n        gameManager.startScene(e.target.value as GameState)\n    }\n  }\n\n  return (\n    <>\n      <DebugContainer disabled={transitionning} x={10} y={10} title=\"Game state\">\n        {availableStates.map(availableState => {\n          return (\n            <label key={availableState} className=\"game-state-list--item\">\n              <input\n                id={availableState}\n                className=\"radio\"\n                type=\"radio\"\n                name=\"currentState\"\n                value={availableState}\n                checked={availableState === state}\n                onChange={handleInputChange}\n              />\n              <span>{availableState}</span>\n            </label>\n          )\n        })}\n      </DebugContainer>\n    </>\n  )\n}\n\nexport default observer(GameDebugStateList)\n","import * as React from 'react'\nimport GameDebugStateList from './ui/debug/GameDebugStateList'\nimport { FunctionComponent } from 'react'\n\ninterface Props {\n  visible?: boolean\n}\n\nconst GameDebug: FunctionComponent<Props> = props => {\n  const { visible } = props\n\n  return (\n    <div\n      style={{ display: visible ? 'block' : 'none' }}\n      className=\"game-debug game-ui\"\n    >\n      <h1>Debug interface</h1>\n      <GameDebugStateList />\n    </div>\n  )\n}\n\nGameDebug.defaultProps = {\n  visible: false,\n}\n\nexport default GameDebug\n","import React, {FunctionComponent, MouseEventHandler, ReactNode} from 'react'\nimport {observer} from \"mobx-react-lite\";\nimport gameDebugStore from \"../../../store/GameDebugStore\";\nimport {ForceThemeProps, PositionneableProps} from \"../../../utils/interfaces\";\nimport {useClassTheme} from \"../../../utils/hooks\";\nimport Draggable from \"react-draggable\";\nimport {GameDebugTheme} from \"../../../utils/enums\";\n\ntype RenderProps = (theme: GameDebugTheme) => ReactNode\n\ninterface Props {\n  children?: RenderProps | ReactNode | string\n  className?: string\n  onClick?: MouseEventHandler<HTMLButtonElement>\n}\n\nconst DebugButton: FunctionComponent<\n  Props & ForceThemeProps & PositionneableProps\n> = props => {\n  const {\n    onClick,\n    children,\n    className,\n    forceTheme,\n    x,\n    y,\n    zIndex,\n    draggable,\n  } = props\n  const classNames = ['debug-button', 'game-debug-toggle-button']\n  const { theme } = gameDebugStore\n\n  if (className) {\n    classNames.push(...className.split(' '))\n  }\n\n  const themeClass = useClassTheme(forceTheme)\n  if (themeClass) {\n    classNames.push(themeClass)\n  }\n\n  const render = children\n    ? typeof children === 'function'\n      ? (children as RenderProps)(theme)\n      : children\n    : null\n\n  const button = (\n    <button\n      {...(onClick ? { onClick } : {})}\n      style={{\n        left: x,\n        top: y,\n        zIndex,\n        ...(x || y ? { position: 'fixed' } : {}),\n      }}\n      className={classNames.join(' ')}\n    >\n      {render}\n    </button>\n  )\n\n  if (draggable !== undefined && draggable) {\n    return <Draggable>{button}</Draggable>\n  }\n\n  return button\n}\n\nDebugButton.defaultProps = {\n  draggable: false,\n}\n\nexport default observer(DebugButton)\n","import * as React from 'react';\nimport {FunctionComponent} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport {useKeyboardShortcuts} from \"../../../utils/hooks\";\nimport {Key} from \"ts-key-enum\";\nimport gameDebugStore from \"../../../store/GameDebugStore\";\nimport DebugButton from \"./DebugButton\";\nimport {GameDebugTheme} from \"../../../utils/enums\";\n\nconst GameDebugToggleButton: FunctionComponent = () => {\n  const { debug, showDebug, hideDebug } = gameDebugStore\n\n  useKeyboardShortcuts([\n    {\n      keys: [Key.Escape],\n      action: hideDebug\n    },\n    {\n      keys: [\"D\"],\n      action: showDebug\n    }\n  ])\n\n  return (\n    <DebugButton\n      onClick={debug ? hideDebug : showDebug}\n      forceTheme={GameDebugTheme.Light}\n    >\n      {debug ? <i className=\"icon close\" /> : <i className=\"icon debug\" />}\n    </DebugButton>\n  )\n}\n\nexport default observer(GameDebugToggleButton)\n","import * as React from 'react'\nimport { FunctionComponent } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport gameDebugStore from '../../../store/GameDebugStore'\nimport DebugButton from './DebugButton'\n\nconst GameDebugToggleThemeButton: FunctionComponent = () => {\n  const { toggleTheme, otherThemeName } = gameDebugStore\n\n  return <DebugButton onClick={toggleTheme}>{otherThemeName[0]}</DebugButton>\n}\n\nexport default observer(GameDebugToggleThemeButton)\n","import React, {FunctionComponent} from 'react'\nimport styled from 'styled-components'\n\ninterface Props {\n  color?: string,\n  size?: \"small\" | \"medium\" | \"large\"\n}\n\nconst Div = styled.div`\n  display: flex;\n  -webkit-font-smoothing: antialiased;\n  justify-content: space-evenly;\n  width: 40px;\n  height: 40px;\n  transform: ${props => {\n    switch (props.size) {\n      case \"small\":\n        return 'scale(0.6)'\n      case \"medium\":\n        return 'scale(0.7)'\n      case \"large\":\n        return 'scale(0.8)'\n    }\n    return 'scale(0.8)'\n    }\n  };\n  & .bar {\n    position: relative;\n    width: ${(props: Props) => {\n      switch (props.size) {\n        case \"small\":\n          return '4px'\n        case \"medium\":\n          return '8px'\n        case \"large\":\n          return '12px'\n      }\n      \n      return '8px'\n}};\n    height: 100%;\n    background: ${props => props.color};\n    &:first-of-type {\n      margin-right: 0.6rem;\n    }\n  }\n`\n\nconst PauseIcon: FunctionComponent<Props> = (props) => {\n  const { color } = props\n\n  return (\n    <Div {...props} className=\"pause-icon\" style={{ color }}>\n      <div className=\"bar\"/>\n      <div className=\"bar\"/>\n    </Div>\n  )\n}\n\nPauseIcon.defaultProps = {\n  color: 'white',\n  size: \"large\"\n}\n\nexport default PauseIcon\n","import React, {FunctionComponent} from 'react'\nimport styled from 'styled-components'\n\ninterface Props {\n  color?: string,\n  size?: \"small\" | \"medium\" | \"large\"\n}\n\nconst Div = styled.div`\n  width: 40px;\n  height: 40px;\n  position: relative;\n  left: 6px;\n  border-style: solid;\n  border-width: 20px 0 20px 30px;\n  transform: ${(props: Props) => {\n    switch (props.size) {\n      case \"small\":\n        return 'scale(0.6)'\n      case \"medium\":\n        return 'scale(0.7)'\n      case \"large\":\n        return 'scale(0.8)'\n    }\n    return 'scale(1)'\n  }\n  };\n  border-color: transparent transparent transparent ${props => props.color};\n`\n\nconst PlayIcon: FunctionComponent<Props> = (props) => {\n  const { color } = props\n\n  return (\n    <Div {...props} className=\"play-icon\" style={{ color }}/>\n  )\n}\n\nPlayIcon.defaultProps = {\n  color: 'white',\n  size: \"large\"\n}\n\nexport default PlayIcon\n","import * as React from 'react';\nimport {FunctionComponent} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport DebugButton from \"./DebugButton\";\nimport PauseIcon from \"../icons/PauseIcon\";\nimport {GameDebugTheme} from \"../../../utils/enums\";\nimport gameStore from \"../../../store/GameStore\";\nimport PlayIcon from \"../icons/PlayIcon\";\nimport gameManager from \"../../../game/manager/GameManager\";\nimport {useKeyboardShortcuts} from \"../../../utils/hooks\";\n\nconst GameDebugTogglePauseButton: FunctionComponent = () => {\n  const { paused } = gameStore\n  const { togglePause } = gameManager\n\n  useKeyboardShortcuts([\n    {\n      keys: [\"P\"],\n      action: togglePause\n    }\n  ])\n\n  return (\n    <DebugButton onClick={togglePause}>\n      {theme =>\n        !paused && <PauseIcon color={theme === GameDebugTheme.Light ? \"black\" : \"white\"}/> ||\n        paused && <PlayIcon color={theme === GameDebugTheme.Light ? \"black\" : \"white\"}/>\n      }\n    </DebugButton>\n  )\n}\n\n\nexport default observer(\n  GameDebugTogglePauseButton\n)\n\n\n","import * as React from 'react';\nimport {FunctionComponent} from 'react';\nimport GameDebugToggleButton from \"./GameDebugToggleButton\";\nimport GameDebugToggleThemeButton from \"./GameDebugToggleThemeButton\";\nimport GameDebugTogglePauseButton from \"./GameDebugTogglePauseButton\";\n\nconst GameDebugButtonsToolbar: FunctionComponent = () => (\n  <div className=\"game-debug-buttons-toolbar\">\n    <GameDebugTogglePauseButton/>\n    <GameDebugToggleThemeButton />\n    <GameDebugToggleButton />\n  </div>\n)\n\nexport default GameDebugButtonsToolbar\n","import 'phaser'\nimport * as React from 'react';\nimport {useResize} from \"../utils/hooks\";\nimport GameUI from \"./ui/GameUI\";\nimport GameDebug from \"./GameDebug\";\nimport {FunctionComponent} from \"react\";\nimport {observer} from \"mobx-react-lite\";\nimport GameDebugButtonsToolbar from \"./ui/debug/GameDebugButtonsToolbar\";\nimport gameDebugStore from \"../store/GameDebugStore\";\nimport gameManager from \"../game/manager/GameManager\";\nimport gameStore from \"../store/GameStore\";\n\nconst Game: FunctionComponent = () => {\n  const { width, height } = useResize()\n  const { debug } = gameDebugStore\n  const { paused } = gameStore\n\n  if (gameManager.game.canvas) {\n    gameManager.game.canvas.style.transition = 'all 0.15s'\n    gameManager.game.canvas.width = width\n    gameManager.game.canvas.height = height\n    gameManager.game.canvas.style.width = `${width}px`\n    gameManager.game.canvas.style.height = `${height}px`\n    gameManager.game.canvas.style.filter = paused ? 'blur(20px) grayscale(80%)' : null\n    gameManager.game.canvas.style.transform = paused ? 'scale(1.2)' : null\n  }\n\n  return (\n    <div id=\"game\" className=\"game\">\n      <GameDebugButtonsToolbar />\n      <GameDebug visible={debug} />\n      <GameUI />\n    </div>\n  )\n}\n\nexport default observer(Game)\n","import * as React from 'react'\nimport { FunctionComponent } from 'react'\nimport Game from './components/Game'\n\nconst App: FunctionComponent = () => {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  )\n}\n\nexport default App\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.')\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.')\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport App from './App'\nimport 'gsap/CSSPlugin'\nimport './assets/styles/app.scss'\nimport registerServiceWorker from './registerServiceWorker'\nimport './utils/extensions'\n\nReactDOM.render(<App />, document.getElementById('root') as HTMLElement)\nregisterServiceWorker()\n"],"sourceRoot":""}